{
    "pipes": [
        {
            "name": "ErrorMessagePipe",
            "id": "pipe-ErrorMessagePipe-fec25a9e3568984f48ee771714ca340affcee194a5a8bbe0fb3b1ed4a396276dbcbb587909866a8b346993b05d9ae34d6f503e90515bbd512f0cf8a801126f95",
            "file": "projects/special-forms/src/lib/pipes/error-message-pipe/error.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "errorsObj",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "errorMessages",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "errorsObj",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "errorMessages",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "errorMessage",
            "sourceCode": "import { Pipe, PipeTransform } from \"@angular/core\";\r\nimport { FormControl } from \"@angular/forms\";\r\n\r\n@Pipe({\r\n  name: \"errorMessage\",\r\n})\r\nexport class ErrorMessagePipe implements PipeTransform {\r\n  transform(\r\n    errorsObj: { [key: string]: any },\r\n    errorMessages: { [key: string]: any },\r\n    control?: FormControl\r\n  ): any {\r\n    const errors = errorsObj ? Object.keys(errorsObj) : [];\r\n    const error = errors[0];\r\n    const message = errorMessages[error] || error;\r\n    if (control) {\r\n      control.setErrors(errorsObj);\r\n    }\r\n    return message;\r\n  }\r\n}\r\n"
        },
        {
            "name": "FormControlsListPipe",
            "id": "pipe-FormControlsListPipe-83c79f59e3f3a593f3ab5c18c7f5aa52ea6ad415e2e6f1633169ff7087c5188a951acb0f81ba2460a0f57ea5d6d8105eb8decd5adb76ccaecdbfbae87a9a2b7b",
            "file": "projects/special-forms/src/lib/pipes/controls-list-pipe/controls-list.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "controls",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SpecialFormControl[]",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "controls",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "controlsList",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { AbstractControl } from '@angular/forms';\r\nimport {\r\n  SpecialFormControl,\r\n} from '../../core/forms/special-forms';\r\n\r\n@Pipe({ name: 'controlsList' })\r\nexport class FormControlsListPipe implements PipeTransform {\r\n  transform(controls: {\r\n    [key: string]: AbstractControl;\r\n  }): SpecialFormControl<any>[] {\r\n    if (!controls) return [];\r\n    return Object.values(controls)\r\n      .filter((control: SpecialFormControl<any>) => !control.hidden)\r\n      .map((control) => control as SpecialFormControl<any>);\r\n  }\r\n}\r\n"
        },
        {
            "name": "TextByFunctionPipe",
            "id": "pipe-TextByFunctionPipe-2a962d1f00479a19622f9eb4f7346f106b17936c935f06b0136880ee979b65c7c1176fabdd1935af6252354f92c94a14e8e04ae9c79cf3c654ed42e9be232b93",
            "file": "projects/special-forms/src/lib/pipes/text-by-function/text-by-function.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "field",
                            "type": "string | ",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field",
                            "type": "string | ",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "textByFunction",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'textByFunction' })\r\nexport class TextByFunctionPipe implements PipeTransform {\r\n  transform(value: any, field: string | ((value: any) => string)): any {\r\n    if (field instanceof Function) {\r\n      return field(value);\r\n    } else if (value instanceof Object) {\r\n      return value[field];\r\n    } else {\r\n      return value;\r\n    }\r\n  }\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "CommonFormCreator",
            "id": "interface-CommonFormCreator-e4224b091d3dd0eecb881feaa10eebef371dd3b576c2d1539faeac078f408b604b84bf7544991781e631d07228278da1268f1a22fcad100d8716b2df436276fb",
            "file": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/common.form.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAutocompleteSettings } from '@lib/components/special-autocomplete/special-autocomplete.interface';\r\nimport { ICheckboxSettings } from '@lib/components/special-checkbox/special-checkbox.interface';\r\nimport { IDatePickerSettings } from '@lib/components/special-datepicker/special-datepicker.interface';\r\nimport { IDropdownSettings } from '@lib/components/special-dropdown/special-dropdown.interface';\r\nimport { IInputSettings } from '@lib/components/special-input/special-input.interface';\r\nimport { IFormStructure } from '@lib/core/interfaces/form.interfaces';\r\n\r\nexport type AllControlSettings =\r\n  | ICheckboxSettings\r\n  | IDropdownSettings\r\n  | IInputSettings\r\n  | IDatePickerSettings\r\n  | IAutocompleteSettings;\r\n\r\nexport interface CommonFormCreator {\r\n  settingsFields?(): IFormStructure;\r\n  getSettings(data: any): AllControlSettings;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "getSettings",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "AllControlSettings",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "settingsFields",
                    "args": [],
                    "optional": true,
                    "returnType": "IFormStructure",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ]
        },
        {
            "name": "IArrayField",
            "id": "interface-IArrayField-847ee4c98b5e2878d70ae2b45109a0da02bf0381fdf3e1207fddf2701dd3a438ab74a1b870152fe7836abfee052ed94386c1ca8901f366c4d1cfc62d61080dc4",
            "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAutocompleteField } from '../../components/special-autocomplete/special-autocomplete.interface';\r\nimport { IDatePickerField } from '../../components/special-datepicker/special-datepicker.interface';\r\nimport { IDropdownField } from '../../components/special-dropdown/special-dropdown.interface';\r\nimport { IInputField } from '../../components/special-input/special-input.interface';\r\nimport { ICheckboxField } from '../../components/special-checkbox/special-checkbox.interface';\r\nimport { IMultipleAutocompleteField } from '../../components/special-multiple-autocomplete/special-multiple-autocomplete.interface';\r\nimport { EControlTypes } from '../aux-data/control-types.enum';\r\nimport { IFieldData } from './field-basics.interfaces';\r\nimport { ITextAreaField } from '../../components/special-text-area/special-text-area.interface';\r\nimport { IUploadField } from '../../components/special-upload/special-upload.interface';\r\nimport { ILabelField } from '../../components/special-label/special-label.interface';\r\n\r\ninterface IcontrolName {\r\n  name: string;\r\n}\r\n\r\nexport type IFormSettings = {\r\n  formFields: IFormStructure;\r\n};\r\n\r\nexport interface IFormField extends IFieldData {\r\n  settings: IFormSettings;\r\n  type: EControlTypes.form;\r\n}\r\n\r\nexport type IArraySettings = {\r\n  formFields: IFormStructure;\r\n  withFormHeader?: boolean;\r\n  withActionButtons?: boolean;\r\n};\r\n\r\nexport interface IArrayField extends IFieldData {\r\n  settings: IArraySettings;\r\n  type: EControlTypes.array;\r\n}\r\n\r\nexport interface IDefaultField extends IFieldData {\r\n  settings: any;\r\n  type: EControlTypes.default;\r\n}\r\n\r\nexport type TRawFields =\r\n  | IDefaultField\r\n  | IInputField\r\n  | IDropdownField\r\n  | IArrayField\r\n  | IFormField\r\n  | IAutocompleteField\r\n  | IMultipleAutocompleteField\r\n  | IDatePickerField\r\n  | ITextAreaField\r\n  | IUploadField\r\n  | ILabelField\r\n  | ICheckboxField;\r\n\r\nexport type TSpecialInput = IInputField & IcontrolName;\r\nexport type TSpecialDefault = IDefaultField & IcontrolName;\r\nexport type TSpecialDropdown = IDropdownField & IcontrolName;\r\nexport type TSpecialArray = IArrayField & IcontrolName;\r\nexport type TSpecialForm = IFormField & IcontrolName;\r\nexport type TSpecialAutocomplete = IAutocompleteField & IcontrolName;\r\nexport type TSpecialDatepicker = IDatePickerField & IcontrolName;\r\nexport type ISpecialCheckbox = ICheckboxField & IcontrolName;\r\nexport type ISpecialTextArea = ITextAreaField & IcontrolName;\r\nexport type ISpecialLabel = ILabelField & IcontrolName;\r\nexport type ISpecialUpload = IUploadField & IcontrolName;\r\n\r\nexport type TSpecialFields =\r\n  | TSpecialDefault\r\n  | TSpecialInput\r\n  | TSpecialDropdown\r\n  | TSpecialArray\r\n  | TSpecialForm\r\n  | TSpecialAutocomplete\r\n  | ISpecialCheckbox\r\n  | ISpecialTextArea\r\n  | ISpecialUpload\r\n  | ISpecialLabel\r\n  | TSpecialDatepicker;\r\n\r\nexport interface IFormStructure {\r\n  [name: string]: Partial<TRawFields>;\r\n}\r\n",
            "properties": [
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IArraySettings",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EControlTypes.array",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IFieldData"
        },
        {
            "name": "IAutocompleteField",
            "id": "interface-IAutocompleteField-87fdda1493c26191f0c47088f53f0c47090d569f961e42323f64e7ca3f0b344d7867df4663caeaea0f068aba6058a7dfad37091b6ce2154418016ee14603b731",
            "file": "projects/special-forms/src/lib/components/special-autocomplete/special-autocomplete.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AbstractControl } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { EControlTypes } from '../../core/aux-data/control-types.enum';\r\nimport { IFieldData } from '../../core/interfaces/field-basics.interfaces';\r\n\r\nexport type IAutocompleteSettings = {\r\n  getData: (query: string, control?: AbstractControl) => void;\r\n  source: Observable<any[]>;\r\n  fieldId: string;\r\n  icon?: string;\r\n  iconAction?: (data: any) => void;\r\n  onSelect?: (data: any) => void;\r\n  fieldName: string | ((a?: any) => string);\r\n  fieldImage?: string | ((a?: any) => string);\r\n};\r\n\r\nexport interface IAutocompleteField extends IFieldData {\r\n  settings: IAutocompleteSettings;\r\n  type: EControlTypes.autocomplete;\r\n}\r\n",
            "properties": [
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAutocompleteSettings",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EControlTypes.autocomplete",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IFieldData"
        },
        {
            "name": "IAutocompleteSettingsFormData",
            "id": "interface-IAutocompleteSettingsFormData-24b747319def1af323d938afb8046802535004ed13f4e1438c996d0baf3547c10febc17b5927f32e67c01568ea24a3c9155b78c33a96b54723005b8891fc6374",
            "file": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/autocomplete.form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAutocompleteSettings } from '@lib/components/special-autocomplete/special-autocomplete.interface';\r\nimport { EControlTypes } from '@lib/core/aux-data/control-types.enum';\r\nimport { IFormStructure } from '@lib/core/interfaces/form.interfaces';\r\nimport { Subject } from 'rxjs';\r\nimport { CommonFormClass } from './common.form';\r\nimport { CommonFormCreator } from './common.form.interface';\r\n\r\ninterface IAutocompleteSettingsFormData {\r\n  source: { id: string; name: string; image?: string }[];\r\n  icon: { name: string };\r\n}\r\nexport class AutocompleteFormClass\r\n  extends CommonFormClass\r\n  implements CommonFormCreator\r\n{\r\n  public settingsFields(): IFormStructure {\r\n    return {\r\n      source: {\r\n        label: 'Data del campo',\r\n        styleClasses: 'px-2 box-border md:w-2/4',\r\n        type: EControlTypes.array,\r\n        settings: {\r\n          withActionButtons: true,\r\n          withFormHeader: true,\r\n          formFields: {\r\n            id: {\r\n              type: EControlTypes.input,\r\n              label: 'id',\r\n              styleClasses: 'col-span-12 md:col-span-4',\r\n              required: true,\r\n            },\r\n            name: {\r\n              type: EControlTypes.input,\r\n              label: 'Nombre',\r\n              styleClasses: 'col-span-12 md:col-span-4',\r\n              required: true,\r\n            },\r\n            image: {\r\n              type: EControlTypes.input,\r\n              label: 'Imagen',\r\n              styleClasses: 'col-span-12 md:col-span-4',\r\n            },\r\n          },\r\n        },\r\n      },\r\n      fieldId: {\r\n        type: EControlTypes.default,\r\n        defaultValue: 'id',\r\n      },\r\n      fieldName: {\r\n        type: EControlTypes.default,\r\n        defaultValue: 'name',\r\n      },\r\n      fieldImage: {\r\n        type: EControlTypes.default,\r\n        defaultValue: 'image',\r\n      },\r\n      icon: this.iconField('Icono derecho'),\r\n    };\r\n  }\r\n  public getSettings({\r\n    icon,\r\n    source,\r\n  }: IAutocompleteSettingsFormData): IAutocompleteSettings {\r\n    const source$ = new Subject<any[]>();\r\n\r\n    return {\r\n      source: source$.asObservable(),\r\n      getData: (query) => {\r\n        const filteredData = source\r\n          .filter((item) => item.name.includes(query))\r\n          .slice(0, 10);\r\n\r\n        source$.next(filteredData);\r\n      },\r\n      fieldId: 'id',\r\n      fieldName: 'name',\r\n      icon: icon?.name,\r\n      iconAction: (value) => {\r\n        console.log('ICON ACTION ' + value);\r\n      },\r\n      onSelect: (value) => {\r\n        console.log('ICON ACTION ' + value);\r\n      },\r\n    };\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ICheckboxField",
            "id": "interface-ICheckboxField-4af6b3c0bf30e312314679490ac107321f312bdd9f2a44999531a33948f891ff31614269bea2f41a83b64a892af192879ebfd2e606535649aa5c33e0711cc257",
            "file": "projects/special-forms/src/lib/components/special-checkbox/special-checkbox.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EControlTypes } from '../../core/aux-data/control-types.enum';\r\nimport { IFieldData } from '../../core/interfaces/field-basics.interfaces';\r\n\r\nexport type ICheckboxSettings = {\r\n  labelPosition?: 'before' | 'after';\r\n  indeterminate?:boolean\r\n};\r\n\r\nexport interface ICheckboxField extends IFieldData {\r\n  settings: ICheckboxSettings;\r\n  type: EControlTypes.checkbox;\r\n}\r\n",
            "properties": [
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICheckboxSettings",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EControlTypes.checkbox",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IFieldData"
        },
        {
            "name": "ICheckboxSettingsFormData",
            "id": "interface-ICheckboxSettingsFormData-213bdb9ff1155debbbecb9d0bd6ec55729a3a8a3b9d8121072828430fa46f797a82740880e020bbef607e4d9b2364551ce04b7ce31b665ce878604f74ce2ac95",
            "file": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/checkbox.form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ICheckboxSettings } from \"@lib/components/special-checkbox/special-checkbox.interface\";\r\nimport { EControlTypes } from \"@lib/core/aux-data/control-types.enum\";\r\nimport { IFormStructure } from \"@lib/core/interfaces/form.interfaces\";\r\nimport { of } from \"rxjs\";\r\nimport { CommonFormClass } from \"./common.form\";\r\nimport { CommonFormCreator } from \"./common.form.interface\";\r\n\r\ninterface ICheckboxSettingsFormData {\r\n  labelPosition?: 'before' | 'after';\r\n  indeterminate?: boolean;\r\n}\r\nexport class CheckboxFormClass\r\n  extends CommonFormClass\r\n  implements CommonFormCreator\r\n{\r\n  public settingsFields(): IFormStructure {\r\n    return {\r\n      labelPosition: {\r\n        label: 'Data del campo',\r\n        styleClasses: 'px-2 box-border md:w-2/4',\r\n        type: EControlTypes.dropdown,\r\n        settings: {\r\n          source: of([\r\n            {\r\n              name: 'before',\r\n            },\r\n            {\r\n              name: 'after',\r\n            },\r\n          ]),\r\n          fieldId: 'name',\r\n          fieldName: 'name',\r\n        },\r\n      },\r\n      indeterminate: {\r\n        label: 'Ideterminado',\r\n        type: EControlTypes.checkbox,\r\n      },\r\n    };\r\n  }\r\n\r\n  public getSettings({\r\n    indeterminate,\r\n    labelPosition,\r\n  }: ICheckboxSettingsFormData): ICheckboxSettings {\r\n    return {\r\n      indeterminate,\r\n      labelPosition,\r\n    };\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "indeterminate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "labelPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"before\" | \"after\"",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IcontrolName",
            "id": "interface-IcontrolName-847ee4c98b5e2878d70ae2b45109a0da02bf0381fdf3e1207fddf2701dd3a438ab74a1b870152fe7836abfee052ed94386c1ca8901f366c4d1cfc62d61080dc4",
            "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAutocompleteField } from '../../components/special-autocomplete/special-autocomplete.interface';\r\nimport { IDatePickerField } from '../../components/special-datepicker/special-datepicker.interface';\r\nimport { IDropdownField } from '../../components/special-dropdown/special-dropdown.interface';\r\nimport { IInputField } from '../../components/special-input/special-input.interface';\r\nimport { ICheckboxField } from '../../components/special-checkbox/special-checkbox.interface';\r\nimport { IMultipleAutocompleteField } from '../../components/special-multiple-autocomplete/special-multiple-autocomplete.interface';\r\nimport { EControlTypes } from '../aux-data/control-types.enum';\r\nimport { IFieldData } from './field-basics.interfaces';\r\nimport { ITextAreaField } from '../../components/special-text-area/special-text-area.interface';\r\nimport { IUploadField } from '../../components/special-upload/special-upload.interface';\r\nimport { ILabelField } from '../../components/special-label/special-label.interface';\r\n\r\ninterface IcontrolName {\r\n  name: string;\r\n}\r\n\r\nexport type IFormSettings = {\r\n  formFields: IFormStructure;\r\n};\r\n\r\nexport interface IFormField extends IFieldData {\r\n  settings: IFormSettings;\r\n  type: EControlTypes.form;\r\n}\r\n\r\nexport type IArraySettings = {\r\n  formFields: IFormStructure;\r\n  withFormHeader?: boolean;\r\n  withActionButtons?: boolean;\r\n};\r\n\r\nexport interface IArrayField extends IFieldData {\r\n  settings: IArraySettings;\r\n  type: EControlTypes.array;\r\n}\r\n\r\nexport interface IDefaultField extends IFieldData {\r\n  settings: any;\r\n  type: EControlTypes.default;\r\n}\r\n\r\nexport type TRawFields =\r\n  | IDefaultField\r\n  | IInputField\r\n  | IDropdownField\r\n  | IArrayField\r\n  | IFormField\r\n  | IAutocompleteField\r\n  | IMultipleAutocompleteField\r\n  | IDatePickerField\r\n  | ITextAreaField\r\n  | IUploadField\r\n  | ILabelField\r\n  | ICheckboxField;\r\n\r\nexport type TSpecialInput = IInputField & IcontrolName;\r\nexport type TSpecialDefault = IDefaultField & IcontrolName;\r\nexport type TSpecialDropdown = IDropdownField & IcontrolName;\r\nexport type TSpecialArray = IArrayField & IcontrolName;\r\nexport type TSpecialForm = IFormField & IcontrolName;\r\nexport type TSpecialAutocomplete = IAutocompleteField & IcontrolName;\r\nexport type TSpecialDatepicker = IDatePickerField & IcontrolName;\r\nexport type ISpecialCheckbox = ICheckboxField & IcontrolName;\r\nexport type ISpecialTextArea = ITextAreaField & IcontrolName;\r\nexport type ISpecialLabel = ILabelField & IcontrolName;\r\nexport type ISpecialUpload = IUploadField & IcontrolName;\r\n\r\nexport type TSpecialFields =\r\n  | TSpecialDefault\r\n  | TSpecialInput\r\n  | TSpecialDropdown\r\n  | TSpecialArray\r\n  | TSpecialForm\r\n  | TSpecialAutocomplete\r\n  | ISpecialCheckbox\r\n  | ISpecialTextArea\r\n  | ISpecialUpload\r\n  | ISpecialLabel\r\n  | TSpecialDatepicker;\r\n\r\nexport interface IFormStructure {\r\n  [name: string]: Partial<TRawFields>;\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IControlParams",
            "id": "interface-IControlParams-32b67ad7e2c96818bdee3813e3bf2921df3b741e79e91f189c46f1673c1df121e11f1d578e6527d86ea798f9be06e707c2125ba10e05161fb5ecf99e5e57dc94",
            "file": "projects/special-forms/src/lib/core/services/special-form-builder/special-form-builder.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AbstractControl, ValidatorFn, Validators } from '@angular/forms';\nimport { IAutocompleteSettings } from '../../../components/special-autocomplete/special-autocomplete.interface';\nimport { EControlTypes } from '../../aux-data/control-types.enum';\nimport {\n  SpecialFormArray,\n  SpecialFormControl,\n  SpecialFormGroup,\n} from '../../forms/special-forms';\nimport { IFieldData } from '../../interfaces/field-basics.interfaces';\nimport {\n  IFormStructure,\n  TRawFields,\n  TSpecialArray,\n  TSpecialFields,\n  TSpecialForm,\n  TSpecialInput,\n} from '../../interfaces/form.interfaces';\n\ninterface IControlParams {\n  name: string;\n  control: SpecialFormArray | SpecialFormGroup | SpecialFormControl<any>;\n}\n@Injectable({\n  providedIn: 'root',\n})\nexport class SpecialFormBuilderService {\n  private readonly defectField: IFieldData = {\n    asyncValidators: null,\n    validators: null,\n    defaultValue: null,\n    elementId: '',\n    hidden: false,\n    icon: '',\n    label: '',\n    disabled: false,\n    length: 0,\n    placeholder: '',\n    readOnly: false,\n    required: false,\n    styleClasses: '',\n    errorMessages: {},\n    tooltip: '',\n  };\n\n  private readonly inputDefectField: TSpecialInput = {\n    ...this.defectField,\n    settings: {},\n    type: EControlTypes.input,\n    name: '',\n  };\n\n  private readonly formDefectField: TSpecialForm = {\n    ...this.defectField,\n    settings: {\n      formFields: {},\n    },\n    type: EControlTypes.form,\n    name: '',\n  };\n\n  private readonly arrayDefectField: TSpecialArray = {\n    ...this.defectField,\n    settings: {\n      formFields: {},\n    },\n    type: EControlTypes.array,\n    name: '',\n  };\n\n  constructor() {}\n\n  public control(field: Partial<TSpecialFields>): SpecialFormControl<any> {\n    const formField: TSpecialFields = {\n      ...this.inputDefectField,\n      ...field,\n    } as TSpecialFields;\n    const { control } = this.setFormControl(formField);\n    return control;\n  }\n\n  public group(fields: IFormStructure) {\n    return this.formGenerator(this.fieldDataToArray(fields), {});\n  }\n\n  public array() {}\n\n  public fieldDataToArray(fields: IFormStructure): TSpecialFields[] {\n    return Object.entries(fields).map(([name, field]) =>\n      this.setDefectFieldOptions(name, field)\n    );\n  }\n\n  private setDefectFieldOptions(\n    name: string,\n    field: Partial<TRawFields>\n  ): TSpecialFields {\n    return {\n      ...this.inputDefectField,\n      ...field,\n      name,\n    } as TSpecialFields;\n  }\n\n  private formGenerator(\n    fields: TSpecialFields[],\n    parentField: Partial<TSpecialForm>,\n    isChild = false\n  ): SpecialFormGroup {\n    const formField: TSpecialForm = {\n      ...this.formDefectField,\n      ...parentField,\n    };\n    const structure = fields\n      .map((field) => {\n        switch (field.type) {\n          case EControlTypes.array:\n            return this.setFormArray(field);\n          case EControlTypes.form:\n            return this.setFormGroup(field);\n          default:\n            return this.setFormControl(field);\n        }\n      })\n      .reduce(\n        (prev, { name, control }: IControlParams) => ({\n          ...prev,\n          [name]: control,\n        }),\n        {}\n      );\n    return new SpecialFormGroup(formField, structure, isChild);\n  }\n\n  private setFormGroup(field: TSpecialForm): {\n    name: string;\n    control: SpecialFormGroup;\n  } {\n    const control = this.formGenerator(\n      this.fieldDataToArray(field.settings.formFields),\n      field,\n      true\n    );\n    return { control, name: field.name };\n  }\n\n  private setFormArray(field: TSpecialArray): {\n    name: string;\n    control: SpecialFormArray;\n  } {\n    const auxForm = (value = {}) => {\n      const auxForm = this.formGenerator(\n        this.fieldDataToArray(field.settings.formFields),\n        {},\n        true\n      );\n      auxForm.reset(value);\n      return auxForm;\n    };\n\n    if (field.required) {\n      field.validators = this.setValidatorsArray(field.validators, [\n        this.arrayLengthRequired,\n      ]);\n    }\n\n    return {\n      name: field.name,\n      control: new SpecialFormArray(field, auxForm, []),\n    };\n  }\n\n  private setFormControl(field: TSpecialFields): {\n    name: string;\n    control: SpecialFormControl<any>;\n  } {\n    const validators: ValidatorFn[] = [];\n\n    if (field.required) validators.push(this.setRequiredValidator(field));\n    if (field.length) validators.push(Validators.maxLength(field.length));\n\n    field.validators = this.setValidatorsArray(field.validators, validators);\n\n    return {\n      name: field.name,\n      control: new SpecialFormControl(field),\n    };\n  }\n\n  private setRequiredValidator(field: TSpecialFields): ValidatorFn {\n    if (field.type !== EControlTypes.autocomplete) {\n      return Validators.required;\n    }\n\n    return (control: SpecialFormControl<IAutocompleteSettings>) =>\n      !!control.value && control.value instanceof Object\n        ? null\n        : { required: true };\n  }\n  private setValidatorsArray(\n    validators: ValidatorFn | ValidatorFn[] | null,\n    newValidators: ValidatorFn[]\n  ): ValidatorFn[] {\n    if (!validators) {\n      return newValidators;\n    }\n    return validators instanceof Array\n      ? [...validators, ...newValidators]\n      : [validators, ...newValidators];\n  }\n\n  private arrayLengthRequired(control: AbstractControl) {\n    if (control.value.length) {\n      return {};\n    }\n    return { noItems: 'NO_SELECTED_ITEM' };\n  }\n}\n",
            "properties": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpecialFormArray | SpecialFormGroup | SpecialFormControl<any>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IDatePickerField",
            "id": "interface-IDatePickerField-d186dcb7f8ee58c326a0ab6f5a811aaa94d9a7cf882f87a5bffc23152cbd9b7d9e28197b68863228eac2d3e2b8f643df01ba2e6c7b5b6b7353e5ff18f2014e1d",
            "file": "projects/special-forms/src/lib/components/special-datepicker/special-datepicker.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EControlTypes } from '../../core/aux-data/control-types.enum';\r\nimport { IFieldData } from '../../core/interfaces/field-basics.interfaces';\r\n\r\nexport type IDatePickerSettings = {\r\n  lowerLimit?: number;\r\n  upperLimit?: number;\r\n  startAt?: Date;\r\n};\r\n\r\nexport interface IDatePickerField extends IFieldData {\r\n  settings: IDatePickerSettings;\r\n  type: EControlTypes.date;\r\n}\r\n",
            "properties": [
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDatePickerSettings",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EControlTypes.date",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IFieldData"
        },
        {
            "name": "IDatePickerSettingsFormData",
            "id": "interface-IDatePickerSettingsFormData-7dffc6151e0df71fb9feda5787f0735e49a1994b38fecc074f8fb5f0798a46bd3808009d40daa362189a5fcae6835b95268d1fe9353721392990407c5dd4ef03",
            "file": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/datepicker.form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IDatePickerSettings } from '@lib/components/special-datepicker/special-datepicker.interface';\r\nimport { EControlTypes } from '@lib/core/aux-data/control-types.enum';\r\nimport { IFormStructure } from '@lib/core/interfaces/form.interfaces';\r\nimport { numberMask } from '@lib/core/masks/number.mask';\r\nimport { CommonFormClass } from './common.form';\r\nimport { CommonFormCreator } from './common.form.interface';\r\n\r\ninterface IDatePickerSettingsFormData {\r\n  lowerLimit: number;\r\n  upperLimit: number;\r\n  startAt: Date;\r\n}\r\nexport class DatePickerFormClass\r\n  extends CommonFormClass\r\n  implements CommonFormCreator\r\n{\r\n  public settingsFields(): IFormStructure {\r\n    return {\r\n      lowerLimit: {\r\n        label: 'Límite inferior',\r\n        styleClasses: 'px-2 box-border md:w-2/4',\r\n        type: EControlTypes.input,\r\n        settings: {\r\n          mask: numberMask(10000000000000),\r\n        },\r\n      },\r\n      upperLimit: {\r\n        label: 'Límite superior',\r\n        styleClasses: 'px-2 box-border md:w-2/4',\r\n        type: EControlTypes.input,\r\n        settings: {\r\n          mask: numberMask(10000000000000),\r\n        },\r\n      },\r\n      startAt: {\r\n        label: 'Empezar en',\r\n        styleClasses: 'px-2 box-border md:w-2/4',\r\n        type: EControlTypes.dropdown,\r\n      },\r\n      icon: this.iconField('Icono derecho'),\r\n    };\r\n  }\r\n\r\n  public getSettings({\r\n    lowerLimit,\r\n    startAt,\r\n    upperLimit,\r\n  }: IDatePickerSettingsFormData): IDatePickerSettings {\r\n    return {\r\n      lowerLimit,\r\n      startAt,\r\n      upperLimit,\r\n    };\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "lowerLimit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "startAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "upperLimit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IDefaultField",
            "id": "interface-IDefaultField-847ee4c98b5e2878d70ae2b45109a0da02bf0381fdf3e1207fddf2701dd3a438ab74a1b870152fe7836abfee052ed94386c1ca8901f366c4d1cfc62d61080dc4",
            "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAutocompleteField } from '../../components/special-autocomplete/special-autocomplete.interface';\r\nimport { IDatePickerField } from '../../components/special-datepicker/special-datepicker.interface';\r\nimport { IDropdownField } from '../../components/special-dropdown/special-dropdown.interface';\r\nimport { IInputField } from '../../components/special-input/special-input.interface';\r\nimport { ICheckboxField } from '../../components/special-checkbox/special-checkbox.interface';\r\nimport { IMultipleAutocompleteField } from '../../components/special-multiple-autocomplete/special-multiple-autocomplete.interface';\r\nimport { EControlTypes } from '../aux-data/control-types.enum';\r\nimport { IFieldData } from './field-basics.interfaces';\r\nimport { ITextAreaField } from '../../components/special-text-area/special-text-area.interface';\r\nimport { IUploadField } from '../../components/special-upload/special-upload.interface';\r\nimport { ILabelField } from '../../components/special-label/special-label.interface';\r\n\r\ninterface IcontrolName {\r\n  name: string;\r\n}\r\n\r\nexport type IFormSettings = {\r\n  formFields: IFormStructure;\r\n};\r\n\r\nexport interface IFormField extends IFieldData {\r\n  settings: IFormSettings;\r\n  type: EControlTypes.form;\r\n}\r\n\r\nexport type IArraySettings = {\r\n  formFields: IFormStructure;\r\n  withFormHeader?: boolean;\r\n  withActionButtons?: boolean;\r\n};\r\n\r\nexport interface IArrayField extends IFieldData {\r\n  settings: IArraySettings;\r\n  type: EControlTypes.array;\r\n}\r\n\r\nexport interface IDefaultField extends IFieldData {\r\n  settings: any;\r\n  type: EControlTypes.default;\r\n}\r\n\r\nexport type TRawFields =\r\n  | IDefaultField\r\n  | IInputField\r\n  | IDropdownField\r\n  | IArrayField\r\n  | IFormField\r\n  | IAutocompleteField\r\n  | IMultipleAutocompleteField\r\n  | IDatePickerField\r\n  | ITextAreaField\r\n  | IUploadField\r\n  | ILabelField\r\n  | ICheckboxField;\r\n\r\nexport type TSpecialInput = IInputField & IcontrolName;\r\nexport type TSpecialDefault = IDefaultField & IcontrolName;\r\nexport type TSpecialDropdown = IDropdownField & IcontrolName;\r\nexport type TSpecialArray = IArrayField & IcontrolName;\r\nexport type TSpecialForm = IFormField & IcontrolName;\r\nexport type TSpecialAutocomplete = IAutocompleteField & IcontrolName;\r\nexport type TSpecialDatepicker = IDatePickerField & IcontrolName;\r\nexport type ISpecialCheckbox = ICheckboxField & IcontrolName;\r\nexport type ISpecialTextArea = ITextAreaField & IcontrolName;\r\nexport type ISpecialLabel = ILabelField & IcontrolName;\r\nexport type ISpecialUpload = IUploadField & IcontrolName;\r\n\r\nexport type TSpecialFields =\r\n  | TSpecialDefault\r\n  | TSpecialInput\r\n  | TSpecialDropdown\r\n  | TSpecialArray\r\n  | TSpecialForm\r\n  | TSpecialAutocomplete\r\n  | ISpecialCheckbox\r\n  | ISpecialTextArea\r\n  | ISpecialUpload\r\n  | ISpecialLabel\r\n  | TSpecialDatepicker;\r\n\r\nexport interface IFormStructure {\r\n  [name: string]: Partial<TRawFields>;\r\n}\r\n",
            "properties": [
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EControlTypes.default",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IFieldData"
        },
        {
            "name": "IDropdownField",
            "id": "interface-IDropdownField-9fb2753957736584bbd229906d7ca16964a4b2fc9953ef3287f6361b7a03610e12d6ac9093b4bf697f1b5f42f67abd79bd8357b0c27ab22828a71298f35a7726",
            "file": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { EControlTypes } from '../../core/aux-data/control-types.enum';\r\nimport { IFieldData } from '../../core/interfaces/field-basics.interfaces';\r\n\r\nexport type IDropdownSettings = {\r\n  icon?: string;\r\n  onSelect?: (data: any) => void;\r\n  iconAction?: (data: any) => void;\r\n  source: Observable<any[]>;\r\n  fieldId: string;\r\n  fieldName: string | ((a?: any) => string);\r\n  notSelectedText?: string;\r\n};\r\n\r\nexport interface IDropdownField extends IFieldData {\r\n  settings: IDropdownSettings;\r\n  type: EControlTypes.dropdown;\r\n}\r\n",
            "properties": [
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDropdownSettings",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EControlTypes.dropdown",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IFieldData"
        },
        {
            "name": "IDropdownSettingsFormData",
            "id": "interface-IDropdownSettingsFormData-187e1ea7f224b2958c9594f2d0b5ca4dd283d68874e20eb8b7f0f21535d92daebf0aec94ba992aaf795ab2554af0d427903b9820477d68394889fe4aad78e38c",
            "file": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/dropdown.form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IDropdownSettings } from '@lib/components/special-dropdown/special-dropdown.interface';\r\nimport { EControlTypes } from '@lib/core/aux-data/control-types.enum';\r\nimport { IFormStructure } from '@lib/core/interfaces/form.interfaces';\r\nimport { of } from 'rxjs';\r\n\r\nimport { CommonFormClass } from './common.form';\r\nimport { CommonFormCreator } from './common.form.interface';\r\n\r\ninterface IDropdownSettingsFormData {\r\n  source: { id: string; name: string }[];\r\n  notSelectedText: string;\r\n  icon: { name: string };\r\n}\r\nexport class DropDownFormClass\r\n  extends CommonFormClass\r\n  implements CommonFormCreator\r\n{\r\n  public settingsFields(): IFormStructure {\r\n    return {\r\n      source: {\r\n        label: 'Data del campo',\r\n        styleClasses: 'px-2 box-border md:w-2/4',\r\n        type: EControlTypes.array,\r\n        settings: {\r\n          withActionButtons: true,\r\n          withFormHeader: true,\r\n          formFields: {\r\n            id: {\r\n              type: EControlTypes.input,\r\n              label: 'Id',\r\n              styleClasses: 'col-span-12 md:col-span-6',\r\n              required: true,\r\n            },\r\n            name: {\r\n              type: EControlTypes.input,\r\n              label: 'Nombre',\r\n              styleClasses: 'col-span-12 md:col-span-6',\r\n              required: true,\r\n            },\r\n          },\r\n        },\r\n      },\r\n      fieldId: {\r\n        type: EControlTypes.default,\r\n        defaultValue: 'id',\r\n      },\r\n      fieldName: {\r\n        type: EControlTypes.default,\r\n        defaultValue: 'name',\r\n      },\r\n      notSelectedText: {\r\n        placeholder: '',\r\n        label: 'Label de no seleccion',\r\n        styleClasses: 'px-2 box-border md:w-2/4',\r\n        type: EControlTypes.input,\r\n      },\r\n      icon: this.iconField('Icono derecho'),\r\n    };\r\n  }\r\n\r\n  public getSettings({\r\n    icon,\r\n    notSelectedText,\r\n    source,\r\n  }: IDropdownSettingsFormData): IDropdownSettings {\r\n    return {\r\n      source: of(source),\r\n      fieldId: 'id',\r\n      fieldName: 'name',\r\n      notSelectedText,\r\n      icon: icon?.name,\r\n      iconAction: (value) => {\r\n        console.log('ICON ACTION ' + value);\r\n      },\r\n      onSelect: (value) => {\r\n        console.log('ICON ACTION ' + value);\r\n      },\r\n    };\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "notSelectedText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IFieldBasicData",
            "id": "interface-IFieldBasicData-665156c2c01caef204d089a3b0c69da25ff1968594f6c709a0109b5d42acf16ab6845086a4f231f4f9735ace65ba57cb12f277fb6c7784929775acd2ec5190ed",
            "file": "projects/special-forms/src/lib/core/interfaces/field-basics.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AsyncValidatorFn, ValidatorFn } from '@angular/forms';\r\n\r\nexport interface IFieldBasicData {\r\n  placeholder: string;\r\n  label: string;\r\n  tooltip: string;\r\n  icon: string;\r\n  elementId: string;\r\n  styleClasses: string;\r\n  length: number;\r\n  required: boolean;\r\n  hidden: boolean;\r\n  readOnly: boolean;\r\n  disabled:boolean;\r\n  errorMessages: { [key: string]: string };\r\n}\r\n\r\nexport interface IFieldData extends IFieldBasicData {\r\n  validators: ValidatorFn | ValidatorFn[] | null;\r\n  asyncValidators: AsyncValidatorFn | AsyncValidatorFn[] | null;\r\n  defaultValue: any;\r\n}\r\n",
            "properties": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "elementId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "errorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "length",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "readOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "styleClasses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IFieldData",
            "id": "interface-IFieldData-665156c2c01caef204d089a3b0c69da25ff1968594f6c709a0109b5d42acf16ab6845086a4f231f4f9735ace65ba57cb12f277fb6c7784929775acd2ec5190ed",
            "file": "projects/special-forms/src/lib/core/interfaces/field-basics.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AsyncValidatorFn, ValidatorFn } from '@angular/forms';\r\n\r\nexport interface IFieldBasicData {\r\n  placeholder: string;\r\n  label: string;\r\n  tooltip: string;\r\n  icon: string;\r\n  elementId: string;\r\n  styleClasses: string;\r\n  length: number;\r\n  required: boolean;\r\n  hidden: boolean;\r\n  readOnly: boolean;\r\n  disabled:boolean;\r\n  errorMessages: { [key: string]: string };\r\n}\r\n\r\nexport interface IFieldData extends IFieldBasicData {\r\n  validators: ValidatorFn | ValidatorFn[] | null;\r\n  asyncValidators: AsyncValidatorFn | AsyncValidatorFn[] | null;\r\n  defaultValue: any;\r\n}\r\n",
            "properties": [
                {
                    "name": "asyncValidators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AsyncValidatorFn | AsyncValidatorFn[] | null",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "validators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn | ValidatorFn[] | null",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IFieldBasicData"
        },
        {
            "name": "IFieldFormData",
            "id": "interface-IFieldFormData-97d00b9b330c6e853be86a539d409d09f8cad699bf64719c4f86966221ed16f3652c8ffc1d5cd8b3c0633f449767cf3891905f67db4e22c36afb2855f792b3fd",
            "file": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/field.form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IInputSettings } from '@lib/components/special-input/special-input.interface';\r\nimport { InputTypes } from '@lib/components/special-input/special-input.stories';\r\nimport { EControlTypes } from '@lib/core/aux-data/control-types.enum';\r\nimport {\r\n  IFormStructure,\r\n  TSpecialFields,\r\n} from '@lib/core/interfaces/form.interfaces';\r\nimport { Masks } from '@lib/core/masks/maks.enum';\r\nimport { numberMask } from '@lib/core/masks/number.mask';\r\nimport { EnumToArray } from '@lib/core/utils/enum-to-array.util';\r\nimport { InputmaskOptions } from '@ngneat/input-mask';\r\nimport { of } from 'rxjs';\r\nimport { CommonFormClass } from './common.form';\r\nimport { AllControlSettings, CommonFormCreator } from './common.form.interface';\r\n\r\ninterface IFieldFormData {\r\n  type: any;\r\n  placeholder: string;\r\n  label: string;\r\n  name: string;\r\n  tooltip: string;\r\n  icon: { name: string };\r\n  length: number;\r\n  required: boolean;\r\n  readOnly: boolean;\r\n  hidden: boolean;\r\n  disabled: boolean;\r\n  errorMessages: { key: string; value: string }[];\r\n}\r\nexport class FieldFormClass extends CommonFormClass {\r\n  public fields(): IFormStructure {\r\n    return {\r\n      type: {\r\n        placeholder: 'Selecciona el tipo de control',\r\n        label: 'Tipo de control',\r\n        styleClasses: 'px-2 box-border md:w-1/4',\r\n        type: EControlTypes.dropdown,\r\n        settings: {\r\n          fieldId: 'value',\r\n          fieldName: 'value',\r\n          source: of(EnumToArray(EControlTypes)),\r\n        },\r\n      },\r\n      placeholder: {\r\n        placeholder: '',\r\n        label: 'Placeholder',\r\n        styleClasses: 'px-2 box-border md:w-1/4',\r\n        type: EControlTypes.input,\r\n        settings: {},\r\n      },\r\n      label: {\r\n        placeholder: '',\r\n        label: 'Etiqueta',\r\n        styleClasses: 'px-2 box-border md:w-1/4',\r\n        type: EControlTypes.input,\r\n        settings: {},\r\n      },\r\n      name: {\r\n        placeholder: '',\r\n        label: 'Nombre del campo',\r\n        styleClasses: 'px-2 box-border md:w-1/4',\r\n        type: EControlTypes.input,\r\n        settings: {},\r\n      },\r\n      tooltip: {\r\n        placeholder: '',\r\n        label: 'Mensaje de ayuda',\r\n        styleClasses: 'px-2 box-border md:w-1/4',\r\n        type: EControlTypes.input,\r\n        settings: {},\r\n      },\r\n      length: {\r\n        placeholder: '',\r\n        label: 'Largo permitido',\r\n        styleClasses: 'px-2 box-border md:w-1/4',\r\n        type: EControlTypes.input,\r\n        settings: {\r\n          mask: numberMask(),\r\n        },\r\n      },\r\n      icon: this.iconField('Icono'),\r\n      required: {\r\n        label: 'Campo requerido',\r\n        styleClasses: 'px-2 box-border md:w-1/4',\r\n        type: EControlTypes.checkbox,\r\n        icon: 'task_alt',\r\n        defaultValue: false,\r\n        settings: {},\r\n      },\r\n      readOnly: {\r\n        label: 'Campo de solo lectura',\r\n        styleClasses: 'px-2 box-border md:w-1/4',\r\n        type: EControlTypes.checkbox,\r\n        icon: 'edit_off',\r\n        defaultValue: false,\r\n        settings: {},\r\n      },\r\n      hidden: {\r\n        label: 'Campo escondido',\r\n        icon: 'visibility_off',\r\n        styleClasses: 'px-2 box-border md:w-1/4',\r\n        type: EControlTypes.checkbox,\r\n        defaultValue: false,\r\n        settings: {},\r\n      },\r\n      disabled: {\r\n        label: 'Campo desactivado',\r\n        styleClasses: 'px-2 box-border md:w-1/4',\r\n        type: EControlTypes.checkbox,\r\n        icon: 'block',\r\n        defaultValue: false,\r\n        settings: {},\r\n      },\r\n      errorMessages: {\r\n        type: EControlTypes.array,\r\n        label: 'Mensajes de error',\r\n        settings: {\r\n          withFormHeader: true,\r\n          withActionButtons: true,\r\n          formFields: {\r\n            key: {\r\n              type: EControlTypes.input,\r\n              label: 'Key',\r\n              styleClasses: 'col-span-12 md:col-span-6',\r\n              required: true,\r\n            },\r\n            value: {\r\n              type: EControlTypes.input,\r\n              label: 'value',\r\n              styleClasses: 'col-span-12 md:col-span-6',\r\n              required: true,\r\n            },\r\n          },\r\n        },\r\n      },\r\n    };\r\n  }\r\n\r\n  public getField(\r\n    {\r\n      disabled,\r\n      errorMessages,\r\n      hidden,\r\n      icon,\r\n      label,\r\n      length,\r\n      name,\r\n      placeholder,\r\n      readOnly,\r\n      required,\r\n      tooltip,\r\n      type,\r\n    }: IFieldFormData,\r\n    settings: AllControlSettings\r\n  ): IFormStructure {\r\n    return {\r\n      [name || 'default']: {\r\n        type,\r\n        settings,\r\n        disabled,\r\n        hidden,\r\n        icon: icon?.name,\r\n        label,\r\n        length,\r\n        placeholder,\r\n        readOnly,\r\n        required,\r\n        tooltip,\r\n        errorMessages: errorMessages.reduce(\r\n          (prev, curr) => ({ ...prev, [curr.key]: curr.value }),\r\n          {}\r\n        ),\r\n      },\r\n    };\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "errorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "length",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "readOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IFormField",
            "id": "interface-IFormField-847ee4c98b5e2878d70ae2b45109a0da02bf0381fdf3e1207fddf2701dd3a438ab74a1b870152fe7836abfee052ed94386c1ca8901f366c4d1cfc62d61080dc4",
            "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAutocompleteField } from '../../components/special-autocomplete/special-autocomplete.interface';\r\nimport { IDatePickerField } from '../../components/special-datepicker/special-datepicker.interface';\r\nimport { IDropdownField } from '../../components/special-dropdown/special-dropdown.interface';\r\nimport { IInputField } from '../../components/special-input/special-input.interface';\r\nimport { ICheckboxField } from '../../components/special-checkbox/special-checkbox.interface';\r\nimport { IMultipleAutocompleteField } from '../../components/special-multiple-autocomplete/special-multiple-autocomplete.interface';\r\nimport { EControlTypes } from '../aux-data/control-types.enum';\r\nimport { IFieldData } from './field-basics.interfaces';\r\nimport { ITextAreaField } from '../../components/special-text-area/special-text-area.interface';\r\nimport { IUploadField } from '../../components/special-upload/special-upload.interface';\r\nimport { ILabelField } from '../../components/special-label/special-label.interface';\r\n\r\ninterface IcontrolName {\r\n  name: string;\r\n}\r\n\r\nexport type IFormSettings = {\r\n  formFields: IFormStructure;\r\n};\r\n\r\nexport interface IFormField extends IFieldData {\r\n  settings: IFormSettings;\r\n  type: EControlTypes.form;\r\n}\r\n\r\nexport type IArraySettings = {\r\n  formFields: IFormStructure;\r\n  withFormHeader?: boolean;\r\n  withActionButtons?: boolean;\r\n};\r\n\r\nexport interface IArrayField extends IFieldData {\r\n  settings: IArraySettings;\r\n  type: EControlTypes.array;\r\n}\r\n\r\nexport interface IDefaultField extends IFieldData {\r\n  settings: any;\r\n  type: EControlTypes.default;\r\n}\r\n\r\nexport type TRawFields =\r\n  | IDefaultField\r\n  | IInputField\r\n  | IDropdownField\r\n  | IArrayField\r\n  | IFormField\r\n  | IAutocompleteField\r\n  | IMultipleAutocompleteField\r\n  | IDatePickerField\r\n  | ITextAreaField\r\n  | IUploadField\r\n  | ILabelField\r\n  | ICheckboxField;\r\n\r\nexport type TSpecialInput = IInputField & IcontrolName;\r\nexport type TSpecialDefault = IDefaultField & IcontrolName;\r\nexport type TSpecialDropdown = IDropdownField & IcontrolName;\r\nexport type TSpecialArray = IArrayField & IcontrolName;\r\nexport type TSpecialForm = IFormField & IcontrolName;\r\nexport type TSpecialAutocomplete = IAutocompleteField & IcontrolName;\r\nexport type TSpecialDatepicker = IDatePickerField & IcontrolName;\r\nexport type ISpecialCheckbox = ICheckboxField & IcontrolName;\r\nexport type ISpecialTextArea = ITextAreaField & IcontrolName;\r\nexport type ISpecialLabel = ILabelField & IcontrolName;\r\nexport type ISpecialUpload = IUploadField & IcontrolName;\r\n\r\nexport type TSpecialFields =\r\n  | TSpecialDefault\r\n  | TSpecialInput\r\n  | TSpecialDropdown\r\n  | TSpecialArray\r\n  | TSpecialForm\r\n  | TSpecialAutocomplete\r\n  | ISpecialCheckbox\r\n  | ISpecialTextArea\r\n  | ISpecialUpload\r\n  | ISpecialLabel\r\n  | TSpecialDatepicker;\r\n\r\nexport interface IFormStructure {\r\n  [name: string]: Partial<TRawFields>;\r\n}\r\n",
            "properties": [
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFormSettings",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EControlTypes.form",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IFieldData"
        },
        {
            "name": "IFormStructure",
            "id": "interface-IFormStructure-847ee4c98b5e2878d70ae2b45109a0da02bf0381fdf3e1207fddf2701dd3a438ab74a1b870152fe7836abfee052ed94386c1ca8901f366c4d1cfc62d61080dc4",
            "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAutocompleteField } from '../../components/special-autocomplete/special-autocomplete.interface';\r\nimport { IDatePickerField } from '../../components/special-datepicker/special-datepicker.interface';\r\nimport { IDropdownField } from '../../components/special-dropdown/special-dropdown.interface';\r\nimport { IInputField } from '../../components/special-input/special-input.interface';\r\nimport { ICheckboxField } from '../../components/special-checkbox/special-checkbox.interface';\r\nimport { IMultipleAutocompleteField } from '../../components/special-multiple-autocomplete/special-multiple-autocomplete.interface';\r\nimport { EControlTypes } from '../aux-data/control-types.enum';\r\nimport { IFieldData } from './field-basics.interfaces';\r\nimport { ITextAreaField } from '../../components/special-text-area/special-text-area.interface';\r\nimport { IUploadField } from '../../components/special-upload/special-upload.interface';\r\nimport { ILabelField } from '../../components/special-label/special-label.interface';\r\n\r\ninterface IcontrolName {\r\n  name: string;\r\n}\r\n\r\nexport type IFormSettings = {\r\n  formFields: IFormStructure;\r\n};\r\n\r\nexport interface IFormField extends IFieldData {\r\n  settings: IFormSettings;\r\n  type: EControlTypes.form;\r\n}\r\n\r\nexport type IArraySettings = {\r\n  formFields: IFormStructure;\r\n  withFormHeader?: boolean;\r\n  withActionButtons?: boolean;\r\n};\r\n\r\nexport interface IArrayField extends IFieldData {\r\n  settings: IArraySettings;\r\n  type: EControlTypes.array;\r\n}\r\n\r\nexport interface IDefaultField extends IFieldData {\r\n  settings: any;\r\n  type: EControlTypes.default;\r\n}\r\n\r\nexport type TRawFields =\r\n  | IDefaultField\r\n  | IInputField\r\n  | IDropdownField\r\n  | IArrayField\r\n  | IFormField\r\n  | IAutocompleteField\r\n  | IMultipleAutocompleteField\r\n  | IDatePickerField\r\n  | ITextAreaField\r\n  | IUploadField\r\n  | ILabelField\r\n  | ICheckboxField;\r\n\r\nexport type TSpecialInput = IInputField & IcontrolName;\r\nexport type TSpecialDefault = IDefaultField & IcontrolName;\r\nexport type TSpecialDropdown = IDropdownField & IcontrolName;\r\nexport type TSpecialArray = IArrayField & IcontrolName;\r\nexport type TSpecialForm = IFormField & IcontrolName;\r\nexport type TSpecialAutocomplete = IAutocompleteField & IcontrolName;\r\nexport type TSpecialDatepicker = IDatePickerField & IcontrolName;\r\nexport type ISpecialCheckbox = ICheckboxField & IcontrolName;\r\nexport type ISpecialTextArea = ITextAreaField & IcontrolName;\r\nexport type ISpecialLabel = ILabelField & IcontrolName;\r\nexport type ISpecialUpload = IUploadField & IcontrolName;\r\n\r\nexport type TSpecialFields =\r\n  | TSpecialDefault\r\n  | TSpecialInput\r\n  | TSpecialDropdown\r\n  | TSpecialArray\r\n  | TSpecialForm\r\n  | TSpecialAutocomplete\r\n  | ISpecialCheckbox\r\n  | ISpecialTextArea\r\n  | ISpecialUpload\r\n  | ISpecialLabel\r\n  | TSpecialDatepicker;\r\n\r\nexport interface IFormStructure {\r\n  [name: string]: Partial<TRawFields>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-847ee4c98b5e2878d70ae2b45109a0da02bf0381fdf3e1207fddf2701dd3a438ab74a1b870152fe7836abfee052ed94386c1ca8901f366c4d1cfc62d61080dc4",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Partial<TRawFields>",
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 175,
            "methods": []
        },
        {
            "name": "IInputField",
            "id": "interface-IInputField-b971ce279a5c346355625649c0a3d75209bced80bdc39c6f07ccbb9a31d72bb6ba6aa71509c18868aca07aed739cc51c4f2d21383697f4142e7d19c081fe28ed",
            "file": "projects/special-forms/src/lib/components/special-input/special-input.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { InputmaskOptions } from '@ngneat/input-mask';\r\nimport { EControlTypes } from '../../core/aux-data/control-types.enum';\r\nimport { IFieldData } from '../../core/interfaces/field-basics.interfaces';\r\n\r\nexport type IInputSettings = {\r\n  type?: string;\r\n  mask?: InputmaskOptions<any>;\r\n  icon?: string;\r\n  iconAction?: (data: any) => void;\r\n  onEnter?: (data: any) => void;\r\n  onBlur?: (data: any) => void;\r\n};\r\n\r\nexport interface IInputField extends IFieldData {\r\n  settings: IInputSettings;\r\n  type: EControlTypes.input;\r\n}\r\n",
            "properties": [
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IInputSettings",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EControlTypes.input",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IFieldData"
        },
        {
            "name": "IInputSettingsFormData",
            "id": "interface-IInputSettingsFormData-42a95c8e88a6cadaf6ab2bb097ef791fb65649721db067864a8b16bc22d6a2b2f1e82b38a5b0f497dfb36e38e473adbb2b6d5fbedaad287c9bf825f161df44fb",
            "file": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/input.form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IInputSettings } from '@lib/components/special-input/special-input.interface';\r\nimport { InputTypes } from '@lib/components/special-input/special-input.stories';\r\nimport { EControlTypes } from '@lib/core/aux-data/control-types.enum';\r\nimport { IFormStructure } from '@lib/core/interfaces/form.interfaces';\r\nimport { Masks } from '@lib/core/masks/maks.enum';\r\nimport { InputmaskOptions } from '@ngneat/input-mask';\r\nimport { of } from 'rxjs';\r\nimport { CommonFormClass } from './common.form';\r\nimport { CommonFormCreator } from './common.form.interface';\r\n\r\ninterface IInputSettingsFormData {\r\n  type: string;\r\n  mask: InputmaskOptions<any>;\r\n  icon: { name: string };\r\n}\r\nexport class InputFormClass\r\n  extends CommonFormClass\r\n  implements CommonFormCreator\r\n{\r\n  public settingsFields(): IFormStructure {\r\n    return {\r\n      type: {\r\n        placeholder: 'Tipo de control',\r\n        label: 'Tipo de control',\r\n        styleClasses: 'px-2 box-border md:w-2/4',\r\n        type: EControlTypes.dropdown,\r\n        settings: {\r\n          fieldId: 'value',\r\n          fieldName: 'value',\r\n          source: of(InputTypes.map((type) => ({ value: type }))),\r\n        },\r\n      },\r\n      mask: {\r\n        placeholder: 'Máscara',\r\n        label: 'Tipo de máscara',\r\n        styleClasses: 'px-2 box-border md:w-2/4',\r\n        type: EControlTypes.dropdown,\r\n        settings: {\r\n          fieldId: 'value',\r\n          fieldName: 'key',\r\n          notSelectedText: 'Sin máscara',\r\n          source: of(\r\n            Object.entries(Masks).map(([key, value]) => ({ key, value }))\r\n          ),\r\n        },\r\n      },\r\n      icon: this.iconField('Icono derecho'),\r\n    };\r\n  }\r\n\r\n  public getSettings({\r\n    icon,\r\n    mask,\r\n    type,\r\n  }: IInputSettingsFormData): IInputSettings {\r\n    return {\r\n      mask,\r\n      onBlur: (value) => {\r\n        console.log('ON BLUR ' + value);\r\n      },\r\n      onEnter: (value) => {\r\n        console.log('ON ENTER ' + value);\r\n      },\r\n      icon: icon?.name,\r\n      iconAction: (value) => {\r\n        console.log('ICON ACTION ' + value);\r\n      },\r\n      type,\r\n    };\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "mask",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputmaskOptions<any>",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ILabelField",
            "id": "interface-ILabelField-0f8517f303ea06a01816d419ec609fad60beb7712192126b340ee7ff3753c73cadf059cd97239cfc5fe71d25d583b94135c8744af748ac494d670c80be516e51",
            "file": "projects/special-forms/src/lib/components/special-label/special-label.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EControlTypes } from '../../core/aux-data/control-types.enum';\r\nimport { IFieldData } from '../../core/interfaces/field-basics.interfaces';\r\n\r\nexport type ILabelSettings = {\r\n  pipe?: (value) => string;\r\n  stylesPipe?: (value) => string;\r\n  isLink: boolean;\r\n  onClickLink?: (value) => void;\r\n};\r\n\r\nexport interface ILabelField extends IFieldData {\r\n  settings: ILabelSettings;\r\n  type: EControlTypes.label;\r\n}\r\n",
            "properties": [
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILabelSettings",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EControlTypes.label",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IFieldData"
        },
        {
            "name": "IMultipleAutocompleteField",
            "id": "interface-IMultipleAutocompleteField-027b37675077aa8fe63e4f4beda4ef0cbf7edc5cc7b1e53b934e1ecff0073ed5af9bca2015de52a3aea3f524dcacaea5745fdabc187deab3495955ac0ba7239d",
            "file": "projects/special-forms/src/lib/components/special-multiple-autocomplete/special-multiple-autocomplete.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AbstractControl } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { EControlTypes } from '../../core/aux-data/control-types.enum';\r\nimport { IFieldData } from '../../core/interfaces/field-basics.interfaces';\r\n\r\nexport type IMultipleAutocompleteSettings = {\r\n  getData: (query: string, control?: AbstractControl) => void;\r\n  source: Observable<any[]>;\r\n  fieldId: string;\r\n  icon?: string;\r\n  iconAction?: (data: any) => void;\r\n  onSelect?: (data: any) => void;\r\n  fieldName: string | ((a?: any) => string);\r\n  fieldImage?: string | ((a?: any) => string);\r\n};\r\n\r\nexport interface IMultipleAutocompleteField extends IFieldData {\r\n  settings: IMultipleAutocompleteSettings;\r\n  type: EControlTypes.multiple;\r\n}\r\n",
            "properties": [
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMultipleAutocompleteSettings",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EControlTypes.multiple",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IFieldData"
        },
        {
            "name": "ITextAreaField",
            "id": "interface-ITextAreaField-442109e51b57603d7e6fc4976d025d3777611dcb4d3a9db5eba36c412c69375e3fae7af9c702b5b951c46dcf0ffb6207a0d76d6c47e5ffb7f1789615122b933b",
            "file": "projects/special-forms/src/lib/components/special-text-area/special-text-area.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EControlTypes } from '../../core/aux-data/control-types.enum';\r\nimport { IFieldData } from '../../core/interfaces/field-basics.interfaces';\r\n\r\nexport type ITextAreaSettings = {};\r\n\r\nexport interface ITextAreaField extends IFieldData {\r\n  settings: ITextAreaSettings;\r\n  type: EControlTypes.textArea;\r\n}\r\n",
            "properties": [
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITextAreaSettings",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EControlTypes.textArea",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IFieldData"
        },
        {
            "name": "IUploadField",
            "id": "interface-IUploadField-84df35fb42bc86d3d1a097c34e5f1855d3e35f4d65b2030e6c8ccf1866a5d87e6476b96ee210e96d44b1517cdac2c1e1ad9473a5ecb7c72ebe7818a71e47a9ed",
            "file": "projects/special-forms/src/lib/components/special-upload/special-upload.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EControlTypes } from '../../core/aux-data/control-types.enum';\r\nimport { IFieldData } from '../../core/interfaces/field-basics.interfaces';\r\n\r\nexport type IUploadSettings = {\r\n  accept?: string,\r\n  multiple?: boolean\r\n};\r\n\r\nexport interface IUploadField extends IFieldData {\r\n  settings: IUploadSettings;\r\n  type: EControlTypes.file;\r\n}\r\n",
            "properties": [
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUploadSettings",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EControlTypes.file",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IFieldData"
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "SpecialFormBuilderService",
            "id": "injectable-SpecialFormBuilderService-32b67ad7e2c96818bdee3813e3bf2921df3b741e79e91f189c46f1673c1df121e11f1d578e6527d86ea798f9be06e707c2125ba10e05161fb5ecf99e5e57dc94",
            "file": "projects/special-forms/src/lib/core/services/special-form-builder/special-form-builder.service.ts",
            "properties": [
                {
                    "name": "arrayDefectField",
                    "defaultValue": "{\n    ...this.defectField,\n    settings: {\n      formFields: {},\n    },\n    type: EControlTypes.array,\n    name: '',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TSpecialArray",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "defectField",
                    "defaultValue": "{\n    asyncValidators: null,\n    validators: null,\n    defaultValue: null,\n    elementId: '',\n    hidden: false,\n    icon: '',\n    label: '',\n    disabled: false,\n    length: 0,\n    placeholder: '',\n    readOnly: false,\n    required: false,\n    styleClasses: '',\n    errorMessages: {},\n    tooltip: '',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFieldData",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "formDefectField",
                    "defaultValue": "{\n    ...this.defectField,\n    settings: {\n      formFields: {},\n    },\n    type: EControlTypes.form,\n    name: '',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TSpecialForm",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "inputDefectField",
                    "defaultValue": "{\n    ...this.defectField,\n    settings: {},\n    type: EControlTypes.input,\n    name: '',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TSpecialInput",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "array",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "arrayLengthRequired",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ noItems?: undefined; } | { noItems: string; }",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "control",
                    "args": [
                        {
                            "name": "field",
                            "type": "Partial<TSpecialFields>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SpecialFormControl<any>",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "Partial<TSpecialFields>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fieldDataToArray",
                    "args": [
                        {
                            "name": "fields",
                            "type": "IFormStructure",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TSpecialFields[]",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "IFormStructure",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formGenerator",
                    "args": [
                        {
                            "name": "fields",
                            "type": "TSpecialFields[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parentField",
                            "type": "Partial<TSpecialForm>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isChild",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "SpecialFormGroup",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "TSpecialFields[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentField",
                            "type": "Partial<TSpecialForm>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isChild",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "group",
                    "args": [
                        {
                            "name": "fields",
                            "type": "IFormStructure",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SpecialFormGroup",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "IFormStructure",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDefectFieldOptions",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "field",
                            "type": "Partial<TRawFields>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TSpecialFields",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field",
                            "type": "Partial<TRawFields>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFormArray",
                    "args": [
                        {
                            "name": "field",
                            "type": "TSpecialArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "TSpecialArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFormControl",
                    "args": [
                        {
                            "name": "field",
                            "type": "TSpecialFields",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "TSpecialFields",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFormGroup",
                    "args": [
                        {
                            "name": "field",
                            "type": "TSpecialForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "TSpecialForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setRequiredValidator",
                    "args": [
                        {
                            "name": "field",
                            "type": "TSpecialFields",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "TSpecialFields",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setValidatorsArray",
                    "args": [
                        {
                            "name": "validators",
                            "type": "ValidatorFn | ValidatorFn[] | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newValidators",
                            "type": "ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "validators",
                            "type": "ValidatorFn | ValidatorFn[] | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newValidators",
                            "type": "ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AbstractControl, ValidatorFn, Validators } from '@angular/forms';\nimport { IAutocompleteSettings } from '../../../components/special-autocomplete/special-autocomplete.interface';\nimport { EControlTypes } from '../../aux-data/control-types.enum';\nimport {\n  SpecialFormArray,\n  SpecialFormControl,\n  SpecialFormGroup,\n} from '../../forms/special-forms';\nimport { IFieldData } from '../../interfaces/field-basics.interfaces';\nimport {\n  IFormStructure,\n  TRawFields,\n  TSpecialArray,\n  TSpecialFields,\n  TSpecialForm,\n  TSpecialInput,\n} from '../../interfaces/form.interfaces';\n\ninterface IControlParams {\n  name: string;\n  control: SpecialFormArray | SpecialFormGroup | SpecialFormControl<any>;\n}\n@Injectable({\n  providedIn: 'root',\n})\nexport class SpecialFormBuilderService {\n  private readonly defectField: IFieldData = {\n    asyncValidators: null,\n    validators: null,\n    defaultValue: null,\n    elementId: '',\n    hidden: false,\n    icon: '',\n    label: '',\n    disabled: false,\n    length: 0,\n    placeholder: '',\n    readOnly: false,\n    required: false,\n    styleClasses: '',\n    errorMessages: {},\n    tooltip: '',\n  };\n\n  private readonly inputDefectField: TSpecialInput = {\n    ...this.defectField,\n    settings: {},\n    type: EControlTypes.input,\n    name: '',\n  };\n\n  private readonly formDefectField: TSpecialForm = {\n    ...this.defectField,\n    settings: {\n      formFields: {},\n    },\n    type: EControlTypes.form,\n    name: '',\n  };\n\n  private readonly arrayDefectField: TSpecialArray = {\n    ...this.defectField,\n    settings: {\n      formFields: {},\n    },\n    type: EControlTypes.array,\n    name: '',\n  };\n\n  constructor() {}\n\n  public control(field: Partial<TSpecialFields>): SpecialFormControl<any> {\n    const formField: TSpecialFields = {\n      ...this.inputDefectField,\n      ...field,\n    } as TSpecialFields;\n    const { control } = this.setFormControl(formField);\n    return control;\n  }\n\n  public group(fields: IFormStructure) {\n    return this.formGenerator(this.fieldDataToArray(fields), {});\n  }\n\n  public array() {}\n\n  public fieldDataToArray(fields: IFormStructure): TSpecialFields[] {\n    return Object.entries(fields).map(([name, field]) =>\n      this.setDefectFieldOptions(name, field)\n    );\n  }\n\n  private setDefectFieldOptions(\n    name: string,\n    field: Partial<TRawFields>\n  ): TSpecialFields {\n    return {\n      ...this.inputDefectField,\n      ...field,\n      name,\n    } as TSpecialFields;\n  }\n\n  private formGenerator(\n    fields: TSpecialFields[],\n    parentField: Partial<TSpecialForm>,\n    isChild = false\n  ): SpecialFormGroup {\n    const formField: TSpecialForm = {\n      ...this.formDefectField,\n      ...parentField,\n    };\n    const structure = fields\n      .map((field) => {\n        switch (field.type) {\n          case EControlTypes.array:\n            return this.setFormArray(field);\n          case EControlTypes.form:\n            return this.setFormGroup(field);\n          default:\n            return this.setFormControl(field);\n        }\n      })\n      .reduce(\n        (prev, { name, control }: IControlParams) => ({\n          ...prev,\n          [name]: control,\n        }),\n        {}\n      );\n    return new SpecialFormGroup(formField, structure, isChild);\n  }\n\n  private setFormGroup(field: TSpecialForm): {\n    name: string;\n    control: SpecialFormGroup;\n  } {\n    const control = this.formGenerator(\n      this.fieldDataToArray(field.settings.formFields),\n      field,\n      true\n    );\n    return { control, name: field.name };\n  }\n\n  private setFormArray(field: TSpecialArray): {\n    name: string;\n    control: SpecialFormArray;\n  } {\n    const auxForm = (value = {}) => {\n      const auxForm = this.formGenerator(\n        this.fieldDataToArray(field.settings.formFields),\n        {},\n        true\n      );\n      auxForm.reset(value);\n      return auxForm;\n    };\n\n    if (field.required) {\n      field.validators = this.setValidatorsArray(field.validators, [\n        this.arrayLengthRequired,\n      ]);\n    }\n\n    return {\n      name: field.name,\n      control: new SpecialFormArray(field, auxForm, []),\n    };\n  }\n\n  private setFormControl(field: TSpecialFields): {\n    name: string;\n    control: SpecialFormControl<any>;\n  } {\n    const validators: ValidatorFn[] = [];\n\n    if (field.required) validators.push(this.setRequiredValidator(field));\n    if (field.length) validators.push(Validators.maxLength(field.length));\n\n    field.validators = this.setValidatorsArray(field.validators, validators);\n\n    return {\n      name: field.name,\n      control: new SpecialFormControl(field),\n    };\n  }\n\n  private setRequiredValidator(field: TSpecialFields): ValidatorFn {\n    if (field.type !== EControlTypes.autocomplete) {\n      return Validators.required;\n    }\n\n    return (control: SpecialFormControl<IAutocompleteSettings>) =>\n      !!control.value && control.value instanceof Object\n        ? null\n        : { required: true };\n  }\n  private setValidatorsArray(\n    validators: ValidatorFn | ValidatorFn[] | null,\n    newValidators: ValidatorFn[]\n  ): ValidatorFn[] {\n    if (!validators) {\n      return newValidators;\n    }\n    return validators instanceof Array\n      ? [...validators, ...newValidators]\n      : [validators, ...newValidators];\n  }\n\n  private arrayLengthRequired(control: AbstractControl) {\n    if (control.value.length) {\n      return {};\n    }\n    return { noItems: 'NO_SELECTED_ITEM' };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 69
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "AutocompleteFormClass",
            "id": "class-AutocompleteFormClass-24b747319def1af323d938afb8046802535004ed13f4e1438c996d0baf3547c10febc17b5927f32e67c01568ea24a3c9155b78c33a96b54723005b8891fc6374",
            "file": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/autocomplete.form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IAutocompleteSettings } from '@lib/components/special-autocomplete/special-autocomplete.interface';\r\nimport { EControlTypes } from '@lib/core/aux-data/control-types.enum';\r\nimport { IFormStructure } from '@lib/core/interfaces/form.interfaces';\r\nimport { Subject } from 'rxjs';\r\nimport { CommonFormClass } from './common.form';\r\nimport { CommonFormCreator } from './common.form.interface';\r\n\r\ninterface IAutocompleteSettingsFormData {\r\n  source: { id: string; name: string; image?: string }[];\r\n  icon: { name: string };\r\n}\r\nexport class AutocompleteFormClass\r\n  extends CommonFormClass\r\n  implements CommonFormCreator\r\n{\r\n  public settingsFields(): IFormStructure {\r\n    return {\r\n      source: {\r\n        label: 'Data del campo',\r\n        styleClasses: 'px-2 box-border md:w-2/4',\r\n        type: EControlTypes.array,\r\n        settings: {\r\n          withActionButtons: true,\r\n          withFormHeader: true,\r\n          formFields: {\r\n            id: {\r\n              type: EControlTypes.input,\r\n              label: 'id',\r\n              styleClasses: 'col-span-12 md:col-span-4',\r\n              required: true,\r\n            },\r\n            name: {\r\n              type: EControlTypes.input,\r\n              label: 'Nombre',\r\n              styleClasses: 'col-span-12 md:col-span-4',\r\n              required: true,\r\n            },\r\n            image: {\r\n              type: EControlTypes.input,\r\n              label: 'Imagen',\r\n              styleClasses: 'col-span-12 md:col-span-4',\r\n            },\r\n          },\r\n        },\r\n      },\r\n      fieldId: {\r\n        type: EControlTypes.default,\r\n        defaultValue: 'id',\r\n      },\r\n      fieldName: {\r\n        type: EControlTypes.default,\r\n        defaultValue: 'name',\r\n      },\r\n      fieldImage: {\r\n        type: EControlTypes.default,\r\n        defaultValue: 'image',\r\n      },\r\n      icon: this.iconField('Icono derecho'),\r\n    };\r\n  }\r\n  public getSettings({\r\n    icon,\r\n    source,\r\n  }: IAutocompleteSettingsFormData): IAutocompleteSettings {\r\n    const source$ = new Subject<any[]>();\r\n\r\n    return {\r\n      source: source$.asObservable(),\r\n      getData: (query) => {\r\n        const filteredData = source\r\n          .filter((item) => item.name.includes(query))\r\n          .slice(0, 10);\r\n\r\n        source$.next(filteredData);\r\n      },\r\n      fieldId: 'id',\r\n      fieldName: 'name',\r\n      icon: icon?.name,\r\n      iconAction: (value) => {\r\n        console.log('ICON ACTION ' + value);\r\n      },\r\n      onSelect: (value) => {\r\n        console.log('ICON ACTION ' + value);\r\n      },\r\n    };\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getSettings",
                    "args": [
                        {
                            "type": "IAutocompleteSettingsFormData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IAutocompleteSettings",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "IAutocompleteSettingsFormData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "settingsFields",
                    "args": [],
                    "optional": false,
                    "returnType": "IFormStructure",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "iconField",
                    "args": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Partial<TRawFields>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CommonFormClass"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "CommonFormClass",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "CommonFormCreator"
            ]
        },
        {
            "name": "CheckboxFormClass",
            "id": "class-CheckboxFormClass-213bdb9ff1155debbbecb9d0bd6ec55729a3a8a3b9d8121072828430fa46f797a82740880e020bbef607e4d9b2364551ce04b7ce31b665ce878604f74ce2ac95",
            "file": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/checkbox.form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ICheckboxSettings } from \"@lib/components/special-checkbox/special-checkbox.interface\";\r\nimport { EControlTypes } from \"@lib/core/aux-data/control-types.enum\";\r\nimport { IFormStructure } from \"@lib/core/interfaces/form.interfaces\";\r\nimport { of } from \"rxjs\";\r\nimport { CommonFormClass } from \"./common.form\";\r\nimport { CommonFormCreator } from \"./common.form.interface\";\r\n\r\ninterface ICheckboxSettingsFormData {\r\n  labelPosition?: 'before' | 'after';\r\n  indeterminate?: boolean;\r\n}\r\nexport class CheckboxFormClass\r\n  extends CommonFormClass\r\n  implements CommonFormCreator\r\n{\r\n  public settingsFields(): IFormStructure {\r\n    return {\r\n      labelPosition: {\r\n        label: 'Data del campo',\r\n        styleClasses: 'px-2 box-border md:w-2/4',\r\n        type: EControlTypes.dropdown,\r\n        settings: {\r\n          source: of([\r\n            {\r\n              name: 'before',\r\n            },\r\n            {\r\n              name: 'after',\r\n            },\r\n          ]),\r\n          fieldId: 'name',\r\n          fieldName: 'name',\r\n        },\r\n      },\r\n      indeterminate: {\r\n        label: 'Ideterminado',\r\n        type: EControlTypes.checkbox,\r\n      },\r\n    };\r\n  }\r\n\r\n  public getSettings({\r\n    indeterminate,\r\n    labelPosition,\r\n  }: ICheckboxSettingsFormData): ICheckboxSettings {\r\n    return {\r\n      indeterminate,\r\n      labelPosition,\r\n    };\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getSettings",
                    "args": [
                        {
                            "type": "ICheckboxSettingsFormData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ICheckboxSettings",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "ICheckboxSettingsFormData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "settingsFields",
                    "args": [],
                    "optional": false,
                    "returnType": "IFormStructure",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "iconField",
                    "args": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Partial<TRawFields>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CommonFormClass"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "CommonFormClass",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "CommonFormCreator"
            ]
        },
        {
            "name": "CommonFormClass",
            "id": "class-CommonFormClass-813caf1b05924f8fd64dbccd35170199f6aeb2e763628ea48a5686eb757a89c5c2213ae2c1aade1400c379aaad3a422f1b11a8290e3f92c548b64fb5de1d0169",
            "file": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/common.form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ICON_NAMES } from '@lib/core/aux-data/all-icons';\r\nimport { EControlTypes } from '@lib/core/aux-data/control-types.enum';\r\nimport { TRawFields } from '@lib/core/interfaces/form.interfaces';\r\nimport { Subject } from 'rxjs';\r\n\r\nexport class CommonFormClass {\r\n  protected iconField(label:string): Partial<TRawFields> {\r\n    const iconSUb = new Subject<any[]>();\r\n    return {\r\n      placeholder: 'Buscar',\r\n      label,\r\n      tooltip: 'Selecciona una opción',\r\n      styleClasses: 'px-2 box-border md:w-1/4',\r\n      icon: 'format_italic',\r\n      type: EControlTypes.autocomplete,\r\n      settings: {\r\n        fieldId: 'name',\r\n        fieldName: 'name',\r\n        source: iconSUb.asObservable(),\r\n        getData: (query) => {\r\n          const filteredIcons = ICON_NAMES.filter((icon) =>\r\n            icon.includes(query)\r\n          )\r\n            .slice(0, 10)\r\n            .map((icon) => ({ name: icon }));\r\n          iconSUb.next(filteredIcons);\r\n        },\r\n      },\r\n    };\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "iconField",
                    "args": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Partial<TRawFields>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DatePickerFormClass",
            "id": "class-DatePickerFormClass-7dffc6151e0df71fb9feda5787f0735e49a1994b38fecc074f8fb5f0798a46bd3808009d40daa362189a5fcae6835b95268d1fe9353721392990407c5dd4ef03",
            "file": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/datepicker.form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IDatePickerSettings } from '@lib/components/special-datepicker/special-datepicker.interface';\r\nimport { EControlTypes } from '@lib/core/aux-data/control-types.enum';\r\nimport { IFormStructure } from '@lib/core/interfaces/form.interfaces';\r\nimport { numberMask } from '@lib/core/masks/number.mask';\r\nimport { CommonFormClass } from './common.form';\r\nimport { CommonFormCreator } from './common.form.interface';\r\n\r\ninterface IDatePickerSettingsFormData {\r\n  lowerLimit: number;\r\n  upperLimit: number;\r\n  startAt: Date;\r\n}\r\nexport class DatePickerFormClass\r\n  extends CommonFormClass\r\n  implements CommonFormCreator\r\n{\r\n  public settingsFields(): IFormStructure {\r\n    return {\r\n      lowerLimit: {\r\n        label: 'Límite inferior',\r\n        styleClasses: 'px-2 box-border md:w-2/4',\r\n        type: EControlTypes.input,\r\n        settings: {\r\n          mask: numberMask(10000000000000),\r\n        },\r\n      },\r\n      upperLimit: {\r\n        label: 'Límite superior',\r\n        styleClasses: 'px-2 box-border md:w-2/4',\r\n        type: EControlTypes.input,\r\n        settings: {\r\n          mask: numberMask(10000000000000),\r\n        },\r\n      },\r\n      startAt: {\r\n        label: 'Empezar en',\r\n        styleClasses: 'px-2 box-border md:w-2/4',\r\n        type: EControlTypes.dropdown,\r\n      },\r\n      icon: this.iconField('Icono derecho'),\r\n    };\r\n  }\r\n\r\n  public getSettings({\r\n    lowerLimit,\r\n    startAt,\r\n    upperLimit,\r\n  }: IDatePickerSettingsFormData): IDatePickerSettings {\r\n    return {\r\n      lowerLimit,\r\n      startAt,\r\n      upperLimit,\r\n    };\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getSettings",
                    "args": [
                        {
                            "type": "IDatePickerSettingsFormData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IDatePickerSettings",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "IDatePickerSettingsFormData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "settingsFields",
                    "args": [],
                    "optional": false,
                    "returnType": "IFormStructure",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "iconField",
                    "args": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Partial<TRawFields>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CommonFormClass"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "CommonFormClass",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "CommonFormCreator"
            ]
        },
        {
            "name": "DropDownFormClass",
            "id": "class-DropDownFormClass-187e1ea7f224b2958c9594f2d0b5ca4dd283d68874e20eb8b7f0f21535d92daebf0aec94ba992aaf795ab2554af0d427903b9820477d68394889fe4aad78e38c",
            "file": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/dropdown.form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IDropdownSettings } from '@lib/components/special-dropdown/special-dropdown.interface';\r\nimport { EControlTypes } from '@lib/core/aux-data/control-types.enum';\r\nimport { IFormStructure } from '@lib/core/interfaces/form.interfaces';\r\nimport { of } from 'rxjs';\r\n\r\nimport { CommonFormClass } from './common.form';\r\nimport { CommonFormCreator } from './common.form.interface';\r\n\r\ninterface IDropdownSettingsFormData {\r\n  source: { id: string; name: string }[];\r\n  notSelectedText: string;\r\n  icon: { name: string };\r\n}\r\nexport class DropDownFormClass\r\n  extends CommonFormClass\r\n  implements CommonFormCreator\r\n{\r\n  public settingsFields(): IFormStructure {\r\n    return {\r\n      source: {\r\n        label: 'Data del campo',\r\n        styleClasses: 'px-2 box-border md:w-2/4',\r\n        type: EControlTypes.array,\r\n        settings: {\r\n          withActionButtons: true,\r\n          withFormHeader: true,\r\n          formFields: {\r\n            id: {\r\n              type: EControlTypes.input,\r\n              label: 'Id',\r\n              styleClasses: 'col-span-12 md:col-span-6',\r\n              required: true,\r\n            },\r\n            name: {\r\n              type: EControlTypes.input,\r\n              label: 'Nombre',\r\n              styleClasses: 'col-span-12 md:col-span-6',\r\n              required: true,\r\n            },\r\n          },\r\n        },\r\n      },\r\n      fieldId: {\r\n        type: EControlTypes.default,\r\n        defaultValue: 'id',\r\n      },\r\n      fieldName: {\r\n        type: EControlTypes.default,\r\n        defaultValue: 'name',\r\n      },\r\n      notSelectedText: {\r\n        placeholder: '',\r\n        label: 'Label de no seleccion',\r\n        styleClasses: 'px-2 box-border md:w-2/4',\r\n        type: EControlTypes.input,\r\n      },\r\n      icon: this.iconField('Icono derecho'),\r\n    };\r\n  }\r\n\r\n  public getSettings({\r\n    icon,\r\n    notSelectedText,\r\n    source,\r\n  }: IDropdownSettingsFormData): IDropdownSettings {\r\n    return {\r\n      source: of(source),\r\n      fieldId: 'id',\r\n      fieldName: 'name',\r\n      notSelectedText,\r\n      icon: icon?.name,\r\n      iconAction: (value) => {\r\n        console.log('ICON ACTION ' + value);\r\n      },\r\n      onSelect: (value) => {\r\n        console.log('ICON ACTION ' + value);\r\n      },\r\n    };\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getSettings",
                    "args": [
                        {
                            "type": "IDropdownSettingsFormData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IDropdownSettings",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "IDropdownSettingsFormData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "settingsFields",
                    "args": [],
                    "optional": false,
                    "returnType": "IFormStructure",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "iconField",
                    "args": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Partial<TRawFields>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CommonFormClass"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "CommonFormClass",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "CommonFormCreator"
            ]
        },
        {
            "name": "FieldFormClass",
            "id": "class-FieldFormClass-97d00b9b330c6e853be86a539d409d09f8cad699bf64719c4f86966221ed16f3652c8ffc1d5cd8b3c0633f449767cf3891905f67db4e22c36afb2855f792b3fd",
            "file": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/field.form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IInputSettings } from '@lib/components/special-input/special-input.interface';\r\nimport { InputTypes } from '@lib/components/special-input/special-input.stories';\r\nimport { EControlTypes } from '@lib/core/aux-data/control-types.enum';\r\nimport {\r\n  IFormStructure,\r\n  TSpecialFields,\r\n} from '@lib/core/interfaces/form.interfaces';\r\nimport { Masks } from '@lib/core/masks/maks.enum';\r\nimport { numberMask } from '@lib/core/masks/number.mask';\r\nimport { EnumToArray } from '@lib/core/utils/enum-to-array.util';\r\nimport { InputmaskOptions } from '@ngneat/input-mask';\r\nimport { of } from 'rxjs';\r\nimport { CommonFormClass } from './common.form';\r\nimport { AllControlSettings, CommonFormCreator } from './common.form.interface';\r\n\r\ninterface IFieldFormData {\r\n  type: any;\r\n  placeholder: string;\r\n  label: string;\r\n  name: string;\r\n  tooltip: string;\r\n  icon: { name: string };\r\n  length: number;\r\n  required: boolean;\r\n  readOnly: boolean;\r\n  hidden: boolean;\r\n  disabled: boolean;\r\n  errorMessages: { key: string; value: string }[];\r\n}\r\nexport class FieldFormClass extends CommonFormClass {\r\n  public fields(): IFormStructure {\r\n    return {\r\n      type: {\r\n        placeholder: 'Selecciona el tipo de control',\r\n        label: 'Tipo de control',\r\n        styleClasses: 'px-2 box-border md:w-1/4',\r\n        type: EControlTypes.dropdown,\r\n        settings: {\r\n          fieldId: 'value',\r\n          fieldName: 'value',\r\n          source: of(EnumToArray(EControlTypes)),\r\n        },\r\n      },\r\n      placeholder: {\r\n        placeholder: '',\r\n        label: 'Placeholder',\r\n        styleClasses: 'px-2 box-border md:w-1/4',\r\n        type: EControlTypes.input,\r\n        settings: {},\r\n      },\r\n      label: {\r\n        placeholder: '',\r\n        label: 'Etiqueta',\r\n        styleClasses: 'px-2 box-border md:w-1/4',\r\n        type: EControlTypes.input,\r\n        settings: {},\r\n      },\r\n      name: {\r\n        placeholder: '',\r\n        label: 'Nombre del campo',\r\n        styleClasses: 'px-2 box-border md:w-1/4',\r\n        type: EControlTypes.input,\r\n        settings: {},\r\n      },\r\n      tooltip: {\r\n        placeholder: '',\r\n        label: 'Mensaje de ayuda',\r\n        styleClasses: 'px-2 box-border md:w-1/4',\r\n        type: EControlTypes.input,\r\n        settings: {},\r\n      },\r\n      length: {\r\n        placeholder: '',\r\n        label: 'Largo permitido',\r\n        styleClasses: 'px-2 box-border md:w-1/4',\r\n        type: EControlTypes.input,\r\n        settings: {\r\n          mask: numberMask(),\r\n        },\r\n      },\r\n      icon: this.iconField('Icono'),\r\n      required: {\r\n        label: 'Campo requerido',\r\n        styleClasses: 'px-2 box-border md:w-1/4',\r\n        type: EControlTypes.checkbox,\r\n        icon: 'task_alt',\r\n        defaultValue: false,\r\n        settings: {},\r\n      },\r\n      readOnly: {\r\n        label: 'Campo de solo lectura',\r\n        styleClasses: 'px-2 box-border md:w-1/4',\r\n        type: EControlTypes.checkbox,\r\n        icon: 'edit_off',\r\n        defaultValue: false,\r\n        settings: {},\r\n      },\r\n      hidden: {\r\n        label: 'Campo escondido',\r\n        icon: 'visibility_off',\r\n        styleClasses: 'px-2 box-border md:w-1/4',\r\n        type: EControlTypes.checkbox,\r\n        defaultValue: false,\r\n        settings: {},\r\n      },\r\n      disabled: {\r\n        label: 'Campo desactivado',\r\n        styleClasses: 'px-2 box-border md:w-1/4',\r\n        type: EControlTypes.checkbox,\r\n        icon: 'block',\r\n        defaultValue: false,\r\n        settings: {},\r\n      },\r\n      errorMessages: {\r\n        type: EControlTypes.array,\r\n        label: 'Mensajes de error',\r\n        settings: {\r\n          withFormHeader: true,\r\n          withActionButtons: true,\r\n          formFields: {\r\n            key: {\r\n              type: EControlTypes.input,\r\n              label: 'Key',\r\n              styleClasses: 'col-span-12 md:col-span-6',\r\n              required: true,\r\n            },\r\n            value: {\r\n              type: EControlTypes.input,\r\n              label: 'value',\r\n              styleClasses: 'col-span-12 md:col-span-6',\r\n              required: true,\r\n            },\r\n          },\r\n        },\r\n      },\r\n    };\r\n  }\r\n\r\n  public getField(\r\n    {\r\n      disabled,\r\n      errorMessages,\r\n      hidden,\r\n      icon,\r\n      label,\r\n      length,\r\n      name,\r\n      placeholder,\r\n      readOnly,\r\n      required,\r\n      tooltip,\r\n      type,\r\n    }: IFieldFormData,\r\n    settings: AllControlSettings\r\n  ): IFormStructure {\r\n    return {\r\n      [name || 'default']: {\r\n        type,\r\n        settings,\r\n        disabled,\r\n        hidden,\r\n        icon: icon?.name,\r\n        label,\r\n        length,\r\n        placeholder,\r\n        readOnly,\r\n        required,\r\n        tooltip,\r\n        errorMessages: errorMessages.reduce(\r\n          (prev, curr) => ({ ...prev, [curr.key]: curr.value }),\r\n          {}\r\n        ),\r\n      },\r\n    };\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "fields",
                    "args": [],
                    "optional": false,
                    "returnType": "IFormStructure",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getField",
                    "args": [
                        {
                            "type": "IFieldFormData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "settings",
                            "type": "AllControlSettings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IFormStructure",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "IFieldFormData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "settings",
                            "type": "AllControlSettings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "iconField",
                    "args": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Partial<TRawFields>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CommonFormClass"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "CommonFormClass",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "InputFormClass",
            "id": "class-InputFormClass-42a95c8e88a6cadaf6ab2bb097ef791fb65649721db067864a8b16bc22d6a2b2f1e82b38a5b0f497dfb36e38e473adbb2b6d5fbedaad287c9bf825f161df44fb",
            "file": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/input.form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IInputSettings } from '@lib/components/special-input/special-input.interface';\r\nimport { InputTypes } from '@lib/components/special-input/special-input.stories';\r\nimport { EControlTypes } from '@lib/core/aux-data/control-types.enum';\r\nimport { IFormStructure } from '@lib/core/interfaces/form.interfaces';\r\nimport { Masks } from '@lib/core/masks/maks.enum';\r\nimport { InputmaskOptions } from '@ngneat/input-mask';\r\nimport { of } from 'rxjs';\r\nimport { CommonFormClass } from './common.form';\r\nimport { CommonFormCreator } from './common.form.interface';\r\n\r\ninterface IInputSettingsFormData {\r\n  type: string;\r\n  mask: InputmaskOptions<any>;\r\n  icon: { name: string };\r\n}\r\nexport class InputFormClass\r\n  extends CommonFormClass\r\n  implements CommonFormCreator\r\n{\r\n  public settingsFields(): IFormStructure {\r\n    return {\r\n      type: {\r\n        placeholder: 'Tipo de control',\r\n        label: 'Tipo de control',\r\n        styleClasses: 'px-2 box-border md:w-2/4',\r\n        type: EControlTypes.dropdown,\r\n        settings: {\r\n          fieldId: 'value',\r\n          fieldName: 'value',\r\n          source: of(InputTypes.map((type) => ({ value: type }))),\r\n        },\r\n      },\r\n      mask: {\r\n        placeholder: 'Máscara',\r\n        label: 'Tipo de máscara',\r\n        styleClasses: 'px-2 box-border md:w-2/4',\r\n        type: EControlTypes.dropdown,\r\n        settings: {\r\n          fieldId: 'value',\r\n          fieldName: 'key',\r\n          notSelectedText: 'Sin máscara',\r\n          source: of(\r\n            Object.entries(Masks).map(([key, value]) => ({ key, value }))\r\n          ),\r\n        },\r\n      },\r\n      icon: this.iconField('Icono derecho'),\r\n    };\r\n  }\r\n\r\n  public getSettings({\r\n    icon,\r\n    mask,\r\n    type,\r\n  }: IInputSettingsFormData): IInputSettings {\r\n    return {\r\n      mask,\r\n      onBlur: (value) => {\r\n        console.log('ON BLUR ' + value);\r\n      },\r\n      onEnter: (value) => {\r\n        console.log('ON ENTER ' + value);\r\n      },\r\n      icon: icon?.name,\r\n      iconAction: (value) => {\r\n        console.log('ICON ACTION ' + value);\r\n      },\r\n      type,\r\n    };\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getSettings",
                    "args": [
                        {
                            "type": "IInputSettingsFormData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IInputSettings",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "IInputSettingsFormData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "settingsFields",
                    "args": [],
                    "optional": false,
                    "returnType": "IFormStructure",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "iconField",
                    "args": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Partial<TRawFields>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CommonFormClass"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "CommonFormClass",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "CommonFormCreator"
            ]
        },
        {
            "name": "ISpecialControl",
            "id": "class-ISpecialControl-cfdb313d34447888f624572542ca6e9fbf705e8286178ffe59f4f333fd8b08d25d6c388bde75bce06b3c6f62bee9092a31d7818ebe1b577045bbf3d6b8fd602e",
            "file": "projects/special-forms/src/lib/core/interfaces/special-control.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\r\n  SpecialFormControl,\r\n  SpecialFormArray,\r\n  SpecialFormGroup,\r\n} from '../forms/special-forms';\r\n\r\nexport abstract class ISpecialControl {\r\n  control: SpecialFormControl<any> | SpecialFormArray | SpecialFormGroup;\r\n}\r\n",
            "properties": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpecialFormControl<any> | SpecialFormArray | SpecialFormGroup",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SpecialFormArray",
            "id": "class-SpecialFormArray-a25821e023d8ca8d2940a28f6c83745d512bd1d77376a1634c6b136acee076c7b4f7547b4f38b9870e11aaf277896619bbf4f604bd1071c483e277e155f2207a",
            "file": "projects/special-forms/src/lib/core/forms/special-forms.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\r\n  AbstractControl,\r\n  FormArray,\r\n  FormControl,\r\n  FormGroup,\r\n} from '@angular/forms';\r\nimport { EControlTypes } from '../aux-data/control-types.enum';\r\nimport { IFieldBasicData } from '../interfaces/field-basics.interfaces';\r\nimport {\r\n  IArraySettings,\r\n  IFormSettings,\r\n  TSpecialFields,\r\n  TSpecialForm,\r\n  TSpecialArray,\r\n} from '../interfaces/form.interfaces';\r\nexport class SpecialFormControl<T>\r\n  extends FormControl\r\n  implements IFieldBasicData\r\n{\r\n  public name: string;\r\n  public placeholder: string;\r\n  public label: string;\r\n  public tooltip: string;\r\n  public icon: string;\r\n  public elementId: string;\r\n  public styleClasses: string;\r\n  public length: number;\r\n  public required: boolean;\r\n  public hidden: boolean;\r\n  public readOnly: boolean;\r\n  public settings: T;\r\n  public type: EControlTypes;\r\n  public errorMessages: { [key: string]: string };\r\n\r\n  constructor({\r\n    name,\r\n    settings,\r\n    type,\r\n    validators,\r\n    asyncValidators,\r\n    elementId,\r\n    styleClasses,\r\n    defaultValue,\r\n    hidden,\r\n    icon,\r\n    label,\r\n    length,\r\n    placeholder,\r\n    readOnly,\r\n    required,\r\n    tooltip,\r\n    errorMessages,\r\n    disabled,\r\n  }: TSpecialFields) {\r\n    super(defaultValue, validators, asyncValidators);\r\n\r\n    this.name = name;\r\n    this.placeholder = placeholder;\r\n    this.label = label;\r\n    this.tooltip = tooltip;\r\n    this.icon = icon;\r\n    this.elementId = elementId;\r\n    this.settings = settings as T;\r\n    this.type = type;\r\n    this.styleClasses = styleClasses;\r\n    this.hidden = hidden;\r\n    this.length = length;\r\n    this.readOnly = readOnly;\r\n    this.required = required;\r\n    this.errorMessages = errorMessages;\r\n    disabled ? this.disable() : this.enable();\r\n  }\r\n\r\n  setReadOnly(status: boolean = true) {\r\n    this.readOnly = status;\r\n  }\r\n\r\n  setDisabled(status: boolean = true) {\r\n    status ? this.disable() : this.enable();\r\n  }\r\n\r\n  setHidden(status = true) {\r\n    this.hidden = status;\r\n  }\r\n}\r\nexport class SpecialFormGroup extends FormGroup implements IFieldBasicData {\r\n  public name: string;\r\n  public placeholder: string;\r\n  public label: string;\r\n  public tooltip: string;\r\n  public icon: string;\r\n  public elementId: string;\r\n  public styleClasses: string;\r\n  public length: number;\r\n  public required: boolean;\r\n  public hidden: boolean;\r\n  public readOnly: boolean;\r\n  public settings: IFormSettings;\r\n  public type: EControlTypes.form;\r\n  public defaultValue: any;\r\n  public errorMessages: { [key: string]: string };\r\n  public isChild: boolean;\r\n\r\n  constructor(\r\n    {\r\n      name,\r\n      settings,\r\n      type,\r\n      validators,\r\n      asyncValidators,\r\n      elementId,\r\n      styleClasses,\r\n      defaultValue,\r\n      hidden,\r\n      icon,\r\n      label,\r\n      length,\r\n      placeholder,\r\n      readOnly,\r\n      required,\r\n      tooltip,\r\n      disabled,\r\n    }: TSpecialForm,\r\n    controls: {\r\n      [key: string]: SpecialFormControl<any>;\r\n    },\r\n    isChild\r\n  ) {\r\n    super(controls, validators, asyncValidators);\r\n\r\n    this.name = name;\r\n    this.placeholder = placeholder;\r\n    this.label = label;\r\n    this.tooltip = tooltip;\r\n    this.icon = icon;\r\n    this.elementId = elementId;\r\n    this.settings = settings;\r\n    this.type = type;\r\n    this.styleClasses = styleClasses;\r\n    this.hidden = hidden;\r\n    this.length = length;\r\n    this.readOnly = readOnly;\r\n    this.required = required;\r\n    this.defaultValue = defaultValue;\r\n\r\n    this.isChild = isChild;\r\n    disabled ? this.disable() : this.enable();\r\n  }\r\n\r\n  unpristineRequired() {\r\n    Object.values(this.controls).forEach((control) => {\r\n      if (control instanceof SpecialFormControl) {\r\n        control.markAsDirty();\r\n      } else if (control instanceof SpecialFormGroup) {\r\n        control.unpristineRequired();\r\n      } else if (control instanceof SpecialFormArray) {\r\n        control.unpristineRequired();\r\n      }\r\n    });\r\n  }\r\n\r\n  specialReset(value = {}) {\r\n    const aux: any = {};\r\n    Object.entries(this.controls).map(([key, control]) => {\r\n      if (control instanceof SpecialFormControl) {\r\n        aux[key] = control.defaultValue;\r\n      } else if (control instanceof SpecialFormArray) {\r\n        control.clear();\r\n      }\r\n    });\r\n\r\n    this.reset({ ...aux, ...value });\r\n  }\r\n  setReadOnly(status: boolean = true) {\r\n    Object.values(this.controls).map((value) => {\r\n      if (\r\n        value instanceof SpecialFormControl ||\r\n        value instanceof SpecialFormArray ||\r\n        value instanceof SpecialFormGroup\r\n      ) {\r\n        value.setReadOnly(status);\r\n      }\r\n    });\r\n  }\r\n  setReadOnlyByFields(fieldsObject: { [key: string]: boolean }) {\r\n    Object.entries(fieldsObject).map(([key, value]) => {\r\n      const control = this.controls[key];\r\n      if (control instanceof SpecialFormControl) {\r\n        control.readOnly = value;\r\n      }\r\n    });\r\n  }\r\n\r\n  setHiddenByFields(fields: { [key: string]: boolean }) {\r\n    Object.entries(fields).map(([key, value]) => {\r\n      const control = this.controls[key];\r\n      if (control instanceof SpecialFormControl) {\r\n        control.hidden = value;\r\n      }\r\n    });\r\n  }\r\n  setDisabled(status: boolean) {\r\n    Object.values(this.controls).map((value) => {\r\n      if (\r\n        value instanceof SpecialFormControl ||\r\n        value instanceof SpecialFormArray ||\r\n        value instanceof SpecialFormGroup\r\n      ) {\r\n        value.setDisabled(status);\r\n      }\r\n    });\r\n  }\r\n\r\n  setDisabledByFields(fieldsObject: any) {\r\n    Object.entries(fieldsObject).map((entries) => {\r\n      if (this.controls[entries[0]] instanceof SpecialFormControl) {\r\n        entries[1]\r\n          ? this.controls[entries[0]].enable()\r\n          : this.controls[entries[0]].disable();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * donde value es el objeto semilla y detailForm es un arreglo de form key para dar un marco al formarray\r\n   */\r\n\r\n  setFormValue(value: any) {\r\n    this.specialReset(value);\r\n    Object.entries(this.controls)\r\n      .filter(([_key, control]) => control instanceof SpecialFormArray)\r\n      .map(([key, control]) => {\r\n        (control as SpecialFormArray).fillFormArray(value[key]);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Método que retorna\r\n   */\r\n\r\n  getIdPkey(): SpecialFormControl<any> | undefined {\r\n    return Object.values(this.controls).find(\r\n      (control) =>\r\n        control instanceof SpecialFormControl && control.type === 'PRIMARY-KEY'\r\n    ) as SpecialFormControl<any> | undefined;\r\n  }\r\n}\r\n\r\nexport class SpecialFormArray extends FormArray implements IFieldBasicData {\r\n  public name: string;\r\n  public placeholder: string;\r\n  public label: string;\r\n  public tooltip: string;\r\n  public icon: string;\r\n  public elementId: string;\r\n  public styleClasses: string;\r\n  public required: boolean;\r\n  public hidden: boolean;\r\n  public readOnly: boolean;\r\n  public settings: IArraySettings;\r\n  public type: EControlTypes;\r\n  public defaultValue: any;\r\n  public form: SpecialFormGroup;\r\n  private formCreation: (value?: any) => SpecialFormGroup;\r\n  public errorMessages: { [key: string]: string };\r\n\r\n  constructor(\r\n    {\r\n      name,\r\n      settings,\r\n      type,\r\n      validators,\r\n      asyncValidators,\r\n      elementId,\r\n      styleClasses,\r\n      defaultValue,\r\n      hidden,\r\n      icon,\r\n      label,\r\n      placeholder,\r\n      readOnly,\r\n      required,\r\n      tooltip,\r\n      errorMessages,\r\n      disabled,\r\n    }: TSpecialArray,\r\n    formCreation: () => SpecialFormGroup,\r\n    controls: AbstractControl[]\r\n  ) {\r\n    super(controls, validators, asyncValidators);\r\n    this.formCreation = formCreation;\r\n    this.form = this.formCreation();\r\n    this.name = name;\r\n    this.placeholder = placeholder;\r\n    this.label = label;\r\n    this.tooltip = tooltip;\r\n    this.icon = icon;\r\n    this.elementId = elementId;\r\n    this.settings = settings;\r\n    this.type = type;\r\n    this.styleClasses = styleClasses;\r\n    this.hidden = hidden;\r\n    this.readOnly = readOnly;\r\n    this.required = required;\r\n    this.defaultValue = defaultValue;\r\n    this.errorMessages = errorMessages;\r\n    disabled ? this.disable() : this.enable();\r\n  }\r\n\r\n  fillFormArray(data: any[]) {\r\n    this.form.reset();\r\n    this.clear();\r\n    data.forEach((item) => {\r\n      const form = this.formCreation(item);\r\n      this.push(form);\r\n    });\r\n  }\r\n\r\n  addItem() {\r\n    const form = this.formCreation(this.form.value);\r\n\r\n    this.form.specialReset();\r\n    this.push(form);\r\n    this.markAsDirty();\r\n  }\r\n\r\n  specialPush(index?: number) {\r\n    const form = this.formCreation(this.form.value);\r\n    if (!index) this.push(form);\r\n    else this.controls[index].reset(this.form.value);\r\n  }\r\n\r\n  specialInsert(index = 0) {\r\n    const form = this.formCreation(this.form.value);\r\n    this.insert(index, form);\r\n  }\r\n\r\n  specialEdit(index: number, newValue: Object) {\r\n    this.controls[index].reset({ ...this.controls[index].value, ...newValue });\r\n    this.markAsDirty();\r\n  }\r\n\r\n  /**\r\n   * Vuelve todos los controles del formArray de lectura o de sololectura\r\n   * @param status\r\n   */\r\n\r\n  setReadOnly(status: boolean) {\r\n    this.readOnly = status;\r\n    this.controls.forEach((control) => {\r\n      if (control instanceof SpecialFormGroup) {\r\n        control.setReadOnly(status);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Vuelve todos los controles del formArray habilitados o deshabilitados\r\n   * @param status\r\n   */\r\n\r\n  setDisabled(status: boolean) {\r\n    status ? this.disable() : this.enable();\r\n    this.controls.forEach((control) => {\r\n      if (control instanceof SpecialFormGroup) {\r\n        control.setDisabled(status);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Permite editar un control especifico.\r\n   * @param index\r\n   */\r\n\r\n  editControl(index: number) {\r\n    this.form.reset(this.controls[index].value);\r\n  }\r\n\r\n  unpristineRequired() {\r\n    this.markAsDirty();\r\n    this.controls.forEach((item) => {\r\n      (<SpecialFormGroup>item).unpristineRequired();\r\n    });\r\n  }\r\n\r\n  recursiveFillForm(form: FormGroup, data: any): FormGroup {\r\n    Object.entries(form.controls).map(([key, control]) => {\r\n      if (control instanceof FormControl) {\r\n        control.setValue(data[key]);\r\n      } else if (control instanceof FormArray) {\r\n        data[key].forEach(() => {});\r\n      } else if (control instanceof FormGroup) {\r\n        control.reset(data[key]);\r\n      }\r\n    });\r\n    return form;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "type": "TSpecialArray",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formCreation",
                        "type": "function",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "function": []
                    },
                    {
                        "name": "controls",
                        "type": "AbstractControl[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 265,
                "jsdoctags": [
                    {
                        "type": "TSpecialArray",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formCreation",
                        "type": "function",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "function": [],
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "controls",
                        "type": "AbstractControl[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 262,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "elementId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 255,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "errorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 265,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpecialFormGroup",
                    "optional": false,
                    "description": "",
                    "line": 263,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "formCreation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 264,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 258,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 254,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 252,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 250,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 251,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "readOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 259,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 257,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IArraySettings",
                    "optional": false,
                    "description": "",
                    "line": 260,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "styleClasses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 256,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 253,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EControlTypes",
                    "optional": false,
                    "description": "",
                    "line": 261,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 319,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "editControl",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 376,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPermite editar un control especifico.\n",
                    "description": "<p>Permite editar un control especifico.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9637,
                                "end": 9642,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9631,
                                "end": 9636,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "fillFormArray",
                    "args": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 310,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "recursiveFillForm",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 387,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabled",
                    "args": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 362,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nVuelve todos los controles del formArray habilitados o deshabilitados\n",
                    "description": "<p>Vuelve todos los controles del formArray habilitados o deshabilitados</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9322,
                                "end": 9328,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "status"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9316,
                                "end": 9321,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setReadOnly",
                    "args": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 348,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nVuelve todos los controles del formArray de lectura o de sololectura\n",
                    "description": "<p>Vuelve todos los controles del formArray de lectura o de sololectura</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8992,
                                "end": 8998,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "status"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8986,
                                "end": 8991,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "specialEdit",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newValue",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 338,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newValue",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "specialInsert",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 333,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "specialPush",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 327,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unpristineRequired",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 380,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "extends": "FormArray",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IFieldBasicData"
            ]
        },
        {
            "name": "SpecialFormControl",
            "id": "class-SpecialFormControl-a25821e023d8ca8d2940a28f6c83745d512bd1d77376a1634c6b136acee076c7b4f7547b4f38b9870e11aaf277896619bbf4f604bd1071c483e277e155f2207a",
            "file": "projects/special-forms/src/lib/core/forms/special-forms.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\r\n  AbstractControl,\r\n  FormArray,\r\n  FormControl,\r\n  FormGroup,\r\n} from '@angular/forms';\r\nimport { EControlTypes } from '../aux-data/control-types.enum';\r\nimport { IFieldBasicData } from '../interfaces/field-basics.interfaces';\r\nimport {\r\n  IArraySettings,\r\n  IFormSettings,\r\n  TSpecialFields,\r\n  TSpecialForm,\r\n  TSpecialArray,\r\n} from '../interfaces/form.interfaces';\r\nexport class SpecialFormControl<T>\r\n  extends FormControl\r\n  implements IFieldBasicData\r\n{\r\n  public name: string;\r\n  public placeholder: string;\r\n  public label: string;\r\n  public tooltip: string;\r\n  public icon: string;\r\n  public elementId: string;\r\n  public styleClasses: string;\r\n  public length: number;\r\n  public required: boolean;\r\n  public hidden: boolean;\r\n  public readOnly: boolean;\r\n  public settings: T;\r\n  public type: EControlTypes;\r\n  public errorMessages: { [key: string]: string };\r\n\r\n  constructor({\r\n    name,\r\n    settings,\r\n    type,\r\n    validators,\r\n    asyncValidators,\r\n    elementId,\r\n    styleClasses,\r\n    defaultValue,\r\n    hidden,\r\n    icon,\r\n    label,\r\n    length,\r\n    placeholder,\r\n    readOnly,\r\n    required,\r\n    tooltip,\r\n    errorMessages,\r\n    disabled,\r\n  }: TSpecialFields) {\r\n    super(defaultValue, validators, asyncValidators);\r\n\r\n    this.name = name;\r\n    this.placeholder = placeholder;\r\n    this.label = label;\r\n    this.tooltip = tooltip;\r\n    this.icon = icon;\r\n    this.elementId = elementId;\r\n    this.settings = settings as T;\r\n    this.type = type;\r\n    this.styleClasses = styleClasses;\r\n    this.hidden = hidden;\r\n    this.length = length;\r\n    this.readOnly = readOnly;\r\n    this.required = required;\r\n    this.errorMessages = errorMessages;\r\n    disabled ? this.disable() : this.enable();\r\n  }\r\n\r\n  setReadOnly(status: boolean = true) {\r\n    this.readOnly = status;\r\n  }\r\n\r\n  setDisabled(status: boolean = true) {\r\n    status ? this.disable() : this.enable();\r\n  }\r\n\r\n  setHidden(status = true) {\r\n    this.hidden = status;\r\n  }\r\n}\r\nexport class SpecialFormGroup extends FormGroup implements IFieldBasicData {\r\n  public name: string;\r\n  public placeholder: string;\r\n  public label: string;\r\n  public tooltip: string;\r\n  public icon: string;\r\n  public elementId: string;\r\n  public styleClasses: string;\r\n  public length: number;\r\n  public required: boolean;\r\n  public hidden: boolean;\r\n  public readOnly: boolean;\r\n  public settings: IFormSettings;\r\n  public type: EControlTypes.form;\r\n  public defaultValue: any;\r\n  public errorMessages: { [key: string]: string };\r\n  public isChild: boolean;\r\n\r\n  constructor(\r\n    {\r\n      name,\r\n      settings,\r\n      type,\r\n      validators,\r\n      asyncValidators,\r\n      elementId,\r\n      styleClasses,\r\n      defaultValue,\r\n      hidden,\r\n      icon,\r\n      label,\r\n      length,\r\n      placeholder,\r\n      readOnly,\r\n      required,\r\n      tooltip,\r\n      disabled,\r\n    }: TSpecialForm,\r\n    controls: {\r\n      [key: string]: SpecialFormControl<any>;\r\n    },\r\n    isChild\r\n  ) {\r\n    super(controls, validators, asyncValidators);\r\n\r\n    this.name = name;\r\n    this.placeholder = placeholder;\r\n    this.label = label;\r\n    this.tooltip = tooltip;\r\n    this.icon = icon;\r\n    this.elementId = elementId;\r\n    this.settings = settings;\r\n    this.type = type;\r\n    this.styleClasses = styleClasses;\r\n    this.hidden = hidden;\r\n    this.length = length;\r\n    this.readOnly = readOnly;\r\n    this.required = required;\r\n    this.defaultValue = defaultValue;\r\n\r\n    this.isChild = isChild;\r\n    disabled ? this.disable() : this.enable();\r\n  }\r\n\r\n  unpristineRequired() {\r\n    Object.values(this.controls).forEach((control) => {\r\n      if (control instanceof SpecialFormControl) {\r\n        control.markAsDirty();\r\n      } else if (control instanceof SpecialFormGroup) {\r\n        control.unpristineRequired();\r\n      } else if (control instanceof SpecialFormArray) {\r\n        control.unpristineRequired();\r\n      }\r\n    });\r\n  }\r\n\r\n  specialReset(value = {}) {\r\n    const aux: any = {};\r\n    Object.entries(this.controls).map(([key, control]) => {\r\n      if (control instanceof SpecialFormControl) {\r\n        aux[key] = control.defaultValue;\r\n      } else if (control instanceof SpecialFormArray) {\r\n        control.clear();\r\n      }\r\n    });\r\n\r\n    this.reset({ ...aux, ...value });\r\n  }\r\n  setReadOnly(status: boolean = true) {\r\n    Object.values(this.controls).map((value) => {\r\n      if (\r\n        value instanceof SpecialFormControl ||\r\n        value instanceof SpecialFormArray ||\r\n        value instanceof SpecialFormGroup\r\n      ) {\r\n        value.setReadOnly(status);\r\n      }\r\n    });\r\n  }\r\n  setReadOnlyByFields(fieldsObject: { [key: string]: boolean }) {\r\n    Object.entries(fieldsObject).map(([key, value]) => {\r\n      const control = this.controls[key];\r\n      if (control instanceof SpecialFormControl) {\r\n        control.readOnly = value;\r\n      }\r\n    });\r\n  }\r\n\r\n  setHiddenByFields(fields: { [key: string]: boolean }) {\r\n    Object.entries(fields).map(([key, value]) => {\r\n      const control = this.controls[key];\r\n      if (control instanceof SpecialFormControl) {\r\n        control.hidden = value;\r\n      }\r\n    });\r\n  }\r\n  setDisabled(status: boolean) {\r\n    Object.values(this.controls).map((value) => {\r\n      if (\r\n        value instanceof SpecialFormControl ||\r\n        value instanceof SpecialFormArray ||\r\n        value instanceof SpecialFormGroup\r\n      ) {\r\n        value.setDisabled(status);\r\n      }\r\n    });\r\n  }\r\n\r\n  setDisabledByFields(fieldsObject: any) {\r\n    Object.entries(fieldsObject).map((entries) => {\r\n      if (this.controls[entries[0]] instanceof SpecialFormControl) {\r\n        entries[1]\r\n          ? this.controls[entries[0]].enable()\r\n          : this.controls[entries[0]].disable();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * donde value es el objeto semilla y detailForm es un arreglo de form key para dar un marco al formarray\r\n   */\r\n\r\n  setFormValue(value: any) {\r\n    this.specialReset(value);\r\n    Object.entries(this.controls)\r\n      .filter(([_key, control]) => control instanceof SpecialFormArray)\r\n      .map(([key, control]) => {\r\n        (control as SpecialFormArray).fillFormArray(value[key]);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Método que retorna\r\n   */\r\n\r\n  getIdPkey(): SpecialFormControl<any> | undefined {\r\n    return Object.values(this.controls).find(\r\n      (control) =>\r\n        control instanceof SpecialFormControl && control.type === 'PRIMARY-KEY'\r\n    ) as SpecialFormControl<any> | undefined;\r\n  }\r\n}\r\n\r\nexport class SpecialFormArray extends FormArray implements IFieldBasicData {\r\n  public name: string;\r\n  public placeholder: string;\r\n  public label: string;\r\n  public tooltip: string;\r\n  public icon: string;\r\n  public elementId: string;\r\n  public styleClasses: string;\r\n  public required: boolean;\r\n  public hidden: boolean;\r\n  public readOnly: boolean;\r\n  public settings: IArraySettings;\r\n  public type: EControlTypes;\r\n  public defaultValue: any;\r\n  public form: SpecialFormGroup;\r\n  private formCreation: (value?: any) => SpecialFormGroup;\r\n  public errorMessages: { [key: string]: string };\r\n\r\n  constructor(\r\n    {\r\n      name,\r\n      settings,\r\n      type,\r\n      validators,\r\n      asyncValidators,\r\n      elementId,\r\n      styleClasses,\r\n      defaultValue,\r\n      hidden,\r\n      icon,\r\n      label,\r\n      placeholder,\r\n      readOnly,\r\n      required,\r\n      tooltip,\r\n      errorMessages,\r\n      disabled,\r\n    }: TSpecialArray,\r\n    formCreation: () => SpecialFormGroup,\r\n    controls: AbstractControl[]\r\n  ) {\r\n    super(controls, validators, asyncValidators);\r\n    this.formCreation = formCreation;\r\n    this.form = this.formCreation();\r\n    this.name = name;\r\n    this.placeholder = placeholder;\r\n    this.label = label;\r\n    this.tooltip = tooltip;\r\n    this.icon = icon;\r\n    this.elementId = elementId;\r\n    this.settings = settings;\r\n    this.type = type;\r\n    this.styleClasses = styleClasses;\r\n    this.hidden = hidden;\r\n    this.readOnly = readOnly;\r\n    this.required = required;\r\n    this.defaultValue = defaultValue;\r\n    this.errorMessages = errorMessages;\r\n    disabled ? this.disable() : this.enable();\r\n  }\r\n\r\n  fillFormArray(data: any[]) {\r\n    this.form.reset();\r\n    this.clear();\r\n    data.forEach((item) => {\r\n      const form = this.formCreation(item);\r\n      this.push(form);\r\n    });\r\n  }\r\n\r\n  addItem() {\r\n    const form = this.formCreation(this.form.value);\r\n\r\n    this.form.specialReset();\r\n    this.push(form);\r\n    this.markAsDirty();\r\n  }\r\n\r\n  specialPush(index?: number) {\r\n    const form = this.formCreation(this.form.value);\r\n    if (!index) this.push(form);\r\n    else this.controls[index].reset(this.form.value);\r\n  }\r\n\r\n  specialInsert(index = 0) {\r\n    const form = this.formCreation(this.form.value);\r\n    this.insert(index, form);\r\n  }\r\n\r\n  specialEdit(index: number, newValue: Object) {\r\n    this.controls[index].reset({ ...this.controls[index].value, ...newValue });\r\n    this.markAsDirty();\r\n  }\r\n\r\n  /**\r\n   * Vuelve todos los controles del formArray de lectura o de sololectura\r\n   * @param status\r\n   */\r\n\r\n  setReadOnly(status: boolean) {\r\n    this.readOnly = status;\r\n    this.controls.forEach((control) => {\r\n      if (control instanceof SpecialFormGroup) {\r\n        control.setReadOnly(status);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Vuelve todos los controles del formArray habilitados o deshabilitados\r\n   * @param status\r\n   */\r\n\r\n  setDisabled(status: boolean) {\r\n    status ? this.disable() : this.enable();\r\n    this.controls.forEach((control) => {\r\n      if (control instanceof SpecialFormGroup) {\r\n        control.setDisabled(status);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Permite editar un control especifico.\r\n   * @param index\r\n   */\r\n\r\n  editControl(index: number) {\r\n    this.form.reset(this.controls[index].value);\r\n  }\r\n\r\n  unpristineRequired() {\r\n    this.markAsDirty();\r\n    this.controls.forEach((item) => {\r\n      (<SpecialFormGroup>item).unpristineRequired();\r\n    });\r\n  }\r\n\r\n  recursiveFillForm(form: FormGroup, data: any): FormGroup {\r\n    Object.entries(form.controls).map(([key, control]) => {\r\n      if (control instanceof FormControl) {\r\n        control.setValue(data[key]);\r\n      } else if (control instanceof FormArray) {\r\n        data[key].forEach(() => {});\r\n      } else if (control instanceof FormGroup) {\r\n        control.reset(data[key]);\r\n      }\r\n    });\r\n    return form;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "type": "TSpecialFields",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "type": "TSpecialFields",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "elementId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "errorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "length",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "readOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "styleClasses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EControlTypes",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "setDisabled",
                    "args": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setHidden",
                    "args": [
                        {
                            "name": "status",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setReadOnly",
                    "args": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "FormControl",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IFieldBasicData"
            ]
        },
        {
            "name": "SpecialFormGroup",
            "id": "class-SpecialFormGroup-a25821e023d8ca8d2940a28f6c83745d512bd1d77376a1634c6b136acee076c7b4f7547b4f38b9870e11aaf277896619bbf4f604bd1071c483e277e155f2207a",
            "file": "projects/special-forms/src/lib/core/forms/special-forms.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\r\n  AbstractControl,\r\n  FormArray,\r\n  FormControl,\r\n  FormGroup,\r\n} from '@angular/forms';\r\nimport { EControlTypes } from '../aux-data/control-types.enum';\r\nimport { IFieldBasicData } from '../interfaces/field-basics.interfaces';\r\nimport {\r\n  IArraySettings,\r\n  IFormSettings,\r\n  TSpecialFields,\r\n  TSpecialForm,\r\n  TSpecialArray,\r\n} from '../interfaces/form.interfaces';\r\nexport class SpecialFormControl<T>\r\n  extends FormControl\r\n  implements IFieldBasicData\r\n{\r\n  public name: string;\r\n  public placeholder: string;\r\n  public label: string;\r\n  public tooltip: string;\r\n  public icon: string;\r\n  public elementId: string;\r\n  public styleClasses: string;\r\n  public length: number;\r\n  public required: boolean;\r\n  public hidden: boolean;\r\n  public readOnly: boolean;\r\n  public settings: T;\r\n  public type: EControlTypes;\r\n  public errorMessages: { [key: string]: string };\r\n\r\n  constructor({\r\n    name,\r\n    settings,\r\n    type,\r\n    validators,\r\n    asyncValidators,\r\n    elementId,\r\n    styleClasses,\r\n    defaultValue,\r\n    hidden,\r\n    icon,\r\n    label,\r\n    length,\r\n    placeholder,\r\n    readOnly,\r\n    required,\r\n    tooltip,\r\n    errorMessages,\r\n    disabled,\r\n  }: TSpecialFields) {\r\n    super(defaultValue, validators, asyncValidators);\r\n\r\n    this.name = name;\r\n    this.placeholder = placeholder;\r\n    this.label = label;\r\n    this.tooltip = tooltip;\r\n    this.icon = icon;\r\n    this.elementId = elementId;\r\n    this.settings = settings as T;\r\n    this.type = type;\r\n    this.styleClasses = styleClasses;\r\n    this.hidden = hidden;\r\n    this.length = length;\r\n    this.readOnly = readOnly;\r\n    this.required = required;\r\n    this.errorMessages = errorMessages;\r\n    disabled ? this.disable() : this.enable();\r\n  }\r\n\r\n  setReadOnly(status: boolean = true) {\r\n    this.readOnly = status;\r\n  }\r\n\r\n  setDisabled(status: boolean = true) {\r\n    status ? this.disable() : this.enable();\r\n  }\r\n\r\n  setHidden(status = true) {\r\n    this.hidden = status;\r\n  }\r\n}\r\nexport class SpecialFormGroup extends FormGroup implements IFieldBasicData {\r\n  public name: string;\r\n  public placeholder: string;\r\n  public label: string;\r\n  public tooltip: string;\r\n  public icon: string;\r\n  public elementId: string;\r\n  public styleClasses: string;\r\n  public length: number;\r\n  public required: boolean;\r\n  public hidden: boolean;\r\n  public readOnly: boolean;\r\n  public settings: IFormSettings;\r\n  public type: EControlTypes.form;\r\n  public defaultValue: any;\r\n  public errorMessages: { [key: string]: string };\r\n  public isChild: boolean;\r\n\r\n  constructor(\r\n    {\r\n      name,\r\n      settings,\r\n      type,\r\n      validators,\r\n      asyncValidators,\r\n      elementId,\r\n      styleClasses,\r\n      defaultValue,\r\n      hidden,\r\n      icon,\r\n      label,\r\n      length,\r\n      placeholder,\r\n      readOnly,\r\n      required,\r\n      tooltip,\r\n      disabled,\r\n    }: TSpecialForm,\r\n    controls: {\r\n      [key: string]: SpecialFormControl<any>;\r\n    },\r\n    isChild\r\n  ) {\r\n    super(controls, validators, asyncValidators);\r\n\r\n    this.name = name;\r\n    this.placeholder = placeholder;\r\n    this.label = label;\r\n    this.tooltip = tooltip;\r\n    this.icon = icon;\r\n    this.elementId = elementId;\r\n    this.settings = settings;\r\n    this.type = type;\r\n    this.styleClasses = styleClasses;\r\n    this.hidden = hidden;\r\n    this.length = length;\r\n    this.readOnly = readOnly;\r\n    this.required = required;\r\n    this.defaultValue = defaultValue;\r\n\r\n    this.isChild = isChild;\r\n    disabled ? this.disable() : this.enable();\r\n  }\r\n\r\n  unpristineRequired() {\r\n    Object.values(this.controls).forEach((control) => {\r\n      if (control instanceof SpecialFormControl) {\r\n        control.markAsDirty();\r\n      } else if (control instanceof SpecialFormGroup) {\r\n        control.unpristineRequired();\r\n      } else if (control instanceof SpecialFormArray) {\r\n        control.unpristineRequired();\r\n      }\r\n    });\r\n  }\r\n\r\n  specialReset(value = {}) {\r\n    const aux: any = {};\r\n    Object.entries(this.controls).map(([key, control]) => {\r\n      if (control instanceof SpecialFormControl) {\r\n        aux[key] = control.defaultValue;\r\n      } else if (control instanceof SpecialFormArray) {\r\n        control.clear();\r\n      }\r\n    });\r\n\r\n    this.reset({ ...aux, ...value });\r\n  }\r\n  setReadOnly(status: boolean = true) {\r\n    Object.values(this.controls).map((value) => {\r\n      if (\r\n        value instanceof SpecialFormControl ||\r\n        value instanceof SpecialFormArray ||\r\n        value instanceof SpecialFormGroup\r\n      ) {\r\n        value.setReadOnly(status);\r\n      }\r\n    });\r\n  }\r\n  setReadOnlyByFields(fieldsObject: { [key: string]: boolean }) {\r\n    Object.entries(fieldsObject).map(([key, value]) => {\r\n      const control = this.controls[key];\r\n      if (control instanceof SpecialFormControl) {\r\n        control.readOnly = value;\r\n      }\r\n    });\r\n  }\r\n\r\n  setHiddenByFields(fields: { [key: string]: boolean }) {\r\n    Object.entries(fields).map(([key, value]) => {\r\n      const control = this.controls[key];\r\n      if (control instanceof SpecialFormControl) {\r\n        control.hidden = value;\r\n      }\r\n    });\r\n  }\r\n  setDisabled(status: boolean) {\r\n    Object.values(this.controls).map((value) => {\r\n      if (\r\n        value instanceof SpecialFormControl ||\r\n        value instanceof SpecialFormArray ||\r\n        value instanceof SpecialFormGroup\r\n      ) {\r\n        value.setDisabled(status);\r\n      }\r\n    });\r\n  }\r\n\r\n  setDisabledByFields(fieldsObject: any) {\r\n    Object.entries(fieldsObject).map((entries) => {\r\n      if (this.controls[entries[0]] instanceof SpecialFormControl) {\r\n        entries[1]\r\n          ? this.controls[entries[0]].enable()\r\n          : this.controls[entries[0]].disable();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * donde value es el objeto semilla y detailForm es un arreglo de form key para dar un marco al formarray\r\n   */\r\n\r\n  setFormValue(value: any) {\r\n    this.specialReset(value);\r\n    Object.entries(this.controls)\r\n      .filter(([_key, control]) => control instanceof SpecialFormArray)\r\n      .map(([key, control]) => {\r\n        (control as SpecialFormArray).fillFormArray(value[key]);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Método que retorna\r\n   */\r\n\r\n  getIdPkey(): SpecialFormControl<any> | undefined {\r\n    return Object.values(this.controls).find(\r\n      (control) =>\r\n        control instanceof SpecialFormControl && control.type === 'PRIMARY-KEY'\r\n    ) as SpecialFormControl<any> | undefined;\r\n  }\r\n}\r\n\r\nexport class SpecialFormArray extends FormArray implements IFieldBasicData {\r\n  public name: string;\r\n  public placeholder: string;\r\n  public label: string;\r\n  public tooltip: string;\r\n  public icon: string;\r\n  public elementId: string;\r\n  public styleClasses: string;\r\n  public required: boolean;\r\n  public hidden: boolean;\r\n  public readOnly: boolean;\r\n  public settings: IArraySettings;\r\n  public type: EControlTypes;\r\n  public defaultValue: any;\r\n  public form: SpecialFormGroup;\r\n  private formCreation: (value?: any) => SpecialFormGroup;\r\n  public errorMessages: { [key: string]: string };\r\n\r\n  constructor(\r\n    {\r\n      name,\r\n      settings,\r\n      type,\r\n      validators,\r\n      asyncValidators,\r\n      elementId,\r\n      styleClasses,\r\n      defaultValue,\r\n      hidden,\r\n      icon,\r\n      label,\r\n      placeholder,\r\n      readOnly,\r\n      required,\r\n      tooltip,\r\n      errorMessages,\r\n      disabled,\r\n    }: TSpecialArray,\r\n    formCreation: () => SpecialFormGroup,\r\n    controls: AbstractControl[]\r\n  ) {\r\n    super(controls, validators, asyncValidators);\r\n    this.formCreation = formCreation;\r\n    this.form = this.formCreation();\r\n    this.name = name;\r\n    this.placeholder = placeholder;\r\n    this.label = label;\r\n    this.tooltip = tooltip;\r\n    this.icon = icon;\r\n    this.elementId = elementId;\r\n    this.settings = settings;\r\n    this.type = type;\r\n    this.styleClasses = styleClasses;\r\n    this.hidden = hidden;\r\n    this.readOnly = readOnly;\r\n    this.required = required;\r\n    this.defaultValue = defaultValue;\r\n    this.errorMessages = errorMessages;\r\n    disabled ? this.disable() : this.enable();\r\n  }\r\n\r\n  fillFormArray(data: any[]) {\r\n    this.form.reset();\r\n    this.clear();\r\n    data.forEach((item) => {\r\n      const form = this.formCreation(item);\r\n      this.push(form);\r\n    });\r\n  }\r\n\r\n  addItem() {\r\n    const form = this.formCreation(this.form.value);\r\n\r\n    this.form.specialReset();\r\n    this.push(form);\r\n    this.markAsDirty();\r\n  }\r\n\r\n  specialPush(index?: number) {\r\n    const form = this.formCreation(this.form.value);\r\n    if (!index) this.push(form);\r\n    else this.controls[index].reset(this.form.value);\r\n  }\r\n\r\n  specialInsert(index = 0) {\r\n    const form = this.formCreation(this.form.value);\r\n    this.insert(index, form);\r\n  }\r\n\r\n  specialEdit(index: number, newValue: Object) {\r\n    this.controls[index].reset({ ...this.controls[index].value, ...newValue });\r\n    this.markAsDirty();\r\n  }\r\n\r\n  /**\r\n   * Vuelve todos los controles del formArray de lectura o de sololectura\r\n   * @param status\r\n   */\r\n\r\n  setReadOnly(status: boolean) {\r\n    this.readOnly = status;\r\n    this.controls.forEach((control) => {\r\n      if (control instanceof SpecialFormGroup) {\r\n        control.setReadOnly(status);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Vuelve todos los controles del formArray habilitados o deshabilitados\r\n   * @param status\r\n   */\r\n\r\n  setDisabled(status: boolean) {\r\n    status ? this.disable() : this.enable();\r\n    this.controls.forEach((control) => {\r\n      if (control instanceof SpecialFormGroup) {\r\n        control.setDisabled(status);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Permite editar un control especifico.\r\n   * @param index\r\n   */\r\n\r\n  editControl(index: number) {\r\n    this.form.reset(this.controls[index].value);\r\n  }\r\n\r\n  unpristineRequired() {\r\n    this.markAsDirty();\r\n    this.controls.forEach((item) => {\r\n      (<SpecialFormGroup>item).unpristineRequired();\r\n    });\r\n  }\r\n\r\n  recursiveFillForm(form: FormGroup, data: any): FormGroup {\r\n    Object.entries(form.controls).map(([key, control]) => {\r\n      if (control instanceof FormControl) {\r\n        control.setValue(data[key]);\r\n      } else if (control instanceof FormArray) {\r\n        data[key].forEach(() => {});\r\n      } else if (control instanceof FormGroup) {\r\n        control.reset(data[key]);\r\n      }\r\n    });\r\n    return form;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "type": "TSpecialForm",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "controls",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "isChild",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 102,
                "jsdoctags": [
                    {
                        "type": "TSpecialForm",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "controls",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isChild",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "elementId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "errorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isChild",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "length",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "readOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFormSettings",
                    "optional": false,
                    "description": "",
                    "line": 98,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "styleClasses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EControlTypes.form",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getIdPkey",
                    "args": [],
                    "optional": false,
                    "returnType": "SpecialFormControl | undefined",
                    "typeParameters": [],
                    "line": 241,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMétodo que retorna\n",
                    "description": "<p>Método que retorna</p>\n"
                },
                {
                    "name": "setDisabled",
                    "args": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledByFields",
                    "args": [
                        {
                            "name": "fieldsObject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldsObject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFormValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndonde value es el objeto semilla y detailForm es un arreglo de form key para dar un marco al formarray\n",
                    "description": "<p>donde value es el objeto semilla y detailForm es un arreglo de form key para dar un marco al formarray</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setHiddenByFields",
                    "args": [
                        {
                            "name": "fields",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setReadOnly",
                    "args": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setReadOnlyByFields",
                    "args": [
                        {
                            "name": "fieldsObject",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldsObject",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "specialReset",
                    "args": [
                        {
                            "name": "value",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unpristineRequired",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "extends": "FormGroup",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IFieldBasicData"
            ]
        }
    ],
    "directives": [
        {
            "name": "FormControlsRenderDirective",
            "id": "directive-FormControlsRenderDirective-9a7b0825ca33586260b671e074a4aef7bf3af4767f2c817887b839b24610b6be1da63576f49c5f5db3f9a3b5c0edd6e906bc6afa47ececf4ca6b75148ff47cb0",
            "file": "projects/special-forms/src/lib/core/directives/control-render.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, ViewContainerRef } from '@angular/core';\r\nimport { SpecialAutocompleteComponent } from '../../components/special-autocomplete/special-autocomplete.component';\r\nimport { SpecialCheckboxComponent } from '../../components/special-checkbox/special-checkbox.component';\r\nimport { SpecialDatepickerComponent } from '../../components/special-datepicker/special-datepicker.component';\r\nimport { SpecialDropdownComponent } from '../../components/special-dropdown/special-dropdown.component';\r\nimport { SpecialArrayComponent } from '../../components/special-form-array/special-form-array.component';\r\nimport { SpecialFormComponent } from '../../components/special-form/special-form.component';\r\nimport { SpecialInputComponent } from '../../components/special-input/special-input.component';\r\nimport { SpecialLabelComponent } from '../../components/special-label/special-label.component';\r\nimport { SpecialMultipleAutocompleteComponent } from '../../components/special-multiple-autocomplete/special-multiple-autocomplete.component';\r\nimport { SpecialTextAreaComponent } from '../../components/special-text-area/special-text-area.component';\r\nimport { SpecialUploadComponent } from '../../components/special-upload/special-upload.component';\r\nimport { EControlTypes } from '../aux-data/control-types.enum';\r\nimport { SpecialFormControl } from '../forms/special-forms';\r\n\r\n@Directive({\r\n  selector: `[controlRender]`,\r\n})\r\nexport class FormControlsRenderDirective {\r\n  readonly componentsBuffer = {\r\n    [EControlTypes.autocomplete]: SpecialAutocompleteComponent,\r\n    [EControlTypes.checkbox]: SpecialCheckboxComponent,\r\n    [EControlTypes.date]: SpecialDatepickerComponent,\r\n    [EControlTypes.dropdown]: SpecialDropdownComponent,\r\n    [EControlTypes.array]: SpecialArrayComponent,\r\n    [EControlTypes.input]: SpecialInputComponent,\r\n    [EControlTypes.multiple]: SpecialMultipleAutocompleteComponent,\r\n    [EControlTypes.textArea]: SpecialTextAreaComponent,\r\n    [EControlTypes.label]: SpecialLabelComponent,\r\n    [EControlTypes.file]: SpecialUploadComponent,\r\n    [EControlTypes.form]: SpecialFormComponent,\r\n  };\r\n\r\n  @Input('control') set controlSetter(control: SpecialFormControl<any>) {\r\n    this.viewContainer.clear();\r\n    const component = this.componentsBuffer[control.type];\r\n    if (component) {\r\n      const componentRef = this.viewContainer.createComponent(component);\r\n      (componentRef.instance as any).control = control;\r\n    }\r\n  }\r\n\r\n  constructor(private viewContainer: ViewContainerRef) {}\r\n}\r\n",
            "selector": "[controlRender]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "SpecialFormControl<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "componentsBuffer",
                    "defaultValue": "{\r\n    [EControlTypes.autocomplete]: SpecialAutocompleteComponent,\r\n    [EControlTypes.checkbox]: SpecialCheckboxComponent,\r\n    [EControlTypes.date]: SpecialDatepickerComponent,\r\n    [EControlTypes.dropdown]: SpecialDropdownComponent,\r\n    [EControlTypes.array]: SpecialArrayComponent,\r\n    [EControlTypes.input]: SpecialInputComponent,\r\n    [EControlTypes.multiple]: SpecialMultipleAutocompleteComponent,\r\n    [EControlTypes.textArea]: SpecialTextAreaComponent,\r\n    [EControlTypes.label]: SpecialLabelComponent,\r\n    [EControlTypes.file]: SpecialUploadComponent,\r\n    [EControlTypes.form]: SpecialFormComponent,\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "controlSetter": {
                    "name": "controlSetter",
                    "setSignature": {
                        "name": "controlSetter",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "control",
                                "type": "SpecialFormControl<any>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "jsdoctags": [
                            {
                                "name": "control",
                                "type": "SpecialFormControl<any>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ControlDialogComponent",
            "id": "component-ControlDialogComponent-405bfc3b6de12869815b1dcbb4c5bd240420d8052f3e9c6af729b74fd061b81d0b682a4ce612279444d86faa78a002c199cde4510f2c54049371387a3e00146c",
            "file": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/control-dialog.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "spf-control-dialog",
            "styleUrls": [
                "./control-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./control-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpecialFormGroup",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ControlDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "formField",
                    "defaultValue": "new FieldFormClass()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpecialFormGroup",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "settingsCreator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CommonFormCreator",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "settingsForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpecialFormGroup",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "sub",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "settingsCreation",
                    "args": [
                        {
                            "name": "type",
                            "type": "EControlTypes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "CommonFormCreator",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "EControlTypes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport {\r\n  combineLatest,\r\n  debounceTime,\r\n  filter,\r\n  forkJoin,\r\n  map,\r\n  of,\r\n  startWith,\r\n  Subject,\r\n  Subscription,\r\n  switchMap,\r\n  tap,\r\n} from 'rxjs';\r\nimport { EControlTypes } from '../../../core/aux-data/control-types.enum';\r\nimport {\r\n  SpecialFormControl,\r\n  SpecialFormGroup,\r\n} from '../../../core/forms/special-forms';\r\nimport { TRawFields } from '../../../core/interfaces/form.interfaces';\r\nimport { SpecialFormBuilderService } from '../../../core/services';\r\nimport { FieldFormClass } from './settings-strategy/field.form';\r\nimport { CommonFormCreator } from './settings-strategy/common.form.interface';\r\nimport { InputFormClass } from './settings-strategy/input.form';\r\nimport { DropDownFormClass } from './settings-strategy/dropdown.form';\r\nimport { AutocompleteFormClass } from './settings-strategy/autocomplete.form';\r\nimport { DatePickerFormClass } from './settings-strategy/datepicker.form';\r\nimport { CheckboxFormClass } from './settings-strategy/checkbox.form';\r\n\r\n@Component({\r\n  selector: 'spf-control-dialog',\r\n  templateUrl: './control-dialog.component.html',\r\n  styleUrls: ['./control-dialog.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class ControlDialogComponent implements OnInit {\r\n  sub = new Subscription();\r\n  formGroup: SpecialFormGroup;\r\n  settingsForm: SpecialFormGroup;\r\n  control: SpecialFormGroup;\r\n  formField = new FieldFormClass();\r\n  settingsCreator: CommonFormCreator;\r\n\r\n  constructor(\r\n    private formBuilder: SpecialFormBuilderService,\r\n    public dialogRef: MatDialogRef<ControlDialogComponent>\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.formGroup = this.formBuilder.group(this.formField.fields());\r\n\r\n    this.formGroup\r\n      .get('type')\r\n      .valueChanges.pipe(\r\n        filter((type) => !!type),\r\n        tap((type) => {\r\n          this.settingsCreator = this.settingsCreation(type);\r\n          const settingsForm = this.formBuilder.group(\r\n            this.settingsCreator.settingsFields()\r\n          );\r\n          this.formGroup.setControl('settings', settingsForm);\r\n        })\r\n      )\r\n      .subscribe();\r\n\r\n    this.formGroup.valueChanges.pipe(debounceTime(10)).subscribe((value) => {\r\n      console.log(value);\r\n      // const control = this.formBuilder.control(value);\r\n      // console.log(control);\r\n      // console.log(this.formGroup);\r\n    });\r\n    // this.sub.add(\r\n    //   combineLatest([this.formGroup.valueChanges, settings$])\r\n    //     .pipe(debounceTime(10))\r\n    //     .subscribe(([control, settings]) => {\r\n    //       // const field = this.formField.getField(control, settings);\r\n    //       // this.control = this.formBuilder.group(field);\r\n    //     })\r\n    // );\r\n  }\r\n\r\n  settingsCreation(type: EControlTypes): CommonFormCreator {\r\n    switch (type) {\r\n      case EControlTypes.input:\r\n        return new InputFormClass();\r\n      case EControlTypes.dropdown:\r\n        return new DropDownFormClass();\r\n      case EControlTypes.autocomplete:\r\n      case EControlTypes.multiple:\r\n        return new AutocompleteFormClass();\r\n      case EControlTypes.date:\r\n        return new DatePickerFormClass();\r\n      case EControlTypes.checkbox:\r\n        return new CheckboxFormClass();\r\n      default:\r\n        return new InputFormClass();\r\n    }\r\n  }\r\n\r\n  cancel() {}\r\n\r\n  ngOnDestroy() {\r\n    this.sub.unsubscribe();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./control-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "SpecialFormBuilderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ControlDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "SpecialFormBuilderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ControlDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container divide-y divide-solid\">\r\n  <h1 class=\"p-5 font-bold\">Crear nuevo control</h1>\r\n  <div class=\"p-5 overflow-y-auto\">\r\n    <sp-form [control]=\"formGroup\"></sp-form>\r\n  </div>\r\n  <!-- <div class=\"p-5 overflow-y-auto\">\r\n    <h1 class=\"p-5 font-bold\">Configuraciones del campo</h1>\r\n    <sp-form *ngIf=\"settingsForm\" [control]=\"settingsForm\"></sp-form>\r\n  </div> -->\r\n  <h1 class=\"p-5 font-bold\">Campo generado</h1>\r\n  <div class=\"flex justifify-center p-5\">\r\n    <sp-form *ngIf=\"control\" [control]=\"control\"></sp-form>\r\n  </div>\r\n  <div class=\"flex justify-end p-5\">\r\n    <div class=\"mx-1\">\r\n      <button mat-stroked-button color=\"warn\" (click)=\"cancel()\">\r\n        Cancelar\r\n      </button>\r\n    </div>\r\n    <div class=\"mx-1\">\r\n      <button\r\n        mat-stroked-button\r\n        color=\"primary\"\r\n        [disabled]=\"formGroup.invalid\"\r\n        (click)=\"addControl()\"\r\n      >\r\n        Aceptar\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "FormControlSelectorComponent",
            "id": "component-FormControlSelectorComponent-55a71d08854cdaba12936f2a1f18a2f29883b47bd8ac0a6b5d213fa482622b9c7ff5095511217184420dda701856a10ab53f7f4b130e6e7edd3b9ffe1f969290",
            "file": "projects/special-forms/src/lib/aux-storybook-components/form-control-selector/form-control-selector.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sp-form-control-selector",
            "styleUrls": [
                "./form-control-selector.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-control-selector.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "SpecialFormControl<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { EControlTypes } from '../../core/aux-data/control-types.enum';\r\nimport { SpecialFormControl } from '../../core/forms/special-forms';\r\n\r\n@Component({\r\n  selector: 'sp-form-control-selector',\r\n  templateUrl: './form-control-selector.component.html',\r\n  styleUrls: ['./form-control-selector.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class FormControlSelectorComponent implements OnInit {\r\n  @Input() control: SpecialFormControl<any>;\r\n\r\n  get controlTypes(): typeof EControlTypes {\r\n    return EControlTypes;\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host{\r\n  display: contents;\r\n}\r\n",
                    "styleUrl": "./form-control-selector.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "controlTypes": {
                    "name": "controlTypes",
                    "getSignature": {
                        "name": "controlTypes",
                        "type": "",
                        "returnType": "",
                        "line": 14
                    }
                }
            },
            "templateData": " <ng-template controlRender [control]=\"control\"></ng-template>\r\n"
        },
        {
            "name": "FormControlViewerComponent",
            "id": "component-FormControlViewerComponent-3e3d768ea2fd60fc4befcacf2de621cb91e1d47f1d8adcf18ab9c9917c608cf417e38aca60e5a5e80b5024e7f304975c5f3ca2f70e8d14b5088f6a7e22694b53",
            "file": "projects/special-forms/src/lib/aux-storybook-components/form-control-viewer/form-control-viewer.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "spf-form-control-viewer",
            "styleUrls": [
                "./form-control-viewer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-control-viewer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autocomplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "Partial<TSpecialAutocomplete>",
                    "decorators": []
                },
                {
                    "name": "dropdown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "Partial<TSpecialDropdown>",
                    "decorators": []
                },
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "getData",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpecialFormControl<any>",
                    "optional": false,
                    "description": "",
                    "line": 56
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { EControlTypes } from '../../core/aux-data/control-types.enum';\r\nimport { SpecialFormControl } from '../../core/forms/special-forms';\r\nimport {\r\n  TSpecialAutocomplete,\r\n  TSpecialDropdown,\r\n} from '../../core/interfaces/form.interfaces';\r\nimport { Masks } from '../../core/masks/maks.enum';\r\nimport { SpecialFormBuilderService } from '../../core/services';\r\n\r\n@Component({\r\n  selector: 'spf-form-control-viewer',\r\n  templateUrl: './form-control-viewer.component.html',\r\n  styleUrls: ['./form-control-viewer.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class FormControlViewerComponent implements OnInit {\r\n  @Input('field') set fieldSetter(field: any) {\r\n    this.control = this.specialFormBuilderService.control(field);\r\n  }\r\n\r\n  @Input('input') set inputSetter(field: any) {\r\n    field.settings.mask = Masks[field.settings.mask];\r\n    this.control = this.specialFormBuilderService.control(field);\r\n  }\r\n\r\n  @Input('dropdown') set dropdownSetter(field: Partial<TSpecialDropdown>) {\r\n    this.control = this.specialFormBuilderService.control(field);\r\n  }\r\n\r\n  @Input('autocomplete') set autocompleteSetter(\r\n    field: Partial<TSpecialAutocomplete>\r\n  ) {\r\n    field.settings.getData = () => this.getData.emit();\r\n    this.control = this.specialFormBuilderService.control(field);\r\n  }\r\n\r\n  @Input() theme;\r\n\r\n  // @Input('theme') set themeSetter(theme: 'light' | 'dark') {\r\n  //   const classes = document.querySelector('body.sb-show-main').classList;\r\n  //   theme === 'dark'\r\n  //     ? classes.add('dark', 'mat-app-background')\r\n  //     : classes.remove('dark', 'mat-app-background');\r\n  // }\r\n\r\n  @Output() getData: EventEmitter<string> = new EventEmitter();\r\n\r\n  control: SpecialFormControl<any>;\r\n\r\n  constructor(private specialFormBuilderService: SpecialFormBuilderService) {}\r\n\r\n  get controlTypes(): typeof EControlTypes {\r\n    return EControlTypes;\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../assets/styles.scss\";\r\n\r\n.dark {\r\n  background: linear-gradient(93deg, rgba(0,0,0,1) 0%, rgba(29,43,69,1) 0%, rgba(27,15,46,1) 100%);\r\n  .text{\r\n    color: rgb(160, 160, 160);\r\n  }\r\n}\r\n\r\n.light{\r\n  background-color: white\r\n}\r\n",
                    "styleUrl": "./form-control-viewer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "specialFormBuilderService",
                        "type": "SpecialFormBuilderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "specialFormBuilderService",
                        "type": "SpecialFormBuilderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "fieldSetter": {
                    "name": "fieldSetter",
                    "setSignature": {
                        "name": "fieldSetter",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "field",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 25,
                        "jsdoctags": [
                            {
                                "name": "field",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inputSetter": {
                    "name": "inputSetter",
                    "setSignature": {
                        "name": "inputSetter",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "field",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 29,
                        "jsdoctags": [
                            {
                                "name": "field",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "dropdownSetter": {
                    "name": "dropdownSetter",
                    "setSignature": {
                        "name": "dropdownSetter",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "field",
                                "type": "Partial<TSpecialDropdown>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "jsdoctags": [
                            {
                                "name": "field",
                                "type": "Partial<TSpecialDropdown>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "autocompleteSetter": {
                    "name": "autocompleteSetter",
                    "setSignature": {
                        "name": "autocompleteSetter",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "field",
                                "type": "Partial<TSpecialAutocomplete>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 38,
                        "jsdoctags": [
                            {
                                "name": "field",
                                "type": "Partial<TSpecialAutocomplete>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "controlTypes": {
                    "name": "controlTypes",
                    "getSignature": {
                        "name": "controlTypes",
                        "type": "",
                        "returnType": "",
                        "line": 60
                    }
                }
            },
            "templateData": "<div class=\"p-5 {{ theme }}\" *ngIf=\"control\">\r\n  <div class=\"text\">Tipo: {{ control.type }}</div>\r\n  <sp-form-control-selector [control]=\"control\"></sp-form-control-selector>\r\n  <div class=\"mt-4 text\">Valor: {{ control.value | json }}</div>\r\n</div>\r\n"
        },
        {
            "name": "FormGroupViewerComponent",
            "id": "component-FormGroupViewerComponent-799ebcc4e54b83276633f3293c5cdb6bab0a2434992504878a0d9a64294a3b884f811ebf76db97fea6294611e7a70a0d94f08a8f10031fae6d50f0b5a8a5e0d6",
            "file": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/form-group-viewer.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "spf-form-group-viewer",
            "styleUrls": [
                "./form-group-viewer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-group-viewer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "fields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "IFormStructure",
                    "decorators": []
                },
                {
                    "name": "theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "getData",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "fields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpecialFormGroup",
                    "optional": false,
                    "description": "",
                    "line": 72
                }
            ],
            "methodsClass": [
                {
                    "name": "addControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { EControlTypes } from '../../core/aux-data/control-types.enum';\r\nimport { SpecialFormGroup } from '../../core/forms/special-forms';\r\nimport { IFormStructure } from '../../core/interfaces/form.interfaces';\r\nimport { SpecialFormBuilderService } from '../../core/services';\r\nimport { ControlDialogComponent } from './components/control-dialog.component';\r\n\r\n@Component({\r\n  selector: 'spf-form-group-viewer',\r\n  templateUrl: './form-group-viewer.component.html',\r\n  styleUrls: ['./form-group-viewer.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class FormGroupViewerComponent implements OnInit {\r\n  fields: {\r\n    test: {\r\n      placeholder: 'Esto es una prueba';\r\n      label: 'Label';\r\n      tooltip: 'Tooltip';\r\n      icon: 'accessible';\r\n      elementId: 'Element-id';\r\n      styleClasses: '';\r\n      length: 0;\r\n      required: true;\r\n      readOnly: false;\r\n      type: EControlTypes.input;\r\n      settings: {};\r\n      errorMessages: {};\r\n      asyncValidators: null;\r\n      validators: null;\r\n    };\r\n    test2: {\r\n      placeholder: 'Esto es una prueba';\r\n      label: 'Label';\r\n      tooltip: 'Tooltip';\r\n      icon: 'accessible';\r\n      elementId: 'Element-id';\r\n      styleClasses: '';\r\n      length: 0;\r\n      required: true;\r\n      readOnly: false;\r\n      type: EControlTypes.input;\r\n      settings: {};\r\n      errorMessages: {};\r\n      asyncValidators: null;\r\n      validators: null;\r\n    };\r\n  };\r\n  @Input('fields') set fieldSetter(fields: IFormStructure) {\r\n    // this.formGroup = this.specialFormBuilderService.group(fields);\r\n  }\r\n\r\n  @Input() theme;\r\n\r\n  // @Input('theme') set themeSetter(theme: 'light' | 'dark') {\r\n  //   const classes = document.querySelector('body.sb-show-main').classList;\r\n  //   theme === 'dark'\r\n  //     ? classes.add('dark', 'mat-app-background')\r\n  //     : classes.remove('dark', 'mat-app-background');\r\n  // }\r\n\r\n  @Output() getData: EventEmitter<string> = new EventEmitter();\r\n\r\n  formGroup: SpecialFormGroup;\r\n\r\n  constructor(\r\n    private specialFormBuilderService: SpecialFormBuilderService,\r\n    public dialog: MatDialog\r\n  ) {}\r\n\r\n  get controlTypes(): typeof EControlTypes {\r\n    return EControlTypes;\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  addControl() {\r\n    this.dialog.open(ControlDialogComponent, {\r\n      width: '80%',\r\n      maxWidth:'1440px',\r\n      maxHeight: '90vh',\r\n      panelClass: 'dialog-panel-no-padding',\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../assets/styles.scss\";\r\n\r\n.dark {\r\n  background: linear-gradient(93deg, rgba(0,0,0,1) 0%, rgba(29,43,69,1) 0%, rgba(27,15,46,1) 100%);\r\n  .text{\r\n    color: rgb(160, 160, 160);\r\n  }\r\n}\r\n\r\n.light{\r\n  background-color: white\r\n}\r\n",
                    "styleUrl": "./form-group-viewer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "specialFormBuilderService",
                        "type": "SpecialFormBuilderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 72,
                "jsdoctags": [
                    {
                        "name": "specialFormBuilderService",
                        "type": "SpecialFormBuilderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "fieldSetter": {
                    "name": "fieldSetter",
                    "setSignature": {
                        "name": "fieldSetter",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "fields",
                                "type": "IFormStructure",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 57,
                        "jsdoctags": [
                            {
                                "name": "fields",
                                "type": "IFormStructure",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "controlTypes": {
                    "name": "controlTypes",
                    "getSignature": {
                        "name": "controlTypes",
                        "type": "",
                        "returnType": "",
                        "line": 79
                    }
                }
            },
            "templateData": "<div class=\"{{ theme }}\">\r\n  <div class=\"p-5\">\r\n    <button mat-stroked-button color=\"primary\" (click)=\"addControl()\">\r\n      Agregar control\r\n    </button>\r\n  </div>\r\n  <div>\r\n    <sp-form [control]=\"formGroup\"></sp-form>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
            "file": "stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "SpecialArrayComponent",
            "id": "component-SpecialArrayComponent-5e3f15da49e5f3c76d7b41f3e2e5bf2ed72c4751ecebeba2820e78c02a535713e13bab0cb88f94d4aabd6c2ac64f673b2673af105b75b1e866231fa46ad365df",
            "file": "projects/special-forms/src/lib/components/special-form-array/special-form-array.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sp-array",
            "styleUrls": [
                "./special-form-array.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./special-form-array.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "SpecialFormArray",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columns",
                    "defaultValue": "3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "dataSource",
                    "defaultValue": "new MatTableDataSource<any>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<any>",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "formArray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpecialFormArray",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "addItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getColumns",
                    "args": [
                        {
                            "name": "form",
                            "type": "SpecialFormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "SpecialFormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "index",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n} from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { EControlTypes } from '../../core/aux-data/control-types.enum';\r\nimport {\r\n  SpecialFormArray,\r\n  SpecialFormGroup,\r\n} from '../../core/forms/special-forms';\r\n@Component({\r\n  selector: 'sp-array',\r\n  templateUrl: './special-form-array.component.html',\r\n  styleUrls: ['./special-form-array.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SpecialArrayComponent implements OnInit {\r\n  @Input() set control(formArray: SpecialFormArray) {\r\n    this.dataSource.data = formArray.controls;\r\n    this.formArray = formArray;\r\n    this.columns = this.getColumns(formArray.form);\r\n  }\r\n\r\n  columns = 3;\r\n  formArray: SpecialFormArray;\r\n  dataSource: MatTableDataSource<any> = new MatTableDataSource<any>([]);\r\n\r\n  get withFormHeader() {\r\n    return !!this.formArray.settings.withFormHeader;\r\n  }\r\n\r\n  get settings() {\r\n    return this.formArray.settings;\r\n  }\r\n\r\n\r\n  get controlTypes(): typeof EControlTypes {\r\n    return EControlTypes;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  getColumns(form: SpecialFormGroup) {\r\n    return Object.keys(form.controls).length + 1;\r\n  }\r\n\r\n  removeItem(index) {\r\n    this.formArray.removeAt(index);\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  addItem() {\r\n    this.formArray.addItem();\r\n    console.log(this.formArray);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// // @import \"../../../scss-modules/variables.scss\";\r\n:host{\r\n  display: contents;\r\n}\r\n\r\n// .form-array-container {\r\n//   padding: 0;\r\n//   font-family: var(--font-family-primary);\r\n//   width: 100%;\r\n//   box-sizing: border-box;\r\n//   font-size: var(--font-size-small);\r\n\r\n//   &__table {\r\n//     border-collapse: collapse;\r\n//     width: 100%;\r\n//   }\r\n//   &__table-header {\r\n//     background-color: var(--color-primary-500);\r\n//     color: var(--color-primary-50);\r\n//   }\r\n//   thead {\r\n//     width: calc(100% - 5px);\r\n//   }\r\n\r\n//   thead,\r\n//   tbody tr {\r\n//     display: table;\r\n//     width: 100%;\r\n//     table-layout: fixed;\r\n//   }\r\n\r\n//   tbody {\r\n//     display: block;\r\n//     overflow-y: auto;\r\n//   }\r\n\r\n//   td,\r\n//   th {\r\n//     padding: 5px;\r\n//     box-sizing: border-box;\r\n//     text-align: left;\r\n//   }\r\n\r\n//   tr:nth-child(even) {\r\n//     // background-color: var(--color-primary-50);\r\n//   }\r\n// }\r\n\r\n// .add-item-btn {\r\n//   width: 100%;\r\n//   display: flex;\r\n//   justify-content: center;\r\n//   align-items: center;\r\n//   margin-bottom: 13px;\r\n//   @media only screen and (max-width: $screem-sm) {\r\n//     justify-content: flex-end;\r\n//   }\r\n// }\r\n\r\n// .accordion-container {\r\n//   margin-top: 1rem;\r\n\r\n//   .expanded-header {\r\n//     background-color: var(--color-primary-50-10);\r\n//   }\r\n// }\r\n\r\n// .mobile-delete {\r\n//   margin-right: 16px;\r\n// }\r\n",
                    "styleUrl": "./special-form-array.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 41
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "control": {
                    "name": "control",
                    "setSignature": {
                        "name": "control",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "formArray",
                                "type": "SpecialFormArray",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 20,
                        "jsdoctags": [
                            {
                                "name": "formArray",
                                "type": "SpecialFormArray",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "withFormHeader": {
                    "name": "withFormHeader",
                    "getSignature": {
                        "name": "withFormHeader",
                        "type": "",
                        "returnType": "",
                        "line": 30
                    }
                },
                "settings": {
                    "name": "settings",
                    "getSignature": {
                        "name": "settings",
                        "type": "",
                        "returnType": "",
                        "line": 34
                    }
                },
                "controlTypes": {
                    "name": "controlTypes",
                    "getSignature": {
                        "name": "controlTypes",
                        "type": "",
                        "returnType": "",
                        "line": 39
                    }
                }
            },
            "templateData": "<div class=\"w-full box-border p-2\">\r\n  <div\r\n    *ngIf=\"formArray\"\r\n    class=\"w-full mt-2 p-3 border-slate-200 border border-solid box-border\"\r\n  >\r\n    <h1 *ngIf=\"!!formArray.label\" class=\"font-bold py-3\">\r\n      {{ formArray.label }}\r\n    </h1>\r\n    <div class=\"divide-y divide-solid\">\r\n      <div\r\n        *ngIf=\"formArray.form\"\r\n        [ngClass]=\"{ 'md:grid-cols-15': settings.withActionButtons }\"\r\n        class=\"grid gap-4 grid-cols-12\"\r\n      >\r\n        <ng-container *ngIf=\"!withFormHeader; else FORMHEADERREF\">\r\n          <h2\r\n            [class]=\"item.styleClasses\"\r\n            *ngFor=\"let item of formArray.form.control | controlsList\"\r\n          >\r\n            {{ item.label }}\r\n          </h2>\r\n          <div\r\n            *ngIf=\"settings.withActionButtons\"\r\n            class=\"\r\n              col-start-7 col-end-13\r\n              md:col-start-13 md:col-end-16\r\n              pb-5\r\n              my-auto\r\n              ml-auto\r\n              md:m-auto\r\n            \"\r\n          ></div>\r\n        </ng-container>\r\n        <ng-template #FORMHEADERREF>\r\n          <ng-container *ngFor=\"let item of formArray.form.control | controlsList\">\r\n            <ng-template controlRender [control]=\"item\"></ng-template>\r\n          </ng-container>\r\n          <div\r\n            *ngIf=\"settings.withActionButtons\"\r\n            class=\"\r\n              col-start-7 col-end-13\r\n              md:col-start-13 md:col-end-16\r\n              pb-5\r\n              my-auto\r\n              ml-auto\r\n              md:m-auto\r\n            \"\r\n          >\r\n            <button\r\n              mat-flat-button\r\n              color=\"primary\"\r\n              [disabled]=\"formArray.form.invalid\"\r\n              (click)=\"addItem()\"\r\n            >\r\n              Add\r\n            </button>\r\n          </div>\r\n        </ng-template>\r\n      </div>\r\n      <div\r\n        class=\"w-full pt-5 grid gap-4 grid-cols-12 md:grid-cols-15\"\r\n        *ngFor=\"let formGroup of formArray.controls; let i = index\"\r\n      >\r\n        <ng-container *ngFor=\"let item of formGroup.control | controlsList\">\r\n          <ng-template controlRender [control]=\"item\"></ng-template>\r\n        </ng-container>\r\n        <div\r\n          class=\"\r\n            col-start-7 col-end-13\r\n            md:col-start-13 md:col-end-16\r\n            pb-5\r\n            my-auto\r\n            ml-auto\r\n            md:m-auto\r\n          \"\r\n        >\r\n          <button mat-flat-button color=\"warn\" (click)=\"removeItem(i)\">\r\n            Remove\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- <table class=\"form-array-container__table\">\r\n    <thead *ngIf=\"formArray.form\">\r\n      <tr\r\n        *ngIf=\"headerForm; else HEADERFORMREF\"\r\n        class=\"form-array-container__table-header\"\r\n      >\r\n        <th\r\n          class=\"header-cell\"\r\n          *ngFor=\"let control of formArray.form | controlsList\"\r\n        >\r\n          {{ control.label | translate }}\r\n        </th>\r\n        <th *ngIf=\"!formArray.readOnly\"></th>\r\n      </tr>\r\n      <ng-template #HEADERFORMREF>\r\n        <tr class=\"table-form-header\">\r\n          <th\r\n            class=\"header-cell\"\r\n            [ngSwitch]=\"control.type\"\r\n            *ngFor=\"let control of formArray.form | controlsList\"\r\n          >\r\n            <sp-form-control-selector\r\n              [control]=\"control\"\r\n            ></sp-form-control-selector>\r\n          </th>\r\n          <th class=\"header-cell\" *ngIf=\"!formArray.readOnly\">\r\n            <ng-container *ngTemplateOutlet=\"ADDBUTTON\"></ng-container>\r\n          </th>\r\n        </tr>\r\n      </ng-template>\r\n    </thead> -->\r\n\r\n<!-- [ngStyle]=\"{'max-height':'calc(100vh - '+maxHeight+'px)' }\"> -->\r\n<!-- <tbody>\r\n      <tr *ngFor=\"let formGroup of formArray.controls; let i = index\">\r\n        <td [ngSwitch]=\"control.type\" *ngFor=\"let control of formGroup.controls | controlsList\">\r\n          <sp-form-control-selector\r\n            [control]=\"control\"\r\n          ></sp-form-control-selector>\r\n        </td>\r\n        <td *ngIf=\"!formArray.readOnly\">\r\n          <bmb-button\r\n            [icon]=\"'delete_outline'\"\r\n            [type]=\"'Raised'\"\r\n            [size]=\"'XLarge'\"\r\n            [bdrColor]=\"'error-500'\"\r\n            [tColor]=\"'error-500'\"\r\n            (onClick)=\"deleteItem(i)\"\r\n          >\r\n          </bmb-button>\r\n        </td>\r\n      </tr>\r\n    </tbody> -->\r\n<!-- </table> -->\r\n\r\n<!-- <ng-template #TABLET>\r\n  <div class=\"mt-1\">\r\n    <ng-container *ngIf=\"headerFormEnable\">\r\n      <div class=\"card-form-container\">\r\n        <automatic-forms [form]=\"formArray.form\" [enableButtons]=\"false\">\r\n        </automatic-forms>\r\n        <ng-container *ngTemplateOutlet=\"ADDBUTTON\"></ng-container>\r\n      </div>\r\n    </ng-container>\r\n    <ng-content select=\"[header]\"></ng-content>\r\n  </div>\r\n  <div class=\"accordion-container\">\r\n    <mat-accordion>\r\n      <mat-expansion-panel\r\n        class=\"mat-elevation-z1\"\r\n        *ngFor=\"let item of formArray.controls; let i = index\"\r\n      >\r\n        <mat-expansion-panel-header\r\n          class=\"expanded-header\"\r\n          collapsedHeight=\"3rem\"\r\n          expandedHeight=\"3rem\"\r\n        >\r\n          <ng-container\r\n            *ngTemplateOutlet=\"cardHeaderTemplate; context: { $implicit: item }\"\r\n          >\r\n          </ng-container>\r\n          <mat-icon\r\n            *ngIf=\"!formArray.readOnly\"\r\n            class=\"mobile-delete\"\r\n            (click)=\"deleteItem(i)\"\r\n            color=\"warn\"\r\n          >\r\n            delete_outline\r\n          </mat-icon>\r\n        </mat-expansion-panel-header>\r\n        <ng-container\r\n          *ngTemplateOutlet=\"cardBodyTemplate; context: { $implicit: item }\"\r\n        >\r\n        </ng-container>\r\n      </mat-expansion-panel>\r\n    </mat-accordion>\r\n  </div>\r\n</ng-template>\r\n\r\n<div class=\"text-error\" *ngIf=\"formArray.dirty && formArray.invalid\">\r\n  {{ formArray.errors | errorMessage | translate }}\r\n</div>\r\n\r\n<ng-template #ADDBUTTON>\r\n  <div class=\"add-item-btn\">\r\n    <bmb-button\r\n      [icon]=\"'add'\"\r\n      [type]=\"'Raised'\"\r\n      [bdrColor]=\"'aux-success'\"\r\n      [size]=\"'XLarge'\"\r\n      [tColor]=\"'aux-success'\"\r\n      [disabled]=\"!formArray.form.valid || !formArray.form.dirty\"\r\n      (onClick)=\"addItemAction()\"\r\n    >\r\n    </bmb-button>\r\n  </div>\r\n</ng-template> -->\r\n"
        },
        {
            "name": "SpecialAutocompleteComponent",
            "id": "component-SpecialAutocompleteComponent-85b1db25c6345b2ece188d9184e9bb2988d95bf9b1073e6ac4e1e9b2c60f269059b6e247f3b72c4bfeaa1dfb663604363382f760e839347d0a4b132d0b0fd0be",
            "file": "projects/special-forms/src/lib/components/special-autocomplete/special-autocomplete.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sp-autocomplete",
            "styleUrls": [
                "./special-autocomplete.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./special-autocomplete.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "SpecialFormControl<IAutocompleteSettings>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configValue",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "subs",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "iconClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "optionSelected",
                    "args": [
                        {
                            "name": "data",
                            "type": "MatAutocompleteSelectedEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "MatAutocompleteSelectedEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';\r\nimport { Subscription } from 'rxjs';\r\nimport { SpecialFormControl } from '../../core/forms/special-forms';\r\nimport { IAutocompleteSettings } from './special-autocomplete.interface';\r\n@Component({\r\n  selector: 'sp-autocomplete',\r\n  templateUrl: './special-autocomplete.component.html',\r\n  styleUrls: ['./special-autocomplete.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SpecialAutocompleteComponent {\r\n  @Input() control: SpecialFormControl<IAutocompleteSettings>;\r\n\r\n  subs = new Subscription();\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    this.init();\r\n  }\r\n\r\n  get settings(): IAutocompleteSettings {\r\n    return this.control.settings;\r\n  }\r\n\r\n  init() {\r\n    this.subs.add(\r\n      this.control.valueChanges.pipe(debounceTime(500)).subscribe((value) => {\r\n        if (typeof value === 'string') {\r\n          this.settings.getData(value, this.control);\r\n        }\r\n      })\r\n    );\r\n  }\r\n  configValue = (item: any) => {\r\n    if (!item) return '';\r\n    const fieldName = this.settings.fieldName;\r\n    return fieldName instanceof Function ? fieldName(item) : item[fieldName];\r\n  };\r\n\r\n  optionSelected(data: MatAutocompleteSelectedEvent) {\r\n    this.control.setValue(data.option.value);\r\n    if (this.settings.onSelect) this.settings.onSelect(data.option.value);\r\n  }\r\n\r\n  iconClick(event) {\r\n    if (this.settings.iconAction) {\r\n      this.settings.iconAction(this.control.value);\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subs.unsubscribe();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host{\r\n  display: contents;\r\n}\r\n",
                    "styleUrl": "./special-autocomplete.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "accessors": {
                "settings": {
                    "name": "settings",
                    "getSignature": {
                        "name": "settings",
                        "type": "",
                        "returnType": "IAutocompleteSettings",
                        "line": 24
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"control && !control.hidden\">\r\n  <mat-form-field\r\n    class=\"w-full {{ control.styleClasses }}\"\r\n    [appearance]=\"control.label ? 'outline' : 'standard'\"\r\n  >\r\n    <mat-label\r\n      [ngClass]=\"{ 'is-link': control.label }\"\r\n      class=\"control-label\"\r\n      *ngIf=\"control.label\"\r\n    >\r\n      {{ control.label }}\r\n    </mat-label>\r\n    <input\r\n      type=\"text\"\r\n      autocomplete=\"off\"\r\n      [required]=\"control.required\"\r\n      [readonly]=\"control.readOnly\"\r\n      [placeholder]=\"control.placeholder\"\r\n      matInput\r\n      [formControl]=\"control\"\r\n      [matAutocomplete]=\"auto\"\r\n    />\r\n    <mat-autocomplete\r\n      class=\"autocomplete-options\"\r\n      #auto=\"matAutocomplete\"\r\n      [displayWith]=\"configValue\"\r\n      (optionSelected)=\"optionSelected($event)\"\r\n    >\r\n      <mat-option\r\n        *ngFor=\"let option of settings?.source | async\"\r\n        [value]=\"option\"\r\n      >\r\n        <div class=\"flex items-center\">\r\n          <img\r\n            *ngIf=\"settings.fieldImage\"\r\n            class=\"w-8 pr-2\"\r\n            alt=\"\"\r\n            [src]=\"option | textByFunction: settings.fieldImage\"\r\n          />\r\n          <span>\r\n            {{ option | textByFunction: settings.fieldName }}\r\n          </span>\r\n        </div>\r\n      </mat-option>\r\n    </mat-autocomplete>\r\n    <mat-icon *ngIf=\"control.icon\" matPrefix>{{ control.icon }}</mat-icon>\r\n    <button\r\n      *ngIf=\"settings.icon\"\r\n      mat-icon-button\r\n      matSuffix\r\n      (click)=\"iconClick($event)\"\r\n    >\r\n      <mat-icon>\r\n        {{ settings.icon }}\r\n      </mat-icon>\r\n    </button>\r\n    <mat-hint>{{ control.tooltip }}</mat-hint>\r\n    <mat-error>\r\n      {{ control.errors | errorMessage: control.errorMessages }}\r\n    </mat-error>\r\n  </mat-form-field>\r\n</ng-container>\r\n"
        },
        {
            "name": "SpecialCheckboxComponent",
            "id": "component-SpecialCheckboxComponent-64227c151479ca99c70e223347286633e187eddaeff83d57f8618b3250e78116b359312ca3f934fd9f3fdda52c95b95073844acdc6109c034fbc86c299f76b77",
            "file": "projects/special-forms/src/lib/components/special-checkbox/special-checkbox.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sp-checkbox",
            "styleUrls": [
                "./special-checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./special-checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "SpecialFormControl<ICheckboxSettings>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\nimport { SpecialFormControl } from '../../core/forms/special-forms';\nimport { ICheckboxSettings } from './special-checkbox.interface';\n@Component({\n  selector: 'sp-checkbox',\n  templateUrl: './special-checkbox.component.html',\n  styleUrls: ['./special-checkbox.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SpecialCheckboxComponent implements OnInit {\n  @Input() control: SpecialFormControl<ICheckboxSettings>;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host{\r\n  display: contents;\r\n}\r\n",
                    "styleUrl": "./special-checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\n  *ngIf=\"control\"\n  [id]=\"control.elementId\"\n  class=\"w-full flex flex-col {{ control.styleClasses }}\"\n>\n  <mat-label *ngIf=\"control.label\">{{ control.label }}</mat-label>\n  <mat-checkbox\n    [ngModel]=\"control.value\"\n    (ngModelChange)=\"control.setValue($event); control.markAsDirty()\"\n    [indeterminate]=\"control.settings.indeterminate\"\n    [labelPosition]=\"control.settings.labelPosition\"\n    [disabled]=\"control.disabled\"\n  >\n    <mat-icon *ngIf=\"control.icon\" matSuffix>{{ control.icon }} </mat-icon>\n    {{ control.placeholder }}\n  </mat-checkbox>\n</div>\n"
        },
        {
            "name": "SpecialDatepickerComponent",
            "id": "component-SpecialDatepickerComponent-fb303fc8de7eacd2e9812d9f539b4b3390dbaace20e9a496a8091f735956654b09db33c739423a59e5d28116bc8652d74f199e68037a6b9c66fb63afafffd3c2",
            "file": "projects/special-forms/src/lib/components/special-datepicker/special-datepicker.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sp-datepicker",
            "styleUrls": [
                "./special-datepicker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./special-datepicker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "SpecialFormControl<IDatePickerSettings>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\nimport { SpecialFormControl } from '../../core/forms/special-forms';\nimport { IDatePickerSettings } from './special-datepicker.interface';\n\n@Component({\n  selector: 'sp-datepicker',\n  templateUrl: './special-datepicker.component.html',\n  styleUrls: ['./special-datepicker.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SpecialDatepickerComponent implements OnInit {\n  @Input() control: SpecialFormControl<IDatePickerSettings>;\n\n  constructor() {}\n\n  get startAt() {\n    return this.control.settings?.startAt || new Date();\n  }\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host{\r\n  display: contents;\r\n}\r\n",
                    "styleUrl": "./special-datepicker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "startAt": {
                    "name": "startAt",
                    "getSignature": {
                        "name": "startAt",
                        "type": "",
                        "returnType": "",
                        "line": 16
                    }
                }
            },
            "templateData": "<mat-form-field\n  *ngIf=\"control\"\n  [id]=\"control.elementId\"\n  class=\"w-full {{ control.styleClasses }}\"\n  [appearance]=\"control.label ? 'outline' : 'standard'\"\n>\n  <mat-label *ngIf=\"control.label\">{{ control.label }}</mat-label>\n  <input\n    matInput\n    autocomplete=\"off\"\n    [readonly]=\"control.readOnly\"\n    [matDatepicker]=\"picker\"\n    [required]=\"control.required\"\n    [placeholder]=\"control.placeholder\"\n    [formControl]=\"control\"\n  />\n  <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n  <mat-datepicker #picker startView=\"year\" [startAt]=\"startAt\">\n  </mat-datepicker>\n  <mat-hint>\n    {{ control.tooltip }}\n  </mat-hint>\n  <mat-error>\n    {{ control.errors | errorMessage: control.errorMessages }}\n  </mat-error>\n</mat-form-field>\n"
        },
        {
            "name": "SpecialDropdownComponent",
            "id": "component-SpecialDropdownComponent-72da590accdda46d8bf9fa529cfd30a35aa0dc98ab58106e2f187977c26b0bc97709b5faddc4a2b988a22b0fdb73c23d590c63aee32b9a3525d8192f2caea72e",
            "file": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sp-dropdown",
            "styleUrls": [
                "./special-dropdown.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./special-dropdown.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "SpecialFormControl<IDropdownSettings>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "iconClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "optionSelected",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { SpecialFormControl } from '../../core/forms/special-forms';\r\nimport { IDropdownSettings } from './special-dropdown.interface';\r\n@Component({\r\n  selector: 'sp-dropdown',\r\n  templateUrl: './special-dropdown.component.html',\r\n  styleUrls: ['./special-dropdown.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SpecialDropdownComponent {\r\n  @Input() control: SpecialFormControl<IDropdownSettings>;\r\n\r\n  get settings(): IDropdownSettings {\r\n    return this.control.settings;\r\n  }\r\n\r\n  iconClick(event) {\r\n    if (this.settings.iconAction) {\r\n      this.settings.iconAction(this.control.value);\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  optionSelected(value) {\r\n    if (this.settings.onSelect) this.settings.onSelect(value);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host{\r\n  display: contents;\r\n}\r\n",
                    "styleUrl": "./special-dropdown.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "settings": {
                    "name": "settings",
                    "getSignature": {
                        "name": "settings",
                        "type": "",
                        "returnType": "IDropdownSettings",
                        "line": 13
                    }
                }
            },
            "templateData": "<mat-form-field\r\n  *ngIf=\"control\"\r\n  [id]=\"control.elementId\"\r\n  class=\"w-full {{ control.styleClasses }}\"\r\n  [appearance]=\"control.label ? 'outline' : 'standard'\"\r\n>\r\n  <mat-label *ngIf=\"control.label\">\r\n    {{ control.label }}\r\n  </mat-label>\r\n  <mat-select\r\n    [formControl]=\"control\"\r\n    [required]=\"control.required\"\r\n    (selectionChange)=\"optionSelected($event.value)\"\r\n    [placeholder]=\"control.placeholder\"\r\n  >\r\n    <mat-option *ngIf=\"!control.required\" [value]=\"null\">\r\n      {{ control.placeholder || control.settings.notSelectedText }}\r\n    </mat-option>\r\n    <mat-option\r\n      *ngFor=\"let item of control.settings.source | async\"\r\n      [value]=\"item[control.settings.fieldId]\"\r\n    >\r\n      {{ item | textByFunction: control.settings.fieldName }}\r\n    </mat-option>\r\n  </mat-select>\r\n  <button\r\n    *ngIf=\"settings.icon\"\r\n    mat-icon-button\r\n    matSuffix\r\n    (click)=\"iconClick($event)\"\r\n  >\r\n    <mat-icon>\r\n      {{ settings.icon }}\r\n    </mat-icon>\r\n  </button>\r\n  <mat-icon *ngIf=\"control.icon\" matPrefix>{{ control.icon }}</mat-icon>\r\n  <mat-hint *ngIf=\"control.tooltip\">{{ control.tooltip }}</mat-hint>\r\n  <mat-error>\r\n    {{ control.errors | errorMessage: control.errorMessages }}\r\n  </mat-error>\r\n</mat-form-field>\r\n"
        },
        {
            "name": "SpecialFormComponent",
            "id": "component-SpecialFormComponent-e0d4832891f727c0e89af0118e8d5c2fd87cb101dfaaeba3397e7ea9bece8775b355d7f4e2418067c6d1513efd487279ad43b294c34f97aeb500df96799d086f",
            "file": "projects/special-forms/src/lib/components/special-form/special-form.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sp-form",
            "styleUrls": [
                "./special-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./special-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "SpecialFormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpecialFormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "trackByFn",
                    "args": [
                        {
                            "name": "_index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy } from '@angular/core';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\nimport { SpecialFormGroup } from '../../core/forms/special-forms';\n@Component({\n  selector: 'sp-form',\n  templateUrl: './special-form.component.html',\n  styleUrls: ['./special-form.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SpecialFormComponent implements OnInit {\n  @Input() set control(form: SpecialFormGroup) {\n    this.form = form;\n  }\n\n  form: SpecialFormGroup;\n\n  ngOnInit(): void {}\n\n  get controls(): { name: string; control: AbstractControl }[] {\n    if (!this.form) return [];\n    return Object.entries(this.form.controls).map(([name, control]) => ({\n      name,\n      control,\n    }));\n  }\n\n  trackByFn(\n    _index: number,\n    { name }: { name: string; control: AbstractControl }\n  ) {\n    return name;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host{\r\n  display: contents;\r\n}\r\n",
                    "styleUrl": "./special-form.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "control": {
                    "name": "control",
                    "setSignature": {
                        "name": "control",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "form",
                                "type": "SpecialFormGroup",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 12,
                        "jsdoctags": [
                            {
                                "name": "form",
                                "type": "SpecialFormGroup",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "controls": {
                    "name": "controls",
                    "getSignature": {
                        "name": "controls",
                        "type": "[]",
                        "returnType": "literal type[]",
                        "line": 20
                    }
                }
            },
            "templateData": "<div class=\"w-full box-border p-2\">\n  <div\n    *ngIf=\"form\"\n    [class]=\"\n      form.isChild\n        ? 'w-full mt-2 p-3 border-slate-200 border border-solid box-border'\n        : 'container'\n    \"\n  >\n    <h1 *ngIf=\"!!form.label\" class=\"font-bold py-3\">{{ control.label }}</h1>\n    <div class=\"w-full flex flex-wrap\">\n      <ng-container *ngFor=\"let item of controls;trackBy: trackByFn\">\n        <ng-template controlRender [control]=\"item.control\"></ng-template>\n      </ng-container>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "SpecialInputComponent",
            "id": "component-SpecialInputComponent-075c6c541c6c090ec983a54e98c11debdc9c40b4217fbcce1e6079d20b70a5b02d92a2f75ba313d82065964741b40bd9cdcf275cd7e953eda506ce278fcd0c21",
            "file": "projects/special-forms/src/lib/components/special-input/special-input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sp-input",
            "styleUrls": [
                "./special-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./special-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "SpecialFormControl<IInputSettings>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "iconClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlurAction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEnterClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\nimport { SpecialFormControl } from '../../core/forms/special-forms';\nimport { IInputSettings } from './special-input.interface';\n@Component({\n  selector: 'sp-input',\n  templateUrl: './special-input.component.html',\n  styleUrls: ['./special-input.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SpecialInputComponent implements OnInit {\n  @Input() control: SpecialFormControl<IInputSettings>;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  onEnterClick() {\n    if (this.settings.onEnter) {\n      this.settings.onEnter(this.control.value);\n    }\n  }\n\n  onBlurAction() {\n    if (this.settings.onBlur) {\n      this.settings.onBlur(this.control.value);\n    }\n  }\n\n  get settings(): IInputSettings {\n    return this.control.settings;\n  }\n\n  iconClick(event) {\n    if (this.settings.iconAction) {\n      this.settings.iconAction(this.control.value);\n      event.stopPropagation();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host{\r\n  display: contents;\r\n}\r\n",
                    "styleUrl": "./special-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "settings": {
                    "name": "settings",
                    "getSignature": {
                        "name": "settings",
                        "type": "",
                        "returnType": "IInputSettings",
                        "line": 29
                    }
                }
            },
            "templateData": "<mat-form-field\n  *ngIf=\"control\"\n  [id]=\"control.elementId\"\n  class=\"w-full {{ control.styleClasses }}\"\n  [appearance]=\"control.label ? 'outline' : 'standard'\"\n>\n  <mat-label *ngIf=\"control.label\">{{ control.label }}</mat-label>\n  <input\n    matInput\n    (blur)=\"onBlurAction()\"\n    (keydown.enter)=\"onEnterClick()\"\n    [inputMask]=\"settings?.mask\"\n    autocomplete=\"off\"\n    [type]=\"settings?.type || 'text'\"\n    [readonly]=\"control.readOnly\"\n    [required]=\"control.required\"\n    [placeholder]=\"control.placeholder\"\n    [formControl]=\"control\"\n  />\n  <mat-icon *ngIf=\"control.icon\" matPrefix>{{ control.icon }} </mat-icon>\n  <mat-hint>\n    {{ control.tooltip }}\n  </mat-hint>\n  <button\n    *ngIf=\"settings?.icon\"\n    mat-icon-button\n    matSuffix\n    (click)=\"iconClick($event)\"\n  >\n    <mat-icon>\n      {{ settings.icon }}\n    </mat-icon>\n  </button>\n  <mat-error>\n    {{ control.errors | errorMessage: control.errorMessages }}\n  </mat-error>\n</mat-form-field>\n"
        },
        {
            "name": "SpecialLabelComponent",
            "id": "component-SpecialLabelComponent-cc17b7c144eef101f29a45a013fd0f4a91a100d1bd283c990fda5e74daf57b8e9e02efb3e9a6a4e5713a9a690936dd134e01c90c9db36f1396192ff61d02471e",
            "file": "projects/special-forms/src/lib/components/special-label/special-label.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sp-label",
            "styleUrls": [
                "./special-label.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./special-label.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "SpecialFormControl<ILabelSettings>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLink",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\nimport { SpecialFormControl } from '../../core/forms/special-forms';\nimport { ILabelSettings } from './special-label.interface';\n\n@Component({\n  selector: 'sp-label',\n  templateUrl: './special-label.component.html',\n  styleUrls: ['./special-label.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SpecialLabelComponent implements OnInit {\n  @Input() control: SpecialFormControl<ILabelSettings>;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  get settings(): ILabelSettings {\n    return this.control.settings || { isLink: false };\n  }\n\n  onLink() {\n    if (this.settings.isLink && this.settings.onClickLink) {\n      this.settings.onClickLink(this.control.value);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host{\r\n  display: contents;\r\n}\r\n",
                    "styleUrl": "./special-label.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "settings": {
                    "name": "settings",
                    "getSignature": {
                        "name": "settings",
                        "type": "",
                        "returnType": "ILabelSettings",
                        "line": 18
                    }
                }
            },
            "templateData": "<div class=\"px-2 {{control.styleClasses}} {{ control.value | textByFunction: settings.stylesPipe}}\">\n  <div *ngIf=\"!!control.label\" class=\"font-bold\">{{control.label}}</div>\n  <div [ngClass]=\"{'cursor-pointer text-blue-600 hover:text-blue-700':settings.isLink }\" (click)=\"onLink()\">\n    {{ control.value | textByFunction: control.settings.pipe}}\n  </div>\n</div>\n"
        },
        {
            "name": "SpecialMultipleAutocompleteComponent",
            "id": "component-SpecialMultipleAutocompleteComponent-2f0803b19de46c62acc3935d00d8964d39d7246495866ef782c98f6ada481d35b8d8c57adf976779dce6954dbdf8103e3827eef3b50cfbc7dd70505f792d79a6",
            "file": "projects/special-forms/src/lib/components/special-multiple-autocomplete/special-multiple-autocomplete.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sp-multiple-autocomplete",
            "styleUrls": [
                "./special-multiple-autocomplete.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./special-multiple-autocomplete.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "SpecialFormControl<IMultipleAutocompleteSettings>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configValue",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "internalControl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "subs",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "iconClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "optionSelected",
                    "args": [
                        {
                            "name": "data",
                            "type": "MatAutocompleteSelectedEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "MatAutocompleteSelectedEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "value",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';\r\nimport { Subscription } from 'rxjs';\r\nimport { SpecialFormControl } from '../../core/forms/special-forms';\r\nimport { IMultipleAutocompleteSettings } from './special-multiple-autocomplete.interface';\r\nimport { FormControl } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'sp-multiple-autocomplete',\r\n  templateUrl: './special-multiple-autocomplete.component.html',\r\n  styleUrls: ['./special-multiple-autocomplete.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SpecialMultipleAutocompleteComponent {\r\n  @Input() control: SpecialFormControl<IMultipleAutocompleteSettings>;\r\n\r\n  subs = new Subscription();\r\n  internalControl = new FormControl();\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    this.init();\r\n  }\r\n\r\n  get settings(): IMultipleAutocompleteSettings {\r\n    return this.control.settings;\r\n  }\r\n\r\n  init() {\r\n    this.subs.add(\r\n      this.internalControl.valueChanges\r\n        .pipe(debounceTime(500))\r\n        .subscribe((value) => {\r\n          if (typeof value === 'string') {\r\n            this.control.settings.getData(value, this.control);\r\n          }\r\n        })\r\n    );\r\n  }\r\n\r\n  optionSelected(data: MatAutocompleteSelectedEvent) {\r\n    const newItem = data.option.value;\r\n    this.internalControl.reset();\r\n    this.control.setValue([\r\n      ...(this.control.value || []).filter(\r\n        (item) =>\r\n          item[this.control.settings.fieldId] !==\r\n          newItem[this.control.settings.fieldId]\r\n      ),\r\n      newItem,\r\n    ]);\r\n\r\n    if (this.settings.onSelect) this.settings.onSelect(newItem);\r\n  }\r\n\r\n  iconClick(event) {\r\n    if (this.settings.iconAction) {\r\n      this.settings.iconAction(this.control.value);\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  remove(value: any[]): void {\r\n    let currentValues = Array.from(this.control.value);\r\n    const index = currentValues.indexOf(value);\r\n\r\n    if (index > -1) {\r\n      currentValues.splice(index, 1);\r\n      const value = currentValues;\r\n      this.control.markAsDirty();\r\n      this.control.setValue(value);\r\n    }\r\n  }\r\n\r\n  configValue = (item: any) => {\r\n    if (!item) return '';\r\n    const fieldName = this.control.settings.fieldName;\r\n    return fieldName instanceof Function ? fieldName(item) : item[fieldName];\r\n  };\r\n\r\n  ngOnDestroy() {\r\n    this.subs.unsubscribe();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host{\r\n  display: contents;\r\n}\r\n",
                    "styleUrl": "./special-multiple-autocomplete.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "accessors": {
                "settings": {
                    "name": "settings",
                    "getSignature": {
                        "name": "settings",
                        "type": "",
                        "returnType": "IMultipleAutocompleteSettings",
                        "line": 27
                    }
                }
            },
            "templateData": "<div\r\n  class=\"w-full {{ control.styleClasses }}\"\r\n  *ngIf=\"control && !control.hidden\"\r\n>\r\n  <mat-form-field\r\n    [id]=\"control.elementId\"\r\n    [appearance]=\"control.label ? 'outline' : 'standard'\"\r\n  >\r\n    <mat-label *ngIf=\"control.label\">\r\n      {{ control.label }}\r\n    </mat-label>\r\n    <input\r\n      type=\"text\"\r\n      autocomplete=\"off\"\r\n      [required]=\"control.required && !control.value?.length\"\r\n      [readonly]=\"control.readOnly\"\r\n      [placeholder]=\"control.placeholder\"\r\n      matInput\r\n      [formControl]=\"internalControl\"\r\n      [matAutocomplete]=\"auto\"\r\n    />\r\n    <mat-autocomplete\r\n      class=\"autocomplete-options\"\r\n      #auto=\"matAutocomplete\"\r\n      [displayWith]=\"configValue\"\r\n      (optionSelected)=\"optionSelected($event)\"\r\n    >\r\n      <mat-option\r\n        *ngFor=\"let option of settings?.source | async\"\r\n        [value]=\"option\"\r\n      >\r\n        <div class=\"flex items-center\">\r\n          <img\r\n            *ngIf=\"settings.fieldImage\"\r\n            class=\"w-8 pr-2 object-contain\"\r\n            alt=\"\"\r\n            [src]=\"option | textByFunction: settings.fieldImage\"\r\n          />\r\n          <span>\r\n            {{ option | textByFunction: settings.fieldName }}\r\n          </span>\r\n        </div>\r\n      </mat-option>\r\n    </mat-autocomplete>\r\n    <mat-icon *ngIf=\"control.icon\" matPrefix>{{ control.icon }}</mat-icon>\r\n    <button\r\n      *ngIf=\"settings.icon\"\r\n      mat-icon-button\r\n      matSuffix\r\n      (click)=\"iconClick($event)\"\r\n    >\r\n      <mat-icon>\r\n        {{ settings.icon }}\r\n      </mat-icon>\r\n    </button>\r\n    <mat-hint>{{ control.tooltip }}</mat-hint>\r\n    <mat-error>\r\n      {{ control.errors | errorMessage: control.errorMessages }}\r\n    </mat-error>\r\n  </mat-form-field>\r\n\r\n  <mat-chip-list>\r\n    <mat-chip\r\n      class=\"chip-style\"\r\n      *ngFor=\"let chip of control.value\"\r\n      [removable]=\"true\"\r\n      (removed)=\"remove(chip)\"\r\n    >\r\n      <div class=\"flex items-center\">\r\n        <img\r\n          *ngIf=\"settings.fieldImage\"\r\n          class=\"w-8 pr-2 object-contain\"\r\n          alt=\"\"\r\n          [src]=\"chip | textByFunction: settings.fieldImage\"\r\n        />\r\n        {{ chip | textByFunction: settings.fieldName }}\r\n        <mat-icon matChipRemove>cancel</mat-icon>\r\n      </div>\r\n    </mat-chip>\r\n  </mat-chip-list>\r\n</div>\r\n"
        },
        {
            "name": "SpecialTextAreaComponent",
            "id": "component-SpecialTextAreaComponent-9809a9a23015c54571006d9ace6cb625da9eab71f45ad53f36c270d3262eb106e1621e919e5ed9ef53e3529731398eff8dbcec766b749cf0026ad862d0eba299",
            "file": "projects/special-forms/src/lib/components/special-text-area/special-text-area.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sp-text-area",
            "styleUrls": [
                "./special-text-area.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./special-text-area.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "SpecialFormControl<ITextAreaField>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onEnter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy } from '@angular/core';\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { SpecialFormControl } from '../../core/forms/special-forms';\nimport { ITextAreaField } from './special-text-area.interface';\n@Component({\n  selector: 'sp-text-area',\n  templateUrl: './special-text-area.component.html',\n  styleUrls: ['./special-text-area.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SpecialTextAreaComponent implements OnInit {\n  @Input() control: SpecialFormControl<ITextAreaField>;\n\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\n  @Output() onEnter: EventEmitter<any> = new EventEmitter();\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host{\r\n  display: contents;\r\n}\r\n",
                    "styleUrl": "./special-text-area.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-form-field\n  *ngIf=\"control\"\n  [id]=\"control.elementId\"\n  class=\"w-full {{ control.styleClasses }}\"\n  [appearance]=\"control.label ? 'outline' : 'standard'\"\n>\n  <mat-label *ngIf=\"control.label\">{{ control.label }}</mat-label>\n  <textarea\n    cdkTextareaAutosize\n    #autosize=\"cdkTextareaAutosize\"\n    cdkAutosizeMinRows=\"1\"\n    cdkAutosizeMaxRows=\"5\"\n    matInput\n    (blur)=\"onBlur.emit(control.value)\"\n    (keydown.enter)=\"onEnter.emit(control.value)\"\n    [type]=\"control.settings?.type || 'text'\"\n    [readonly]=\"control.readOnly\"\n    [required]=\"control.required\"\n    [placeholder]=\"control.placeholder\"\n    [formControl]=\"control\"\n  ></textarea>\n  <mat-icon *ngIf=\"control.icon\" matPrefix>{{ control.icon }} </mat-icon>\n  <mat-hint>\n    {{ control.tooltip }}\n  </mat-hint>\n  <mat-error>\n    {{ control.errors | errorMessage: control.errorMessages }}\n  </mat-error>\n</mat-form-field>\n"
        },
        {
            "name": "SpecialUploadComponent",
            "id": "component-SpecialUploadComponent-fb6043e1ac05b8a20b48db215c46b9bdfb8c27c827272a2b1042791964b46350796902f73663001139579327a7bb09e6304f22ff956d0909f3a47d7aa0771efd",
            "file": "projects/special-forms/src/lib/components/special-upload/special-upload.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sp-upload",
            "styleUrls": [
                "./special-upload.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./special-upload.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onSelect",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpecialFormControl<IUploadSettings>",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "previewImages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "clean",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fixFileName",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onRemove",
                    "args": [
                        {
                            "name": "file",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectMultiple",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectOne",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { SpecialFormControl } from '../../core/forms/special-forms';\nimport { IUploadSettings } from './special-upload.interface';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'sp-upload',\n  templateUrl: './special-upload.component.html',\n  styleUrls: ['./special-upload.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SpecialUploadComponent implements OnInit {\n  control: SpecialFormControl<IUploadSettings>;\n\n  @Input('control') set controlSetter(control) {\n    this.control = control;\n    this.previewImages = control.value;\n  }\n\n  @Output() onSelect: EventEmitter<any> = new EventEmitter();\n\n  previewImages = [];\n\n  constructor( private sanitizer: DomSanitizer) {}\n\n  ngOnInit(): void {}\n\n  onSelectMultiple(event) {\n    this.previewImages = [\n      ...this.previewImages,\n      ...event.addedFiles.map(file =>\n      ({\n        lastModified: file.lastModified,\n        url: this.sanitizer.bypassSecurityTrustUrl(URL.createObjectURL(file))\n      }\n      ))\n    ];\n\n    this.control.setValue(\n      [\n        ...this.control.value,\n        ...event.addedFiles.map(this.fixFileName)\n      ]\n    );\n    this.onSelect.emit(this.control.value)\n    this.control.markAsDirty();\n  }\n\n  onSelectOne(event) {\n    this.previewImages = event.addedFiles.map(file =>\n    ({\n      lastModified: file.lastModified,\n      url: this.sanitizer.bypassSecurityTrustUrl(URL.createObjectURL(file))\n    }))\n\n    this.control.setValue(\n      event.addedFiles.map(this.fixFileName)\n    );\n    this.onSelect.emit(this.control.value)\n    this.control.markAsDirty();\n  }\n\n  fixFileName(file: File) {\n    return Object.defineProperty(file, 'name', {\n      writable: true,\n      value: file.name.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")\n    });\n  }\n\n  clean() {\n    this.previewImages = [];\n  }\n  onRemove(file) {\n    this.control.setValue(this.control.value.filter(fl => fl.lastModified !== file.lastModified));\n    this.previewImages = this.previewImages.filter(fl => fl.lastModified !== file.lastModified)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: contents;\r\n  .special-upload {\r\n    margin-bottom: 2rem;\r\n\r\n    &__icon{\r\n      height: 64px;\r\n      width: 64px;\r\n      font-size: 64px;\r\n    }\r\n\r\n    &__card {\r\n      width: 100%;\r\n      height: 100%;\r\n      margin: 0;\r\n      box-sizing: border-box;\r\n      display: flex;\r\n      align-items: center;\r\n      flex-direction: column;\r\n\r\n      &--image {\r\n        width: 100%;\r\n        height: 100%;\r\n        object-fit: cover;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./special-upload.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "controlSetter": {
                    "name": "controlSetter",
                    "setSignature": {
                        "name": "controlSetter",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "control",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "jsdoctags": [
                            {
                                "name": "control",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"special_upload mb-2\">\n  <ngx-dropzone\n    class=\"special_upload__dropzone\"\n    [ngClass]=\"{\n      'special_upload--error-dashed':\n        !!control.errors && (control.dirty || control.touched)\n    }\"\n    [multiple]=\"control.settings?.multiple\"\n    [accept]=\"\n      control.settings?.accept\n        ? control.settings?.accept\n        : 'image/png, .jpeg, .jpg, image/gif'\n    \"\n    (change)=\"\n      control.settings?.multiple\n        ? onSelectMultiple($event)\n        : onSelectOne($event)\n    \"\n  >\n    <ngx-dropzone-label\n      [ngClass]=\"{\n        'special_upload--error':\n          !!control.errors && (control.dirty || control.touched)\n      }\"\n    >\n      <mat-icon class=\"special_upload__icon\"*ngIf=\"control.icon\">{{ control.icon }} </mat-icon>\n      <h2 class=\"text-base font-bold\">\n        {{ control.label }}\n      </h2>\n      <h3 class=\"text-base\">\n        {{ control.placeholder }}\n      </h3>\n    </ngx-dropzone-label>\n    <ngx-dropzone-preview\n      *ngFor=\"let file of previewImages\"\n      [removable]=\"true\"\n      (removed)=\"onRemove(file)\"\n    >\n      <ngx-dropzone-label class=\"special_upload__card\">\n        <img class=\"special_upload__card--image\" [src]=\"file?.url\" alt=\"\" />\n      </ngx-dropzone-label>\n    </ngx-dropzone-preview>\n  </ngx-dropzone>\n  <div\n    class=\"special_upload--error mt-2\"\n    *ngIf=\"!!control.errors && (control.dirty || control.touched)\"\n  >\n    {{ control.errors | errorMessage: control.errorMessages }}\n  </div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "ControlsRenderDirectiveModule",
            "id": "module-ControlsRenderDirectiveModule-60fbde8d0f03c4e3f6649fc64a7c9a615a0432a5c10166ea79c8f4ce0a6205c978ec951741032a589d6fcda955568a72a9acd0d30bcea0a1a468d1c7547f84c3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/special-forms/src/lib/core/directives/control-render.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormControlsRenderDirective } from './control-render.directive';\r\n\r\n@NgModule({\r\n  declarations: [FormControlsRenderDirective],\r\n  imports: [CommonModule],\r\n  exports: [FormControlsRenderDirective],\r\n})\r\nexport class ControlsRenderDirectiveModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormControlsRenderDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FormControlsRenderDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ErrorMessagePipeModule",
            "id": "module-ErrorMessagePipeModule-05a8553f14525d47d5c55f40fc32e82aadaab14fdd280d06bd392cf83bcb0b4336758d4aa991ff4544d53790abdb043d35f4709346a5adf9c038b1d952dea2f2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/special-forms/src/lib/pipes/error-message-pipe/error.pipe.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { ErrorMessagePipe } from \"./error.pipe\";\r\n\r\n@NgModule({\r\n  declarations: [ErrorMessagePipe],\r\n  imports: [\r\n    CommonModule,\r\n\r\n  ],\r\n  exports: [ErrorMessagePipe],\r\n})\r\nexport class ErrorMessagePipeModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ErrorMessagePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ErrorMessagePipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FormControlSelectorModule",
            "id": "module-FormControlSelectorModule-e3dd5e5affb512f145d61a9866bb37a34ba55074fc449a3ae5b4896cd56afdbf93233d49fdc3a08c4f1a3e933c0db6ff91a45d03a1629be2bc27c63a72cfc6a2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/special-forms/src/lib/aux-storybook-components/form-control-selector/form-control-selector.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  SpecialDropdownModule,\r\n  SpecialInputModule,\r\n  SpecialAutocompleteModule,\r\n  SpecialDatepickerModule,\r\n  SpecialMultipleAutocompleteModule,\r\n  SpecialCheckboxModule,\r\n  SpecialTextAreaModule,\r\n  SpecialUploadModule,\r\n  SpecialArrayModule,\r\n  SpecialLabelModule,\r\n} from '../../components';\r\nimport { FormControlSelectorComponent } from './form-control-selector.component';\r\nimport { ControlsRenderDirectiveModule } from '../../core/directives/control-render.module';\r\n\r\n@NgModule({\r\n  declarations: [FormControlSelectorComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ControlsRenderDirectiveModule,\r\n    SpecialMultipleAutocompleteModule,\r\n    SpecialDatepickerModule,\r\n    SpecialInputModule,\r\n    SpecialDropdownModule,\r\n    SpecialAutocompleteModule,\r\n    SpecialCheckboxModule,\r\n    SpecialTextAreaModule,\r\n    SpecialUploadModule,\r\n    SpecialArrayModule,\r\n    SpecialLabelModule\r\n  ],\r\n  exports: [FormControlSelectorComponent],\r\n})\r\nexport class FormControlSelectorModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormControlSelectorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ControlsRenderDirectiveModule"
                        },
                        {
                            "name": "SpecialArrayModule"
                        },
                        {
                            "name": "SpecialAutocompleteModule"
                        },
                        {
                            "name": "SpecialCheckboxModule"
                        },
                        {
                            "name": "SpecialDatepickerModule"
                        },
                        {
                            "name": "SpecialDropdownModule"
                        },
                        {
                            "name": "SpecialInputModule"
                        },
                        {
                            "name": "SpecialLabelModule"
                        },
                        {
                            "name": "SpecialMultipleAutocompleteModule"
                        },
                        {
                            "name": "SpecialTextAreaModule"
                        },
                        {
                            "name": "SpecialUploadModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FormControlSelectorComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FormControlsListPipeModule",
            "id": "module-FormControlsListPipeModule-de7fb2b06a7bfa0d5543f25478958302101357b04e8fb823ba7baba6cfad42d7295cc05f6fb3735e1df6c6429a635c5ad641c6103207b30c4e3de0c18167a9c9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/special-forms/src/lib/pipes/controls-list-pipe/controls-list.pipe.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormControlsListPipe } from './controls-list.pipe';\r\n\r\n@NgModule({\r\n  declarations: [FormControlsListPipe],\r\n  imports: [CommonModule],\r\n  exports: [FormControlsListPipe],\r\n})\r\nexport class FormControlsListPipeModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormControlsListPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FormControlsListPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FormControlViewerModule",
            "id": "module-FormControlViewerModule-aab11bd6340c2e75902e9c32e6337bdbd00d491fd53707c043bb9c3eca6cc498c0946c34da478bcb0acadf78da5fa5543a3aeee8bdcff7493dc3caeafd31b142",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/special-forms/src/lib/aux-storybook-components/form-control-viewer/form-control-viewer.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormControlViewerComponent } from './form-control-viewer.component';\nimport { SpecialFormBuilderService } from '../../core/services';\nimport { FormControlSelectorModule } from '../form-control-selector/form-control-selector.module';\n\n@NgModule({\n  declarations: [FormControlViewerComponent],\n  imports: [\n    CommonModule,\n    FormControlSelectorModule\n  ],\n  exports: [FormControlViewerComponent],\n  providers: [SpecialFormBuilderService],\n})\nexport class FormControlViewerModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "SpecialFormBuilderService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormControlViewerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FormControlSelectorModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FormControlViewerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FormGroupViewerModule",
            "id": "module-FormGroupViewerModule-93c036688b30870e46c5274e875e1c5dfc5d26ad74c90e3705c660023b0a662bb2750cbc4fd2202eb2b287d393dbfd83f03d28f683d444d37ff41ae35a4beb50",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/form-group-viewer.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormGroupViewerComponent } from './form-group-viewer.component';\nimport { SpecialFormBuilderService } from '../../core/services';\nimport { SpecialFormModule } from '../../components/special-form/special-form.module';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { ControlDialogComponent } from './components/control-dialog.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { FormControlSelectorModule } from '../form-control-selector/form-control-selector.module';\n\n@NgModule({\n  declarations: [FormGroupViewerComponent, ControlDialogComponent],\n  imports: [\n    CommonModule,\n    SpecialFormModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatIconModule,\n    FormControlSelectorModule,\n  ],\n  exports: [FormGroupViewerComponent],\n  providers: [SpecialFormBuilderService],\n})\nexport class FormGroupViewerModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "SpecialFormBuilderService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ControlDialogComponent"
                        },
                        {
                            "name": "FormGroupViewerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FormControlSelectorModule"
                        },
                        {
                            "name": "SpecialFormModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FormGroupViewerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpecialArrayModule",
            "id": "module-SpecialArrayModule-f1b512b4696c332923a0e4a3f325cbee990857020e44f0f3fbb21d7f384e4365689ac0768829ed3c8913087e7f300d88b073fd6cf86a70e3c3b638e85fec23fa",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/special-forms/src/lib/components/special-form-array/special-form-array.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { SpecialArrayComponent } from './special-form-array.component';\nimport { FormControlsListPipeModule } from '../../pipes/controls-list-pipe/controls-list.pipe.module';\nimport { ControlsRenderDirectiveModule } from '../../core/directives/control-render.module';\n\n@NgModule({\n  declarations: [SpecialArrayComponent],\n  imports: [\n    CommonModule,\n    FormControlsListPipeModule,\n    MatButtonModule,\n    ControlsRenderDirectiveModule,\n  ],\n  exports: [SpecialArrayComponent],\n})\nexport class SpecialArrayModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SpecialArrayComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ControlsRenderDirectiveModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SpecialArrayComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpecialAutocompleteModule",
            "id": "module-SpecialAutocompleteModule-339ae0476a999d50ed84d6b920221daf925db974032ad248d3be40f6c1459df0864ecb135e22e2d2e89bdbff8727b1e2a9c4ab4538b10af43b046aaa8477fcf5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/special-forms/src/lib/components/special-autocomplete/special-autocomplete.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ErrorMessagePipeModule, TextByFunctionPipeModule } from '../../pipes';\nimport { SpecialAutocompleteComponent } from './special-autocomplete.component';\nimport { MatInputModule } from '@angular/material/input';\n\n@NgModule({\n  declarations: [SpecialAutocompleteComponent],\n  imports: [\n    MatInputModule,\n    CommonModule,\n    MatAutocompleteModule,\n    MatIconModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    ErrorMessagePipeModule,\n    TextByFunctionPipeModule,\n  ],\n  exports: [SpecialAutocompleteComponent],\n})\nexport class SpecialAutocompleteModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SpecialAutocompleteComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SpecialAutocompleteComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpecialCheckboxModule",
            "id": "module-SpecialCheckboxModule-fe055c6985405942327be61f987cbce8bddcfd14bb8c83f5d78eb971947ca08af610a3b550080f31422e6996e7622465e9a3a52e0b03bce3eae16c6075063470",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/special-forms/src/lib/components/special-checkbox/special-checkbox.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SpecialCheckboxComponent } from './special-checkbox.component';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ErrorMessagePipeModule } from '../../pipes';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\n\n@NgModule({\n  declarations: [SpecialCheckboxComponent],\n  imports: [\n    FormsModule,\n    MatCheckboxModule,\n    CommonModule,\n    MatInputModule,\n    MatIconModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    ErrorMessagePipeModule\n  ],\n  exports: [SpecialCheckboxComponent],\n})\nexport class SpecialCheckboxModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SpecialCheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SpecialCheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpecialDatepickerModule",
            "id": "module-SpecialDatepickerModule-647ba6891193c51b3b8348eef7a2158dbc9bb5584cd3ea9f4197f066e849ef8f562bceaf61baa7f043bc6bcd87c069f1057ff78fb6497a16361e2d0753bbfdda",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/special-forms/src/lib/components/special-datepicker/special-datepicker.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SpecialDatepickerComponent } from './special-datepicker.component';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ErrorMessagePipeModule } from '../../pipes';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\n\n@NgModule({\n  declarations: [SpecialDatepickerComponent],\n  imports: [\n    MatInputModule,\n    MatDatepickerModule,\n    CommonModule,\n    MatIconModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    ErrorMessagePipeModule,\n    MatNativeDateModule\n  ],\n  exports: [SpecialDatepickerComponent],\n})\nexport class SpecialDatepickerModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SpecialDatepickerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SpecialDatepickerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpecialDropdownModule",
            "id": "module-SpecialDropdownModule-2610e179f944f097a648931f25d2a509c01581afc9729eaa82020bfbcbf70a959e96dec7e8d10b5ec9f5e38d517b2eb5257a608738dc98575ca91d58cae285a8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SpecialDropdownComponent } from './special-dropdown.component';\nimport { MatSelectModule } from '@angular/material/select';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ErrorMessagePipeModule, TextByFunctionPipeModule } from '../../pipes';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\n@NgModule({\n  declarations: [SpecialDropdownComponent],\n  imports: [\n    CommonModule,\n    MatSelectModule,\n    ReactiveFormsModule,\n    ErrorMessagePipeModule,\n    MatIconModule,\n    MatButtonModule,\n    TextByFunctionPipeModule\n  ],\n  exports: [SpecialDropdownComponent],\n})\nexport class SpecialDropdownModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SpecialDropdownComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SpecialDropdownComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpecialFormModule",
            "id": "module-SpecialFormModule-2070b54931f6de0c2442bf19e2d180e7712cf6912b988489c388c5ae2ddcdf91ed43b23dda75a49883736e252fa32e355a6923c92887a21f6c29c9a4716e51e0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/special-forms/src/lib/components/special-form/special-form.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SpecialFormComponent } from './special-form.component';\nimport { MatButtonModule } from '@angular/material/button';\nimport { FormControlsListPipeModule } from '../../pipes/controls-list-pipe/controls-list.pipe.module';\nimport { ControlsRenderDirectiveModule } from '../../core/directives/control-render.module';\nimport {\n  SpecialDropdownModule,\n  SpecialInputModule,\n  SpecialAutocompleteModule,\n  SpecialDatepickerModule,\n  SpecialMultipleAutocompleteModule,\n  SpecialCheckboxModule,\n  SpecialTextAreaModule,\n  SpecialUploadModule,\n  SpecialArrayModule,\n  SpecialLabelModule\n} from '../../components';\n\n@NgModule({\n  declarations: [SpecialFormComponent],\n  imports: [\n    CommonModule,\n    ControlsRenderDirectiveModule,\n    FormControlsListPipeModule,\n    MatButtonModule,\n    SpecialDropdownModule,\n    SpecialInputModule,\n    SpecialAutocompleteModule,\n    SpecialDatepickerModule,\n    SpecialLabelModule,\n    SpecialMultipleAutocompleteModule,\n    SpecialCheckboxModule,\n    SpecialTextAreaModule,\n    SpecialUploadModule,\n    SpecialArrayModule,\n  ],\n  exports: [SpecialFormComponent],\n})\nexport class SpecialFormModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SpecialFormComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ControlsRenderDirectiveModule"
                        },
                        {
                            "name": "SpecialArrayModule"
                        },
                        {
                            "name": "SpecialAutocompleteModule"
                        },
                        {
                            "name": "SpecialCheckboxModule"
                        },
                        {
                            "name": "SpecialDatepickerModule"
                        },
                        {
                            "name": "SpecialDropdownModule"
                        },
                        {
                            "name": "SpecialInputModule"
                        },
                        {
                            "name": "SpecialLabelModule"
                        },
                        {
                            "name": "SpecialMultipleAutocompleteModule"
                        },
                        {
                            "name": "SpecialTextAreaModule"
                        },
                        {
                            "name": "SpecialUploadModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SpecialFormComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpecialInputModule",
            "id": "module-SpecialInputModule-512bbec5678f0b3b7a10ac12bc0d60b1dc694581cde544d8884a8d3e9785a37aa0d46f47e98f9304628a9afceb55fb4e9364c51363ac6932cc1159659fd521e3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/special-forms/src/lib/components/special-input/special-input.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SpecialInputComponent } from './special-input.component';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { InputMaskModule } from \"@ngneat/input-mask\";\nimport { MatIconModule } from '@angular/material/icon';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ErrorMessagePipeModule } from '../../pipes';\n\n@NgModule({\n  declarations: [SpecialInputComponent],\n  imports: [\n    InputMaskModule,\n    CommonModule,\n    MatInputModule,\n    MatIconModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    ErrorMessagePipeModule\n  ],\n  exports: [SpecialInputComponent],\n})\nexport class SpecialInputModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SpecialInputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SpecialInputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpecialLabelModule",
            "id": "module-SpecialLabelModule-e7bcb2da5ab6b83fc634a48c9ea176c60cfefcd51f7f69a3d19607132373df4a646d69d2056ac40947507efe24457926e00900d41bb738112505b2e1b6e28dc4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/special-forms/src/lib/components/special-label/special-label.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SpecialLabelComponent } from './special-label.component';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { InputMaskModule } from \"@ngneat/input-mask\";\nimport { MatIconModule } from '@angular/material/icon';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ErrorMessagePipeModule, TextByFunctionPipeModule } from '../../pipes';\n\n@NgModule({\n  declarations: [SpecialLabelComponent],\n  imports: [\n    InputMaskModule,\n    CommonModule,\n    MatInputModule,\n    MatIconModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    TextByFunctionPipeModule,\n    ErrorMessagePipeModule\n  ],\n  exports: [SpecialLabelComponent],\n})\nexport class SpecialLabelModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SpecialLabelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SpecialLabelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpecialMultipleAutocompleteModule",
            "id": "module-SpecialMultipleAutocompleteModule-549f733192c3963e943f7c12e9eaf03cbdb030913c4963178c6bc987f223c5a3c1454c06eeab8c58bdb10f7b9078db31bee1d3523667c33e369e0c79faf392da",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/special-forms/src/lib/components/special-multiple-autocomplete/special-multiple-autocomplete.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ErrorMessagePipeModule, TextByFunctionPipeModule } from '../../pipes';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { SpecialMultipleAutocompleteComponent } from './special-multiple-autocomplete.component';\n\n@NgModule({\n  declarations: [SpecialMultipleAutocompleteComponent],\n  imports: [\n    MatInputModule,\n    CommonModule,\n    MatAutocompleteModule,\n    MatIconModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    ErrorMessagePipeModule,\n    TextByFunctionPipeModule,\n    MatChipsModule,\n\n  ],\n  exports: [SpecialMultipleAutocompleteComponent],\n})\nexport class SpecialMultipleAutocompleteModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SpecialMultipleAutocompleteComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SpecialMultipleAutocompleteComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpecialTextAreaModule",
            "id": "module-SpecialTextAreaModule-3df937ed61853a69398727f7215ec6532e98c76dd30950ba5ec12c5d9a37ffde9ad49067a095c138efacb623c1a8c6b585da43218585c9825888f788d94367ae",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/special-forms/src/lib/components/special-text-area/special-text-area.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SpecialTextAreaComponent } from './special-text-area.component';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { InputMaskModule } from '@ngneat/input-mask';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ErrorMessagePipeModule } from '../../pipes';\n\n@NgModule({\n  declarations: [SpecialTextAreaComponent],\n  imports: [\n    InputMaskModule,\n    CommonModule,\n    MatInputModule,\n    MatIconModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    ErrorMessagePipeModule,\n  ],\n  exports: [SpecialTextAreaComponent],\n})\nexport class SpecialTextAreaModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SpecialTextAreaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SpecialTextAreaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpecialUploadModule",
            "id": "module-SpecialUploadModule-7f8336f06f6c07572707fedd740e4a302f200884069bb32ad806a520b7450a4652a34b93bb11acff4b7b136571d773abd2f9c0c3ed0514d3198b4ba0198b3cce",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/special-forms/src/lib/components/special-upload/special-upload.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SpecialUploadComponent } from './special-upload.component';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ErrorMessagePipeModule } from '../../pipes';\nimport { NgxDropzoneModule } from 'ngx-dropzone';\n\n@NgModule({\n  declarations: [SpecialUploadComponent],\n  imports: [\n    FormsModule,\n    NgxDropzoneModule,\n    CommonModule,\n    MatIconModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    ErrorMessagePipeModule\n  ],\n  exports: [SpecialUploadComponent],\n})\nexport class SpecialUploadModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SpecialUploadComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SpecialUploadComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TextByFunctionPipeModule",
            "id": "module-TextByFunctionPipeModule-4372e6ef4f94b4c0d602d22d3b99a13882b3311d3d10e0fd45eb852a36803a3d36c5066c8dcc7f988da6dfa6095b1f7ca7b13314d39607b0019f3c4027b8abf4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/special-forms/src/lib/pipes/text-by-function/text-by-function.pipe.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { TextByFunctionPipe } from \"./text-by-function.pipe\";\r\n\r\n@NgModule({\r\n  declarations: [TextByFunctionPipe],\r\n  imports: [\r\n    CommonModule,\r\n\r\n  ],\r\n  exports: [TextByFunctionPipe],\r\n})\r\nexport class TextByFunctionPipeModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TextByFunctionPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TextByFunctionPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "countries",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/core/aux-data/countries.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => of([\r\n  { name: 'Afghanistan', code: 'AF' },\r\n  { name: 'Åland Islands', code: 'AX' },\r\n  { name: 'Albania', code: 'AL' },\r\n  { name: 'Algeria', code: 'DZ' },\r\n  { name: 'American Samoa', code: 'AS' },\r\n  { name: 'AndorrA', code: 'AD' },\r\n  { name: 'Angola', code: 'AO' },\r\n  { name: 'Anguilla', code: 'AI' },\r\n  { name: 'Antarctica', code: 'AQ' },\r\n  { name: 'Antigua and Barbuda', code: 'AG' },\r\n  { name: 'Argentina', code: 'AR' },\r\n  { name: 'Armenia', code: 'AM' },\r\n  { name: 'Aruba', code: 'AW' },\r\n  { name: 'Australia', code: 'AU' },\r\n  { name: 'Austria', code: 'AT' },\r\n  { name: 'Azerbaijan', code: 'AZ' },\r\n  { name: 'Bahamas', code: 'BS' },\r\n  { name: 'Bahrain', code: 'BH' },\r\n  { name: 'Bangladesh', code: 'BD' },\r\n  { name: 'Barbados', code: 'BB' },\r\n  { name: 'Belarus', code: 'BY' },\r\n  { name: 'Belgium', code: 'BE' },\r\n  { name: 'Belize', code: 'BZ' },\r\n  { name: 'Benin', code: 'BJ' },\r\n  { name: 'Bermuda', code: 'BM' },\r\n  { name: 'Bhutan', code: 'BT' },\r\n  { name: 'Bolivia', code: 'BO' },\r\n  { name: 'Bosnia and Herzegovina', code: 'BA' },\r\n  { name: 'Botswana', code: 'BW' },\r\n  { name: 'Bouvet Island', code: 'BV' },\r\n  { name: 'Brazil', code: 'BR' },\r\n  { name: 'British Indian Ocean Territory', code: 'IO' },\r\n  { name: 'Brunei Darussalam', code: 'BN' },\r\n  { name: 'Bulgaria', code: 'BG' },\r\n  { name: 'Burkina Faso', code: 'BF' },\r\n  { name: 'Burundi', code: 'BI' },\r\n  { name: 'Cambodia', code: 'KH' },\r\n  { name: 'Cameroon', code: 'CM' },\r\n  { name: 'Canada', code: 'CA' },\r\n  { name: 'Cape Verde', code: 'CV' },\r\n  { name: 'Cayman Islands', code: 'KY' },\r\n  { name: 'Central African Republic', code: 'CF' },\r\n  { name: 'Chad', code: 'TD' },\r\n  { name: 'Chile', code: 'CL' },\r\n  { name: 'China', code: 'CN' },\r\n  { name: 'Christmas Island', code: 'CX' },\r\n  { name: 'Cocos (Keeling) Islands', code: 'CC' },\r\n  { name: 'Colombia', code: 'CO' },\r\n  { name: 'Comoros', code: 'KM' },\r\n  { name: 'Congo', code: 'CG' },\r\n  { name: 'Congo, The Democratic Republic of the', code: 'CD' },\r\n  { name: 'Cook Islands', code: 'CK' },\r\n  { name: 'Costa Rica', code: 'CR' },\r\n  { name: \"Cote D'Ivoire\", code: 'CI' },\r\n  { name: 'Croatia', code: 'HR' },\r\n  { name: 'Cuba', code: 'CU' },\r\n  { name: 'Cyprus', code: 'CY' },\r\n  { name: 'Czech Republic', code: 'CZ' },\r\n  { name: 'Denmark', code: 'DK' },\r\n  { name: 'Djibouti', code: 'DJ' },\r\n  { name: 'Dominica', code: 'DM' },\r\n  { name: 'Dominican Republic', code: 'DO' },\r\n  { name: 'Ecuador', code: 'EC' },\r\n  { name: 'Egypt', code: 'EG' },\r\n  { name: 'El Salvador', code: 'SV' },\r\n  { name: 'Equatorial Guinea', code: 'GQ' },\r\n  { name: 'Eritrea', code: 'ER' },\r\n  { name: 'Estonia', code: 'EE' },\r\n  { name: 'Ethiopia', code: 'ET' },\r\n  { name: 'Falkland Islands (Malvinas)', code: 'FK' },\r\n  { name: 'Faroe Islands', code: 'FO' },\r\n  { name: 'Fiji', code: 'FJ' },\r\n  { name: 'Finland', code: 'FI' },\r\n  { name: 'France', code: 'FR' },\r\n  { name: 'French Guiana', code: 'GF' },\r\n  { name: 'French Polynesia', code: 'PF' },\r\n  { name: 'French Southern Territories', code: 'TF' },\r\n  { name: 'Gabon', code: 'GA' },\r\n  { name: 'Gambia', code: 'GM' },\r\n  { name: 'Georgia', code: 'GE' },\r\n  { name: 'Germany', code: 'DE' },\r\n  { name: 'Ghana', code: 'GH' },\r\n  { name: 'Gibraltar', code: 'GI' },\r\n  { name: 'Greece', code: 'GR' },\r\n  { name: 'Greenland', code: 'GL' },\r\n  { name: 'Grenada', code: 'GD' },\r\n  { name: 'Guadeloupe', code: 'GP' },\r\n  { name: 'Guam', code: 'GU' },\r\n  { name: 'Guatemala', code: 'GT' },\r\n  { name: 'Guernsey', code: 'GG' },\r\n  { name: 'Guinea', code: 'GN' },\r\n  { name: 'Guinea-Bissau', code: 'GW' },\r\n  { name: 'Guyana', code: 'GY' },\r\n  { name: 'Haiti', code: 'HT' },\r\n  { name: 'Heard Island and Mcdonald Islands', code: 'HM' },\r\n  { name: 'Holy See (Vatican City State)', code: 'VA' },\r\n  { name: 'Honduras', code: 'HN' },\r\n  { name: 'Hong Kong', code: 'HK' },\r\n  { name: 'Hungary', code: 'HU' },\r\n  { name: 'Iceland', code: 'IS' },\r\n  { name: 'India', code: 'IN' },\r\n  { name: 'Indonesia', code: 'ID' },\r\n  { name: 'Iran, Islamic Republic Of', code: 'IR' },\r\n  { name: 'Iraq', code: 'IQ' },\r\n  { name: 'Ireland', code: 'IE' },\r\n  { name: 'Isle of Man', code: 'IM' },\r\n  { name: 'Israel', code: 'IL' },\r\n  { name: 'Italy', code: 'IT' },\r\n  { name: 'Jamaica', code: 'JM' },\r\n  { name: 'Japan', code: 'JP' },\r\n  { name: 'Jersey', code: 'JE' },\r\n  { name: 'Jordan', code: 'JO' },\r\n  { name: 'Kazakhstan', code: 'KZ' },\r\n  { name: 'Kenya', code: 'KE' },\r\n  { name: 'Kiribati', code: 'KI' },\r\n  { name: \"Korea, Democratic People'S Republic of\", code: 'KP' },\r\n  { name: 'Korea, Republic of', code: 'KR' },\r\n  { name: 'Kuwait', code: 'KW' },\r\n  { name: 'Kyrgyzstan', code: 'KG' },\r\n  { name: \"Lao People'S Democratic Republic\", code: 'LA' },\r\n  { name: 'Latvia', code: 'LV' },\r\n  { name: 'Lebanon', code: 'LB' },\r\n  { name: 'Lesotho', code: 'LS' },\r\n  { name: 'Liberia', code: 'LR' },\r\n  { name: 'Libyan Arab Jamahiriya', code: 'LY' },\r\n  { name: 'Liechtenstein', code: 'LI' },\r\n  { name: 'Lithuania', code: 'LT' },\r\n  { name: 'Luxembourg', code: 'LU' },\r\n  { name: 'Macao', code: 'MO' },\r\n  { name: 'Macedonia, The Former Yugoslav Republic of', code: 'MK' },\r\n  { name: 'Madagascar', code: 'MG' },\r\n  { name: 'Malawi', code: 'MW' },\r\n  { name: 'Malaysia', code: 'MY' },\r\n  { name: 'Maldives', code: 'MV' },\r\n  { name: 'Mali', code: 'ML' },\r\n  { name: 'Malta', code: 'MT' },\r\n  { name: 'Marshall Islands', code: 'MH' },\r\n  { name: 'Martinique', code: 'MQ' },\r\n  { name: 'Mauritania', code: 'MR' },\r\n  { name: 'Mauritius', code: 'MU' },\r\n  { name: 'Mayotte', code: 'YT' },\r\n  { name: 'Mexico', code: 'MX' },\r\n  { name: 'Micronesia, Federated States of', code: 'FM' },\r\n  { name: 'Moldova, Republic of', code: 'MD' },\r\n  { name: 'Monaco', code: 'MC' },\r\n  { name: 'Mongolia', code: 'MN' },\r\n  { name: 'Montserrat', code: 'MS' },\r\n  { name: 'Morocco', code: 'MA' },\r\n  { name: 'Mozambique', code: 'MZ' },\r\n  { name: 'Myanmar', code: 'MM' },\r\n  { name: 'Namibia', code: 'NA' },\r\n  { name: 'Nauru', code: 'NR' },\r\n  { name: 'Nepal', code: 'NP' },\r\n  { name: 'Netherlands', code: 'NL' },\r\n  { name: 'Netherlands Antilles', code: 'AN' },\r\n  { name: 'New Caledonia', code: 'NC' },\r\n  { name: 'New Zealand', code: 'NZ' },\r\n  { name: 'Nicaragua', code: 'NI' },\r\n  { name: 'Niger', code: 'NE' },\r\n  { name: 'Nigeria', code: 'NG' },\r\n  { name: 'Niue', code: 'NU' },\r\n  { name: 'Norfolk Island', code: 'NF' },\r\n  { name: 'Northern Mariana Islands', code: 'MP' },\r\n  { name: 'Norway', code: 'NO' },\r\n  { name: 'Oman', code: 'OM' },\r\n  { name: 'Pakistan', code: 'PK' },\r\n  { name: 'Palau', code: 'PW' },\r\n  { name: 'Palestinian Territory, Occupied', code: 'PS' },\r\n  { name: 'Panama', code: 'PA' },\r\n  { name: 'Papua New Guinea', code: 'PG' },\r\n  { name: 'Paraguay', code: 'PY' },\r\n  { name: 'Peru', code: 'PE' },\r\n  { name: 'Philippines', code: 'PH' },\r\n  { name: 'Pitcairn', code: 'PN' },\r\n  { name: 'Poland', code: 'PL' },\r\n  { name: 'Portugal', code: 'PT' },\r\n  { name: 'Puerto Rico', code: 'PR' },\r\n  { name: 'Qatar', code: 'QA' },\r\n  { name: 'Reunion', code: 'RE' },\r\n  { name: 'Romania', code: 'RO' },\r\n  { name: 'Russian Federation', code: 'RU' },\r\n  { name: 'RWANDA', code: 'RW' },\r\n  { name: 'Saint Helena', code: 'SH' },\r\n  { name: 'Saint Kitts and Nevis', code: 'KN' },\r\n  { name: 'Saint Lucia', code: 'LC' },\r\n  { name: 'Saint Pierre and Miquelon', code: 'PM' },\r\n  { name: 'Saint Vincent and the Grenadines', code: 'VC' },\r\n  { name: 'Samoa', code: 'WS' },\r\n  { name: 'San Marino', code: 'SM' },\r\n  { name: 'Sao Tome and Principe', code: 'ST' },\r\n  { name: 'Saudi Arabia', code: 'SA' },\r\n  { name: 'Senegal', code: 'SN' },\r\n  { name: 'Serbia and Montenegro', code: 'CS' },\r\n  { name: 'Seychelles', code: 'SC' },\r\n  { name: 'Sierra Leone', code: 'SL' },\r\n  { name: 'Singapore', code: 'SG' },\r\n  { name: 'Slovakia', code: 'SK' },\r\n  { name: 'Slovenia', code: 'SI' },\r\n  { name: 'Solomon Islands', code: 'SB' },\r\n  { name: 'Somalia', code: 'SO' },\r\n  { name: 'South Africa', code: 'ZA' },\r\n  { name: 'South Georgia and the South Sandwich Islands', code: 'GS' },\r\n  { name: 'Spain', code: 'ES' },\r\n  { name: 'Sri Lanka', code: 'LK' },\r\n  { name: 'Sudan', code: 'SD' },\r\n  { name: 'Suriname', code: 'SR' },\r\n  { name: 'Svalbard and Jan Mayen', code: 'SJ' },\r\n  { name: 'Swaziland', code: 'SZ' },\r\n  { name: 'Sweden', code: 'SE' },\r\n  { name: 'Switzerland', code: 'CH' },\r\n  { name: 'Syrian Arab Republic', code: 'SY' },\r\n  { name: 'Taiwan, Province of China', code: 'TW' },\r\n  { name: 'Tajikistan', code: 'TJ' },\r\n  { name: 'Tanzania, United Republic of', code: 'TZ' },\r\n  { name: 'Thailand', code: 'TH' },\r\n  { name: 'Timor-Leste', code: 'TL' },\r\n  { name: 'Togo', code: 'TG' },\r\n  { name: 'Tokelau', code: 'TK' },\r\n  { name: 'Tonga', code: 'TO' },\r\n  { name: 'Trinidad and Tobago', code: 'TT' },\r\n  { name: 'Tunisia', code: 'TN' },\r\n  { name: 'Turkey', code: 'TR' },\r\n  { name: 'Turkmenistan', code: 'TM' },\r\n  { name: 'Turks and Caicos Islands', code: 'TC' },\r\n  { name: 'Tuvalu', code: 'TV' },\r\n  { name: 'Uganda', code: 'UG' },\r\n  { name: 'Ukraine', code: 'UA' },\r\n  { name: 'United Arab Emirates', code: 'AE' },\r\n  { name: 'United Kingdom', code: 'GB' },\r\n  { name: 'United States', code: 'US' },\r\n  { name: 'United States Minor Outlying Islands', code: 'UM' },\r\n  { name: 'Uruguay', code: 'UY' },\r\n  { name: 'Uzbekistan', code: 'UZ' },\r\n  { name: 'Vanuatu', code: 'VU' },\r\n  { name: 'Venezuela', code: 'VE' },\r\n  { name: 'Viet Nam', code: 'VN' },\r\n  { name: 'Virgin Islands, British', code: 'VG' },\r\n  { name: 'Virgin Islands, U.S.', code: 'VI' },\r\n  { name: 'Wallis and Futuna', code: 'WF' },\r\n  { name: 'Western Sahara', code: 'EH' },\r\n  { name: 'Yemen', code: 'YE' },\r\n  { name: 'Zambia', code: 'ZM' },\r\n  { name: 'Zimbabwe', code: 'ZW' },\r\n])"
            },
            {
                "name": "currencyInputMask",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/core/masks/currency.mask.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createMask({\r\n  alias: 'numeric',\r\n  groupSeparator: ',',\r\n  autoUnmask: true,\r\n  digits: 2,\r\n  digitsOptional: false,\r\n  prefix: '$ ',\r\n  placeholder: '0',\r\n})"
            },
            {
                "name": "dark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-checkbox/special-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "dark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-autocomplete/special-autocomplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "dark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-datepicker/special-datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "dark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "dark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-form/special-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "dark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-input/special-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "dark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-label/special-label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "dark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-multiple-autocomplete/special-multiple-autocomplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "dark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-text-area/special-text-area.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "dark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-upload/special-upload.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "EnumToArray",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/core/utils/enum-to-array.util.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(enu: any) => {\r\n  return Object.keys(enu).map((key) => ({\r\n    id: key,\r\n    value: enu[key],\r\n  }));\r\n}"
            },
            {
                "name": "FieldBasicData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/core/aux-data/field-basic-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  placeholder: 'Placeholder',\r\n  label: 'Label',\r\n  tooltip: 'Tooltip',\r\n  icon: 'accessible',\r\n  elementId: 'Element-id',\r\n  styleClasses: '',\r\n  length: 0,\r\n  required: true,\r\n  readOnly: false,\r\n  errorMessages: {},\r\n  asyncValidators: null,\r\n  validators: null,\r\n}"
            },
            {
                "name": "ICON_NAMES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/core/aux-data/all-icons.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\"\",\"360\", \"svg_anchor\",\"svg_push_pin\",\"3d_rotation\", \"4k\", \"ac_unit\", \"access_alarm\", \"access_alarms\", \"access_time\", \"accessibility\",\r\n        \"accessibility_new\", \"accessible\", \"accessible_forward\", \"account_balance\", \"account_balance_wallet\", \"account_box\",\r\n        \"account_circle\", \"account_tree\", \"adb\", \"add\", \"add_a_photo\", \"add_alarm\", \"add_alert\", \"add_box\", \"add_circle\", \"add_circle_outline\",\r\n        \"add_comment\", \"add_ic_call\", \"add_location\", \"add_photo_alternate\", \"add_shopping_cart\", \"add_to_home_screen\", \"add_to_photos\",\r\n        \"add_to_queue\", \"adjust\", \"airline_seat_flat\", \"airline_seat_flat_angled\", \"airline_seat_individual_suite\", \"airline_seat_legroom_extra\",\r\n        \"airline_seat_legroom_normal\", \"airline_seat_legroom_reduced\", \"airline_seat_recline_extra\", \"airline_seat_recline_normal\",\r\n        \"airplanemode_active\", \"airplanemode_inactive\", \"airplay\", \"airport_shuttle\", \"alarm\", \"alarm_add\", \"alarm_off\", \"alarm_on\",\r\n        \"album\", \"all_inbox\", \"all_inclusive\", \"all_out\", \"alternate_email\", \"amp_stories\", \"android\", \"announcement\", \"apartment\", \"apps\",\r\n        \"archive\", \"arrow_back\", \"arrow_back_ios\", \"arrow_downward\", \"arrow_drop_down\", \"arrow_drop_down_circle\", \"arrow_drop_up\", \"arrow_forward\",\r\n        \"arrow_forward_ios\", \"arrow_left\", \"arrow_right\", \"arrow_right_alt\", \"arrow_upward\", \"art_track\", \"aspect_ratio\", \"assessment\", \"assignment\",\r\n        \"assignment_ind\", \"assignment_late\", \"assignment_return\", \"assignment_returned\", \"assignment_turned_in\", \"assistant\", \"assistant_photo\", \"atm\", \"attach_file\",\r\n        \"attach_money\", \"attachment\", \"audiotrack\", \"autorenew\", \"av_timer\", \"backspace\", \"backup\", \"ballot\", \"bar_chart\", \"bathtub\",\r\n        \"battery_alert\", \"battery_charging_full\", \"svg_miscellaneous_services\",\"svg_construction\",\"battery_full\", \"battery_std\", \"battery_unknown\", \"beach_access\", \"beenhere\", \"block\",\r\n        \"bluetooth\", \"bluetooth_audio\", \"bluetooth_connected\", \"bluetooth_disabled\", \"bluetooth_searching\", \"blur_circular\", \"blur_linear\",\r\n        \"blur_off\", \"blur_on\", \"book\", \"bookmark\", \"bookmark_border\", \"bookmarks\", \"border_all\", \"border_bottom\", \"border_clear\", \"border_horizontal\",\r\n        \"border_inner\", \"border_left\", \"border_outer\", \"border_right\", \"border_style\", \"border_top\", \"border_vertical\", \"branding_watermark\",\r\n        \"brightness_1\", \"brightness_2\", \"brightness_3\", \"brightness_4\", \"brightness_5\", \"brightness_6\", \"brightness_7\", \"brightness_auto\",\r\n        \"brightness_high\", \"brightness_low\", \"brightness_medium\", \"broken_image\", \"brush\", \"bubble_chart\", \"bug_report\", \"build\", \"burst_mode\",\r\n        \"business\", \"business_center\", \"cached\", \"cake\", \"calendar_today\", \"calendar_view_day\", \"call\", \"call_end\", \"call_made\", \"call_merge\",\r\n        \"call_missed\", \"call_missed_outgoing\", \"call_received\", \"call_split\", \"call_to_action\", \"camera\", \"camera_alt\", \"camera_enhance\",\r\n        \"camera_front\", \"camera_rear\", \"camera_roll\", \"cancel\", \"cancel_presentation\", \"cancel_schedule_send\", \"card_giftcard\", \"card_membership\",\r\n        \"card_travel\", \"casino\", \"cast\", \"cast_connected\", \"category\", \"center_focus_strong\", \"center_focus_weak\", \"change_history\", \"chat\", \"chat_bubble\",\r\n        \"chat_bubble_outline\", \"check\", \"check_box\", \"check_box_outline_blank\", \"check_circle\", \"check_circle_outline\", \"chevron_left\", \"chevron_right\",\r\n        \"child_care\", \"child_friendly\", \"chrome_reader_mode\", \"class\", \"clear\", \"clear_all\", \"close\", \"closed_caption\", \"cloud\", \"cloud_circle\", \"cloud_done\",\r\n        \"cloud_download\", \"cloud_off\", \"cloud_queue\", \"cloud_upload\", \"code\", \"collections\", \"collections_bookmark\", \"color_lens\", \"colorize\", \"comment\", \"commute\",\r\n        \"compare\", \"compare_arrows\", \"compass_calibration\", \"computer\", \"confirmation_number\", \"contact_mail\", \"contact_phone\", \"contact_support\", \"contactless\",\r\n        \"contacts\", \"control_camera\", \"control_point\", \"control_point_duplicate\", \"copyright\", \"create\", \"create_new_folder\", \"credit_card\", \"crop\", \"crop_16_9\",\r\n        \"crop_3_2\", \"crop_5_4\", \"crop_7_5\", \"crop_din\", \"crop_free\", \"crop_landscape\", \"crop_original\", \"crop_portrait\", \"crop_rotate\", \"crop_square\", \"dashboard\", \"data_usage\",\r\n        \"date_range\", \"deck\", \"dehaze\", \"delete\", \"delete_forever\", \"delete_outline\", \"delete_sweep\", \"departure_board\", \"description\", \"desktop_access_disabled\",\r\n        \"desktop_mac\", \"desktop_windows\", \"details\", \"developer_board\", \"developer_mode\", \"device_hub\", \"device_unknown\", \"devices\", \"devices_other\", \"dialer_sip\",\r\n        \"dialpad\", \"directions\", \"directions_bike\", \"directions_boat\", \"directions_bus\", \"directions_car\", \"directions_railway\", \"directions_run\", \"directions_subway\",\r\n        \"directions_transit\", \"directions_walk\", \"disc_full\", \"dns\", \"dock\", \"domain\", \"domain_disabled\", \"done\", \"done_all\", \"done_outline\", \"donut_large\", \"donut_small\", \"double_arrow\", \"drafts\", \"drag_handle\", \"drag_indicator\", \"drive_eta\", \"duo\", \"dvr\", \"dynamic_feed\", \"eco\", \"edit\", \"edit_attributes\", \"edit_location\", \"eject\", \"email\", \"emoji_emotions\", \"emoji_events\", \"emoji_flags\", \"emoji_food_beverage\", \"emoji_nature\", \"emoji_objects\", \"emoji_people\", \"emoji_symbols\", \"emoji_transportation\", \"enhanced_encryption\", \"equalizer\", \"error\", \"error_outline\", \"euro\", \"euro_symbol\", \"ev_station\", \"event\", \"event_available\", \"event_busy\", \"event_note\", \"event_seat\", \"exit_to_app\", \"expand_less\", \"expand_more\", \"explicit\", \"explore\", \"explore_off\", \"exposure\", \"exposure_neg_1\", \"exposure_neg_2\", \"exposure_plus_1\", \"exposure_plus_2\", \"exposure_zero\", \"extension\", \"face\", \"fast_forward\", \"fast_rewind\", \"fastfood\",\r\n        \"favorite\", \"favorite_border\", \"featured_play_list\", \"featured_video\", \"feedback\", \"fiber_dvr\", \"fiber_manual_record\", \"fiber_new\", \"fiber_pin\", \"fiber_smart_record\", \"file_copy\", \"filter\", \"filter_1\", \"filter_2\", \"filter_3\", \"filter_4\", \"filter_5\", \"filter_6\", \"filter_7\", \"filter_8\", \"filter_9\", \"filter_9_plus\", \"filter_b_and_w\", \"filter_center_focus\", \"filter_drama\", \"filter_frames\", \"filter_hdr\", \"filter_list\", \"filter_none\", \"filter_tilt_shift\", \"filter_vintage\", \"find_in_page\", \"find_replace\", \"fingerprint\", \"fireplace\", \"first_page\", \"fitness_center\", \"flag\", \"flare\", \"flash_auto\", \"flash_off\", \"flash_on\", \"flight\", \"flight_land\", \"flight_takeoff\", \"flip\", \"flip_camera_android\", \"flip_camera_ios\", \"flip_to_back\", \"flip_to_front\", \"folder\", \"folder_open\", \"folder_shared\", \"folder_special\", \"font_download\", \"format_align_center\", \"format_align_justify\", \"format_align_left\", \"format_align_right\", \"format_bold\", \"format_clear\", \"format_color_reset\", \"format_indent_decrease\",\r\n        \"format_indent_increase\", \"format_italic\", \"format_line_spacing\", \"format_list_bulleted\", \"format_list_numbered\", \"format_list_numbered_rtl\", \"format_paint\",\r\n        \"format_quote\", \"format_shapes\", \"format_size\", \"format_strikethrough\", \"format_textdirection_l_to_r\", \"format_textdirection_r_to_l\", \"format_underlined\",\r\n        \"forum\", \"forward\", \"forward_10\", \"forward_30\", \"forward_5\", \"free_breakfast\", \"fullscreen\", \"fullscreen_exit\", \"functions\", \"g_translate\", \"gamepad\", \"games\",\r\n        \"gavel\", \"gesture\", \"get_app\", \"gif\", \"golf_course\", \"gps_fixed\", \"gps_not_fixed\", \"gps_off\", \"grade\", \"gradient\", \"grain\", \"graphic_eq\", \"grid_off\", \"grid_on\",\r\n        \"group\", \"group_add\", \"group_work\", \"hd\", \"hdr_off\", \"hdr_on\", \"hdr_strong\", \"hdr_weak\", \"headset\", \"headset_mic\", \"healing\", \"hearing\", \"height\", \"help\", \"help_outline\",\r\n        \"high_quality\", \"highlight\", \"highlight_off\", \"history\", \"home\", \"home_work\", \"horizontal_split\", \"hot_tub\", \"hotel\", \"hourglass_empty\", \"hourglass_full\", \"house\",\r\n        \"how_to_reg\", \"how_to_vote\", \"http\", \"https\", \"image\", \"image_aspect_ratio\", \"image_search\", \"import_contacts\", \"import_export\", \"important_devices\", \"inbox\",\r\n        \"indeterminate_check_box\", \"info\", \"input\", \"insert_chart\", \"insert_chart_outlined\", \"insert_comment\", \"insert_drive_file\", \"insert_emoticon\", \"insert_invitation\",\r\n        \"insert_link\", \"insert_photo\", \"invert_colors\", \"invert_colors_off\", \"iso\", \"keyboard\", \"keyboard_arrow_down\", \"keyboard_arrow_left\", \"keyboard_arrow_right\",\r\n        \"keyboard_arrow_up\", \"keyboard_backspace\", \"keyboard_capslock\", \"keyboard_hide\", \"keyboard_return\", \"keyboard_tab\", \"keyboard_voice\", \"king_bed\", \"kitchen\",\r\n        \"label\", \"label_important\", \"label_off\", \"landscape\", \"language\", \"laptop\", \"laptop_chromebook\", \"laptop_mac\", \"laptop_windows\", \"last_page\", \"launch\", \"layers\",\r\n        \"layers_clear\", \"leak_add\", \"leak_remove\", \"lens\", \"library_add\", \"library_add_check\", \"library_books\", \"library_music\", \"line_style\", \"line_weight\", \"linear_scale\",\r\n        \"link\", \"link_off\", \"linked_camera\", \"list\", \"list_alt\", \"live_help\", \"live_tv\", \"local_activity\", \"local_airport\", \"local_atm\", \"local_bar\", \"local_cafe\",\r\n        \"local_car_wash\", \"local_convenience_store\", \"local_dining\", \"local_drink\", \"local_florist\", \"local_gas_station\", \"local_grocery_store\", \"local_hospital\",\r\n        \"local_hotel\", \"local_laundry_service\", \"local_library\", \"local_mall\", \"local_movies\", \"local_offer\", \"local_parking\", \"local_pharmacy\", \"local_phone\", \"local_pizza\",\r\n        \"local_play\", \"local_post_office\", \"local_printshop\", \"local_see\", \"local_shipping\", \"local_taxi\", \"location_city\", \"location_disabled\", \"location_off\", \"location_on\",\r\n        \"location_searching\", \"lock\", \"lock_open\", \"looks\", \"looks_3\", \"looks_4\", \"looks_5\", \"looks_6\", \"looks_one\", \"looks_two\", \"loop\", \"loupe\", \"low_priority\", \"loyalty\",\r\n        \"mail\", \"mail_outline\", \"map\", \"markunread\", \"markunread_mailbox\", \"maximize\", \"meeting_room\", \"memory\", \"menu\", \"menu_book\", \"menu_open\", \"merge_type\", \"message\",\r\n        \"mic\", \"mic_none\", \"mic_off\", \"minimize\", \"missed_video_call\", \"mms\", \"mobile_friendly\", \"mobile_off\", \"mobile_screen_share\", \"mode_comment\", \"monetization_on\", \"money\",\r\n        \"money_off\", \"monochrome_photos\", \"mood\", \"mood_bad\", \"more\", \"more_horiz\", \"more_vert\", \"mouse\", \"move_to_inbox\", \"movie\", \"movie_creation\", \"movie_filter\",\r\n        \"multiline_chart\", \"museum\", \"music_note\", \"music_off\", \"music_video\", \"my_location\", \"nature\", \"nature_people\", \"navigate_before\", \"navigate_next\", \"navigation\",\r\n        \"near_me\", \"network_check\", \"network_locked\", \"new_releases\", \"next_week\", \"nfc\", \"nights_stay\", \"no_encryption\", \"no_meeting_room\", \"no_sim\", \"not_interested\",\r\n        \"not_listed_location\", \"note\", \"note_add\", \"notes\", \"notification_important\", \"notifications\", \"notifications_active\",\r\n        \"notifications_none\", \"notifications_off\", \"notifications_paused\", \"offline_bolt\", \"offline_pin\", \"ondemand_video\", \"opacity\", \"open_in_browser\", \"open_in_new\",\r\n        \"open_with\", \"outdoor_grill\", \"outlined_flag\", \"pages\", \"pageview\", \"palette\", \"pan_tool\", \"panorama\", \"panorama_fish_eye\", \"panorama_horizontal\", \"panorama_vertical\",\r\n        \"panorama_wide_angle\", \"party_mode\", \"pause\", \"pause_circle_filled\", \"pause_circle_outline\", \"pause_presentation\", \"payment\", \"people\", \"people_alt\", \"people_outline\",\r\n        \"perm_camera_mic\", \"perm_contact_calendar\", \"perm_data_setting\", \"perm_device_information\", \"perm_identity\", \"perm_media\", \"perm_phone_msg\", \"perm_scan_wifi\", \"person\",\r\n        \"person_add\", \"person_add_disabled\", \"person_outline\", \"person_pin\", \"person_pin_circle\", \"personal_video\", \"pets\", \"phone\", \"phone_android\", \"phone_bluetooth_speaker\",\r\n        \"phone_callback\", \"phone_disabled\", \"phone_enabled\", \"phone_forwarded\", \"phone_in_talk\", \"phone_iphone\", \"phone_locked\", \"phone_missed\", \"phone_paused\", \"phonelink\",\r\n        \"phonelink_erase\", \"phonelink_lock\", \"phonelink_off\", \"phonelink_ring\", \"phonelink_setup\", \"photo\", \"photo_album\", \"photo_camera\", \"photo_filter\", \"photo_library\",\r\n        \"photo_size_select_actual\", \"photo_size_select_large\", \"photo_size_select_small\", \"picture_as_pdf\", \"picture_in_picture\", \"picture_in_picture_alt\", \"pie_chart\",\r\n        \"pin_drop\", \"place\", \"play_arrow\", \"play_circle_filled\", \"play_circle_outline\", \"play_for_work\", \"playlist_add\", \"playlist_add_check\", \"playlist_play\", \"plus_one\",\r\n        \"policy\", \"poll\", \"polymer\", \"pool\", \"portable_wifi_off\", \"portrait\", \"post_add\", \"power\", \"power_input\", \"power_off\", \"power_settings_new\", \"pregnant_woman\",\r\n        \"present_to_all\", \"print\", \"print_disabled\", \"priority_high\", \"public\", \"publish\", \"query_builder\", \"question_answer\", \"queue\", \"queue_music\", \"queue_play_next\",\r\n        \"radio\", \"radio_button_checked\", \"radio_button_unchecked\", \"rate_review\", \"receipt\", \"recent_actors\", \"record_voice_over\", \"redeem\", \"redo\", \"refresh\", \"remove\",\r\n        \"remove_circle\", \"remove_circle_outline\", \"remove_from_queue\", \"remove_red_eye\", \"remove_shopping_cart\", \"reorder\", \"repeat\", \"repeat_one\", \"replay\", \"replay_10\",\r\n        \"replay_30\", \"replay_5\", \"reply\", \"reply_all\", \"report\", \"report_off\", \"report_problem\", \"restaurant\", \"restaurant_menu\", \"restore\", \"restore_from_trash\", \"restore_page\",\r\n        \"ring_volume\", \"room\", \"room_service\", \"rotate_90_degrees_ccw\", \"rotate_left\", \"rotate_right\", \"rounded_corner\", \"router\", \"rowing\", \"rss_feed\", \"rv_hookup\", \"satellite\",\r\n        \"save\", \"save_alt\", \"scanner\", \"scatter_plot\", \"schedule\", \"school\", \"score\", \"screen_lock_landscape\", \"screen_lock_portrait\", \"screen_lock_rotation\", \"screen_rotation\",\r\n        \"screen_share\", \"sd_card\", \"sd_storage\", \"search\", \"security\", \"select_all\", \"send\", \"sentiment_dissatisfied\", \"sentiment_satisfied\", \"sentiment_satisfied_alt\",\r\n        \"sentiment_very_dissatisfied\", \"sentiment_very_satisfied\", \"settings\", \"settings_applications\", \"settings_backup_restore\", \"settings_bluetooth\", \"settings_brightness\",\r\n        \"settings_cell\", \"settings_ethernet\", \"settings_input_antenna\", \"settings_input_component\", \"settings_input_composite\", \"settings_input_hdmi\", \"settings_input_svideo\",\r\n        \"settings_overscan\", \"settings_phone\", \"settings_power\", \"settings_remote\", \"settings_system_daydream\", \"settings_voice\", \"share\", \"shop\", \"shop_two\", \"shopping_basket\",\r\n        \"shopping_cart\", \"short_text\", \"show_chart\", \"shuffle\", \"shutter_speed\", \"signal_cellular_4_bar\", \"signal_cellular_alt\", \"signal_cellular_connected_no_internet_4_bar\",\r\n        \"signal_cellular_no_sim\", \"signal_cellular_null\", \"signal_cellular_off\", \"signal_wifi_4_bar\", \"signal_wifi_4_bar_lock\", \"signal_wifi_off\", \"sim_card\", \"single_bed\",\r\n        \"skip_next\", \"skip_previous\", \"slideshow\", \"slow_motion_video\", \"smartphone\", \"smoke_free\", \"smoking_rooms\", \"sms\", \"sms_failed\", \"snooze\", \"sort\", \"sort_by_alpha\",\r\n        \"spa\", \"space_bar\", \"speaker\", \"speaker_group\",\r\n        \"speaker_notes\", \"speaker_notes_off\", \"speaker_phone\", \"speed\", \"spellcheck\", \"sports\", \"sports_baseball\", \"sports_basketball\", \"sports_cricket\", \"sports_esports\",\r\n        \"sports_football\", \"sports_golf\", \"sports_handball\", \"sports_hockey\", \"sports_kabaddi\", \"sports_mma\", \"sports_motorsports\", \"sports_rugby\", \"sports_soccer\", \"sports_tennis\",\r\n        \"sports_volleyball\", \"square_foot\", \"star\", \"star_border\", \"star_half\", \"star_outline\", \"stars\", \"stay_current_landscape\", \"stay_current_portrait\", \"stay_primary_landscape\",\r\n        \"stay_primary_portrait\", \"stop\", \"stop_screen_share\", \"storage\", \"store\", \"store_mall_directory\", \"storefront\", \"straighten\", \"streetview\", \"strikethrough_s\", \"style\",\r\n        \"subdirectory_arrow_left\", \"subdirectory_arrow_right\", \"subject\", \"subscriptions\", \"subtitles\", \"subway\", \"supervised_user_circle\", \"supervisor_account\", \"surround_sound\",\r\n        \"swap_calls\", \"swap_horiz\", \"swap_horizontal_circle\", \"swap_vert\", \"swap_vertical_circle\", \"switch_camera\", \"switch_video\", \"sync\", \"sync_alt\", \"sync_disabled\", \"sync_problem\",\r\n        \"system_update\", \"system_update_alt\", \"tab\", \"tab_unselected\",\r\n        \"table_chart\", \"tablet\", \"tablet_android\", \"tablet_mac\", \"tag_faces\", \"tap_and_play\", \"terrain\", \"text_fields\", \"text_format\", \"text_rotate_up\", \"text_rotate_vertical\",\r\n        \"text_rotation_angledown\", \"text_rotation_angleup\", \"text_rotation_down\", \"text_rotation_none\", \"textsms\", \"texture\", \"theaters\", \"thumb_down\", \"thumb_down_alt\", \"thumb_up\",\r\n        \"thumb_up_alt\", \"thumbs_up_down\", \"time_to_leave\", \"timelapse\", \"timeline\", \"timer\", \"timer_10\", \"timer_3\", \"timer_off\", \"title\", \"toc\", \"today\", \"toggle_off\", \"toggle_on\",\r\n        \"toll\", \"tonality\", \"touch_app\", \"toys\", \"track_changes\", \"traffic\", \"train\", \"tram\", \"transfer_within_a_station\", \"transform\", \"transit_enterexit\", \"translate\", \"trending_down\",\r\n        \"trending_flat\", \"trending_up\", \"trip_origin\", \"tune\", \"turned_in\", \"turned_in_not\", \"tv\", \"tv_off\", \"two_wheeler\", \"unarchive\", \"undo\", \"unfold_less\", \"unfold_more\", \"unsubscribe\",\r\n        \"update\", \"usb\", \"verified_user\", \"vertical_align_bottom\", \"vertical_align_center\", \"vertical_align_top\", \"vertical_split\", \"vibration\", \"video_call\", \"video_label\", \"video_library\",\r\n        \"videocam\", \"videocam_off\", \"videogame_asset\", \"view_agenda\", \"view_array\", \"view_carousel\", \"view_column\", \"view_comfy\", \"view_compact\", \"view_day\", \"view_headline\", \"view_list\",\r\n        \"view_module\", \"view_quilt\", \"view_stream\", \"view_week\", \"vignette\", \"visibility\", \"visibility_off\", \"voice_chat\", \"voice_over_off\", \"voicemail\", \"volume_down\", \"volume_mute\",\r\n        \"volume_off\", \"volume_up\", \"vpn_key\", \"vpn_lock\", \"wallpaper\", \"warning\", \"watch\", \"watch_later\", \"waves\", \"wb_auto\", \"wb_cloudy\", \"wb_incandescent\", \"wb_iridescent\", \"wb_sunny\",\r\n        \"wc\", \"web\", \"web_asset\", \"weekend\", \"whatshot\", \"where_to_vote\", \"widgets\", \"wifi\", \"wifi_lock\", \"wifi_off\", \"wifi_tethering\", \"work\", \"work_off\", \"work_outline\", \"wrap_text\",\r\n        \"youtube_searched_for\", \"zoom_in\", \"zoom_out\", \"zoom_out_map\"]"
            },
            {
                "name": "ICONS_CONTROL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/core/controls/icons.control.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  options: ICON_NAMES,\r\n  control: {\r\n    type: 'select',\r\n  },\r\n}"
            },
            {
                "name": "InputTypes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-input/special-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  'button',\r\n  'checkbox',\r\n  'color',\r\n  'date',\r\n  'datetime-local',\r\n  'email',\r\n  'file',\r\n  'hidden',\r\n  'image',\r\n  'month',\r\n  'number',\r\n  'password',\r\n  'radio',\r\n  'range',\r\n  'reset',\r\n  'search',\r\n  'submit',\r\n  'tel',\r\n  'text',\r\n  'time',\r\n  'url',\r\n  'week',\r\n]"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "light",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-checkbox/special-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "light",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-autocomplete/special-autocomplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "light",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-datepicker/special-datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "light",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "light",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-form/special-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "light",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-input/special-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "light",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-label/special-label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "light",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-multiple-autocomplete/special-multiple-autocomplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "light",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-text-area/special-text-area.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "light",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-upload/special-upload.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Masks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/core/masks/maks.enum.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  [MasksEnum.currency]: currencyInputMask,\r\n  [MasksEnum.numeric]: numberMask(1000),\r\n}"
            },
            {
                "name": "numberMask",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/core/masks/number.mask.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(max = 1000) =>\r\n  createMask({ alias: 'numeric', min: 0, max })"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-checkbox/special-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FormControlViewerComponent>",
                "defaultValue": "(\r\n  args: FormControlViewerComponent\r\n) => ({\r\n  title: 'Special checkbox control',\r\n  template: `\r\n    <spf-form-control-viewer\r\n      [theme]=\"theme\"\r\n      [field]=\"{\r\n        placeholder: placeholder,\r\n        label: label,\r\n        tooltip: tooltip,\r\n        icon: icon,\r\n        elementId: elementId,\r\n        styleClasses: styleClasses,\r\n        length: length,\r\n        defaultValue:defaultValue,\r\n        required: required,\r\n        hidden: false,\r\n        type:type,\r\n        readOnly: readOnly,\r\n        settings:{\r\n          labelPosition:labelPosition,\r\n          indeterminate:indeterminate\r\n        },\r\n        errorMessages: errorMessages\r\n      }\"\r\n      >\r\n    </spf-form-control-viewer>`,\r\n  props: {\r\n    ...args,\r\n    type: EControlTypes.checkbox,\r\n  },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-autocomplete/special-autocomplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FormControlViewerComponent>",
                "defaultValue": "(\r\n  args: FormControlViewerComponent\r\n) => ({\r\n  title: 'Special autocomplete control',\r\n  template: `\r\n  <spf-form-control-viewer\r\n    (getData)=\"getData($event)\"\r\n    [theme]=\"theme\"\r\n    [autocomplete]=\"{\r\n      placeholder: placeholder,\r\n      label: label,\r\n      tooltip: tooltip,\r\n      icon: icon,\r\n      elementId: elementId,\r\n      styleClasses: styleClasses,\r\n      length: 0,\r\n      required: required,\r\n      hidden: false,\r\n      readOnly: readOnly,\r\n      defaultValue: defaultValue,\r\n      errorMessages: errorMessages,\r\n      type:type,\r\n      settings:{\r\n        fieldId: fieldId,\r\n        fieldName:fieldName,\r\n        source:source\r\n      }\r\n    }\"\r\n    >\r\n  </spf-form-control-viewer>`,\r\n  props: {\r\n    ...args,\r\n    type: EControlTypes.autocomplete,\r\n    getData: action('Get data'),\r\n  },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-datepicker/special-datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FormControlViewerComponent>",
                "defaultValue": "(\r\n  args: FormControlViewerComponent\r\n) => ({\r\n  title: 'Special input control',\r\n  template: `\r\n    <spf-form-control-viewer\r\n      [theme]=\"theme\"\r\n      [field]=\"{\r\n        placeholder: placeholder,\r\n        label: label,\r\n        tooltip: tooltip,\r\n        icon: icon,\r\n        elementId: elementId,\r\n        styleClasses: styleClasses,\r\n        length: length,\r\n        defaultValue:defaultValue,\r\n        required: required,\r\n        hidden: false,\r\n        readOnly: readOnly,\r\n        type:type,\r\n        settings:{},\r\n        errorMessages: errorMessages\r\n      }\"\r\n      >\r\n    </spf-form-control-viewer>`,\r\n  props: {\r\n    ...args,\r\n    type: EControlTypes.date,\r\n  },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FormControlViewerComponent>",
                "defaultValue": "(\r\n  args: FormControlViewerComponent\r\n) => ({\r\n  title: 'Special dropdown control',\r\n  template: `\r\n  <spf-form-control-viewer\r\n    [theme]=\"theme\"\r\n    [dropdown]=\"{\r\n      placeholder: placeholder,\r\n      label: label,\r\n      tooltip: tooltip,\r\n      icon: icon,\r\n      elementId: elementId,\r\n      styleClasses: styleClasses,\r\n      length: length,\r\n      required: required,\r\n      hidden: false,\r\n      readOnly: readOnly,\r\n      defaultValue:defaultValue,\r\n      type:type,\r\n      errorMessages: errorMessages,\r\n      settings:{\r\n        source:source,\r\n        fieldId: fieldId,\r\n        fieldName:fieldName,\r\n        notSelectedText:notSelectedText\r\n      }\r\n    }\"\r\n    >\r\n  </spf-form-control-viewer>`,\r\n  props: {\r\n    ...args,\r\n    type: EControlTypes.dropdown,\r\n  },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-form/special-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FormGroupViewerComponent>",
                "defaultValue": "(\r\n  args: FormGroupViewerComponent\r\n) => ({\r\n  title: 'Special form control',\r\n  template: `\r\n    <spf-form-group-viewer\r\n      [theme]=\"theme\"\r\n      [fields]=\"fields\"\r\n      >\r\n    </spf-form-group-viewer>`,\r\n  props: {\r\n    ...args,\r\n  },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-input/special-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FormControlViewerComponent>",
                "defaultValue": "(\r\n  args: FormControlViewerComponent\r\n) => ({\r\n  title: 'Special input control',\r\n  template: `\r\n    <spf-form-control-viewer\r\n      [theme]=\"theme\"\r\n      [input]=\"{\r\n        placeholder: placeholder,\r\n        label: label,\r\n        tooltip: tooltip,\r\n        icon: icon,\r\n        elementId: elementId,\r\n        styleClasses: styleClasses,\r\n        length: length,\r\n        defaultValue: defaultValue,\r\n        required: required,\r\n        hidden: hidden,\r\n        readOnly: readOnly,\r\n        disabled: disabled,\r\n        type: type,\r\n        errorMessages: errorMessages,\r\n        settings:{\r\n          icon:icon2,\r\n          mask:mask,\r\n          type:inputType\r\n        }\r\n      }\"\r\n      >\r\n    </spf-form-control-viewer>`,\r\n  props: {\r\n    ...args,\r\n    type: EControlTypes.input,\r\n  },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-label/special-label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FormControlViewerComponent>",
                "defaultValue": "(\r\n  args: FormControlViewerComponent\r\n) => ({\r\n  title: 'Special input control',\r\n  template: `\r\n    <spf-form-control-viewer\r\n      [theme]=\"theme\"\r\n      [field]=\"{\r\n        placeholder: placeholder,\r\n        label: label,\r\n        tooltip: tooltip,\r\n        icon: icon,\r\n        elementId: elementId,\r\n        styleClasses: styleClasses,\r\n        length: length,\r\n        defaultValue: defaultValue,\r\n        required: required,\r\n        hidden: hidden,\r\n        readOnly: readOnly,\r\n        disabled: disabled,\r\n        type: type,\r\n        errorMessages: errorMessages,\r\n        settings:{\r\n          pipe: pipe,\r\n          stylesPipe: stylesPipe,\r\n          isLink: isLink,\r\n          onClickLink: onClickLink\r\n        }\r\n      }\"\r\n      >\r\n    </spf-form-control-viewer>`,\r\n  props: {\r\n    ...args,\r\n    type: EControlTypes.label,\r\n  },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-multiple-autocomplete/special-multiple-autocomplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FormControlViewerComponent>",
                "defaultValue": "(\r\n  args: FormControlViewerComponent\r\n) => ({\r\n  title: 'Special multiple autocomplete control',\r\n  template: `\r\n  <spf-form-control-viewer\r\n    (getData)=\"getData($event)\"\r\n    [theme]=\"theme\"\r\n    [autocomplete]=\"{\r\n      placeholder: placeholder,\r\n      label: label,\r\n      tooltip: tooltip,\r\n      icon: icon,\r\n      elementId: elementId,\r\n      styleClasses: styleClasses,\r\n      length: 0,\r\n      required: required,\r\n      hidden: false,\r\n      readOnly: readOnly,\r\n      defaultValue:defaultValue,\r\n      type: type,\r\n      errorMessages: errorMessages,\r\n      settings:{\r\n        fieldId: fieldId,\r\n        fieldName:fieldName,\r\n        source:source\r\n      }\r\n    }\"\r\n    >\r\n  </spf-form-control-viewer>`,\r\n  props: {\r\n    ...args,\r\n    getData: action('Get data'),\r\n    type: EControlTypes.multiple,\r\n  },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-text-area/special-text-area.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FormControlViewerComponent>",
                "defaultValue": "(\r\n  args: FormControlViewerComponent\r\n) => ({\r\n  title: 'Special text area control',\r\n  template: `\r\n    <spf-form-control-viewer\r\n      [theme]=\"theme\"\r\n      [field]=\"{\r\n        placeholder: placeholder,\r\n        label: label,\r\n        tooltip: tooltip,\r\n        icon: icon,\r\n        elementId: elementId,\r\n        styleClasses: styleClasses,\r\n        length: length,\r\n        defaultValue:defaultValue,\r\n        required: required,\r\n        hidden: false,\r\n        readOnly: readOnly,\r\n        disabled: disabled,\r\n        type: type,\r\n        errorMessages: errorMessages\r\n      }\"\r\n      >\r\n    </spf-form-control-viewer>`,\r\n  props: {\r\n    ...args,\r\n    type: EControlTypes.textArea,\r\n  },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-upload/special-upload.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FormControlViewerComponent>",
                "defaultValue": "(\r\n  args: FormControlViewerComponent\r\n) => ({\r\n  title: 'Special upload control',\r\n  template: `\r\n    <spf-form-control-viewer\r\n      [theme]=\"theme\"\r\n      [field]=\"{\r\n        placeholder: placeholder,\r\n        label: label,\r\n        tooltip: tooltip,\r\n        icon: icon,\r\n        elementId: elementId,\r\n        styleClasses: styleClasses,\r\n        length: length,\r\n        defaultValue:defaultValue,\r\n        required: required,\r\n        hidden: false,\r\n        readOnly: readOnly,\r\n        type: type,\r\n        settings: {\r\n          accept: accept,\r\n          multiple: multiple\r\n        },\r\n        errorMessages: errorMessages\r\n      }\"\r\n      >\r\n    </spf-form-control-viewer>`,\r\n  props: {\r\n    ...args,\r\n    type: EControlTypes.file,\r\n  },\r\n})"
            },
            {
                "name": "THEMES_CONTROL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/core/controls/theme.control.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{ control: 'radio', options: ['light', 'dark'] }"
            },
            {
                "name": "TYPES_CONTROL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/core/controls/types.control.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  options: EnumToArray(EControlTypes),\r\n  control: {\r\n    type: 'select',\r\n  },\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "AllControlSettings",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ICheckboxSettings | IDropdownSettings | IInputSettings | IDatePickerSettings | IAutocompleteSettings",
                "file": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/common.form.interface.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "IArraySettings",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "IAutocompleteSettings",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/special-forms/src/lib/components/special-autocomplete/special-autocomplete.interface.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "ICheckboxSettings",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/special-forms/src/lib/components/special-checkbox/special-checkbox.interface.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "IDatePickerSettings",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/special-forms/src/lib/components/special-datepicker/special-datepicker.interface.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "IDropdownSettings",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.interface.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "IFormSettings",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "IInputSettings",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/special-forms/src/lib/components/special-input/special-input.interface.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "ILabelSettings",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/special-forms/src/lib/components/special-label/special-label.interface.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "IMultipleAutocompleteSettings",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/special-forms/src/lib/components/special-multiple-autocomplete/special-multiple-autocomplete.interface.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "ISpecialCheckbox",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "ISpecialLabel",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "ISpecialTextArea",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "ISpecialUpload",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "ITextAreaSettings",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/special-forms/src/lib/components/special-text-area/special-text-area.interface.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "IUploadSettings",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/special-forms/src/lib/components/special-upload/special-upload.interface.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "TRawFields",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "IDefaultField | IInputField | IDropdownField | IArrayField | IFormField | IAutocompleteField | IMultipleAutocompleteField | IDatePickerField | ITextAreaField | IUploadField | ILabelField | ICheckboxField",
                "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "TSpecialArray",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TSpecialAutocomplete",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TSpecialDatepicker",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TSpecialDefault",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TSpecialDropdown",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TSpecialFields",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "TSpecialDefault | TSpecialInput | TSpecialDropdown | TSpecialArray | TSpecialForm | TSpecialAutocomplete | ISpecialCheckbox | ISpecialTextArea | ISpecialUpload | ISpecialLabel | TSpecialDatepicker",
                "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "TSpecialForm",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TSpecialInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            }
        ],
        "enumerations": [
            {
                "name": "EControlTypes",
                "childs": [
                    {
                        "name": "pkey",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "PRIMARY-KEY"
                    },
                    {
                        "name": "input",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "INPUT"
                    },
                    {
                        "name": "textArea",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "TEXT-AREA"
                    },
                    {
                        "name": "dropdown",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DROPDOWN"
                    },
                    {
                        "name": "date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DATE"
                    },
                    {
                        "name": "time",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "TIME"
                    },
                    {
                        "name": "checkbox",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CHECKBOX"
                    },
                    {
                        "name": "file",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FILE"
                    },
                    {
                        "name": "autocomplete",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "AUTOCOMPLETE"
                    },
                    {
                        "name": "multiple",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MULTIPLE-AUTOCOMPLETE"
                    },
                    {
                        "name": "array",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ARRAY"
                    },
                    {
                        "name": "form",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FORM"
                    },
                    {
                        "name": "label",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "LABEL"
                    },
                    {
                        "name": "default",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DEFAULT"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/special-forms/src/lib/core/aux-data/control-types.enum.ts"
            },
            {
                "name": "MasksEnum",
                "childs": [
                    {
                        "name": "currency",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CURRENCY"
                    },
                    {
                        "name": "numeric",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "NUMERIC"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/special-forms/src/lib/core/masks/maks.enum.ts"
            }
        ],
        "groupedVariables": {
            "projects/special-forms/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/special-forms/src/lib/core/aux-data/countries.ts": [
                {
                    "name": "countries",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/core/aux-data/countries.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => of([\r\n  { name: 'Afghanistan', code: 'AF' },\r\n  { name: 'Åland Islands', code: 'AX' },\r\n  { name: 'Albania', code: 'AL' },\r\n  { name: 'Algeria', code: 'DZ' },\r\n  { name: 'American Samoa', code: 'AS' },\r\n  { name: 'AndorrA', code: 'AD' },\r\n  { name: 'Angola', code: 'AO' },\r\n  { name: 'Anguilla', code: 'AI' },\r\n  { name: 'Antarctica', code: 'AQ' },\r\n  { name: 'Antigua and Barbuda', code: 'AG' },\r\n  { name: 'Argentina', code: 'AR' },\r\n  { name: 'Armenia', code: 'AM' },\r\n  { name: 'Aruba', code: 'AW' },\r\n  { name: 'Australia', code: 'AU' },\r\n  { name: 'Austria', code: 'AT' },\r\n  { name: 'Azerbaijan', code: 'AZ' },\r\n  { name: 'Bahamas', code: 'BS' },\r\n  { name: 'Bahrain', code: 'BH' },\r\n  { name: 'Bangladesh', code: 'BD' },\r\n  { name: 'Barbados', code: 'BB' },\r\n  { name: 'Belarus', code: 'BY' },\r\n  { name: 'Belgium', code: 'BE' },\r\n  { name: 'Belize', code: 'BZ' },\r\n  { name: 'Benin', code: 'BJ' },\r\n  { name: 'Bermuda', code: 'BM' },\r\n  { name: 'Bhutan', code: 'BT' },\r\n  { name: 'Bolivia', code: 'BO' },\r\n  { name: 'Bosnia and Herzegovina', code: 'BA' },\r\n  { name: 'Botswana', code: 'BW' },\r\n  { name: 'Bouvet Island', code: 'BV' },\r\n  { name: 'Brazil', code: 'BR' },\r\n  { name: 'British Indian Ocean Territory', code: 'IO' },\r\n  { name: 'Brunei Darussalam', code: 'BN' },\r\n  { name: 'Bulgaria', code: 'BG' },\r\n  { name: 'Burkina Faso', code: 'BF' },\r\n  { name: 'Burundi', code: 'BI' },\r\n  { name: 'Cambodia', code: 'KH' },\r\n  { name: 'Cameroon', code: 'CM' },\r\n  { name: 'Canada', code: 'CA' },\r\n  { name: 'Cape Verde', code: 'CV' },\r\n  { name: 'Cayman Islands', code: 'KY' },\r\n  { name: 'Central African Republic', code: 'CF' },\r\n  { name: 'Chad', code: 'TD' },\r\n  { name: 'Chile', code: 'CL' },\r\n  { name: 'China', code: 'CN' },\r\n  { name: 'Christmas Island', code: 'CX' },\r\n  { name: 'Cocos (Keeling) Islands', code: 'CC' },\r\n  { name: 'Colombia', code: 'CO' },\r\n  { name: 'Comoros', code: 'KM' },\r\n  { name: 'Congo', code: 'CG' },\r\n  { name: 'Congo, The Democratic Republic of the', code: 'CD' },\r\n  { name: 'Cook Islands', code: 'CK' },\r\n  { name: 'Costa Rica', code: 'CR' },\r\n  { name: \"Cote D'Ivoire\", code: 'CI' },\r\n  { name: 'Croatia', code: 'HR' },\r\n  { name: 'Cuba', code: 'CU' },\r\n  { name: 'Cyprus', code: 'CY' },\r\n  { name: 'Czech Republic', code: 'CZ' },\r\n  { name: 'Denmark', code: 'DK' },\r\n  { name: 'Djibouti', code: 'DJ' },\r\n  { name: 'Dominica', code: 'DM' },\r\n  { name: 'Dominican Republic', code: 'DO' },\r\n  { name: 'Ecuador', code: 'EC' },\r\n  { name: 'Egypt', code: 'EG' },\r\n  { name: 'El Salvador', code: 'SV' },\r\n  { name: 'Equatorial Guinea', code: 'GQ' },\r\n  { name: 'Eritrea', code: 'ER' },\r\n  { name: 'Estonia', code: 'EE' },\r\n  { name: 'Ethiopia', code: 'ET' },\r\n  { name: 'Falkland Islands (Malvinas)', code: 'FK' },\r\n  { name: 'Faroe Islands', code: 'FO' },\r\n  { name: 'Fiji', code: 'FJ' },\r\n  { name: 'Finland', code: 'FI' },\r\n  { name: 'France', code: 'FR' },\r\n  { name: 'French Guiana', code: 'GF' },\r\n  { name: 'French Polynesia', code: 'PF' },\r\n  { name: 'French Southern Territories', code: 'TF' },\r\n  { name: 'Gabon', code: 'GA' },\r\n  { name: 'Gambia', code: 'GM' },\r\n  { name: 'Georgia', code: 'GE' },\r\n  { name: 'Germany', code: 'DE' },\r\n  { name: 'Ghana', code: 'GH' },\r\n  { name: 'Gibraltar', code: 'GI' },\r\n  { name: 'Greece', code: 'GR' },\r\n  { name: 'Greenland', code: 'GL' },\r\n  { name: 'Grenada', code: 'GD' },\r\n  { name: 'Guadeloupe', code: 'GP' },\r\n  { name: 'Guam', code: 'GU' },\r\n  { name: 'Guatemala', code: 'GT' },\r\n  { name: 'Guernsey', code: 'GG' },\r\n  { name: 'Guinea', code: 'GN' },\r\n  { name: 'Guinea-Bissau', code: 'GW' },\r\n  { name: 'Guyana', code: 'GY' },\r\n  { name: 'Haiti', code: 'HT' },\r\n  { name: 'Heard Island and Mcdonald Islands', code: 'HM' },\r\n  { name: 'Holy See (Vatican City State)', code: 'VA' },\r\n  { name: 'Honduras', code: 'HN' },\r\n  { name: 'Hong Kong', code: 'HK' },\r\n  { name: 'Hungary', code: 'HU' },\r\n  { name: 'Iceland', code: 'IS' },\r\n  { name: 'India', code: 'IN' },\r\n  { name: 'Indonesia', code: 'ID' },\r\n  { name: 'Iran, Islamic Republic Of', code: 'IR' },\r\n  { name: 'Iraq', code: 'IQ' },\r\n  { name: 'Ireland', code: 'IE' },\r\n  { name: 'Isle of Man', code: 'IM' },\r\n  { name: 'Israel', code: 'IL' },\r\n  { name: 'Italy', code: 'IT' },\r\n  { name: 'Jamaica', code: 'JM' },\r\n  { name: 'Japan', code: 'JP' },\r\n  { name: 'Jersey', code: 'JE' },\r\n  { name: 'Jordan', code: 'JO' },\r\n  { name: 'Kazakhstan', code: 'KZ' },\r\n  { name: 'Kenya', code: 'KE' },\r\n  { name: 'Kiribati', code: 'KI' },\r\n  { name: \"Korea, Democratic People'S Republic of\", code: 'KP' },\r\n  { name: 'Korea, Republic of', code: 'KR' },\r\n  { name: 'Kuwait', code: 'KW' },\r\n  { name: 'Kyrgyzstan', code: 'KG' },\r\n  { name: \"Lao People'S Democratic Republic\", code: 'LA' },\r\n  { name: 'Latvia', code: 'LV' },\r\n  { name: 'Lebanon', code: 'LB' },\r\n  { name: 'Lesotho', code: 'LS' },\r\n  { name: 'Liberia', code: 'LR' },\r\n  { name: 'Libyan Arab Jamahiriya', code: 'LY' },\r\n  { name: 'Liechtenstein', code: 'LI' },\r\n  { name: 'Lithuania', code: 'LT' },\r\n  { name: 'Luxembourg', code: 'LU' },\r\n  { name: 'Macao', code: 'MO' },\r\n  { name: 'Macedonia, The Former Yugoslav Republic of', code: 'MK' },\r\n  { name: 'Madagascar', code: 'MG' },\r\n  { name: 'Malawi', code: 'MW' },\r\n  { name: 'Malaysia', code: 'MY' },\r\n  { name: 'Maldives', code: 'MV' },\r\n  { name: 'Mali', code: 'ML' },\r\n  { name: 'Malta', code: 'MT' },\r\n  { name: 'Marshall Islands', code: 'MH' },\r\n  { name: 'Martinique', code: 'MQ' },\r\n  { name: 'Mauritania', code: 'MR' },\r\n  { name: 'Mauritius', code: 'MU' },\r\n  { name: 'Mayotte', code: 'YT' },\r\n  { name: 'Mexico', code: 'MX' },\r\n  { name: 'Micronesia, Federated States of', code: 'FM' },\r\n  { name: 'Moldova, Republic of', code: 'MD' },\r\n  { name: 'Monaco', code: 'MC' },\r\n  { name: 'Mongolia', code: 'MN' },\r\n  { name: 'Montserrat', code: 'MS' },\r\n  { name: 'Morocco', code: 'MA' },\r\n  { name: 'Mozambique', code: 'MZ' },\r\n  { name: 'Myanmar', code: 'MM' },\r\n  { name: 'Namibia', code: 'NA' },\r\n  { name: 'Nauru', code: 'NR' },\r\n  { name: 'Nepal', code: 'NP' },\r\n  { name: 'Netherlands', code: 'NL' },\r\n  { name: 'Netherlands Antilles', code: 'AN' },\r\n  { name: 'New Caledonia', code: 'NC' },\r\n  { name: 'New Zealand', code: 'NZ' },\r\n  { name: 'Nicaragua', code: 'NI' },\r\n  { name: 'Niger', code: 'NE' },\r\n  { name: 'Nigeria', code: 'NG' },\r\n  { name: 'Niue', code: 'NU' },\r\n  { name: 'Norfolk Island', code: 'NF' },\r\n  { name: 'Northern Mariana Islands', code: 'MP' },\r\n  { name: 'Norway', code: 'NO' },\r\n  { name: 'Oman', code: 'OM' },\r\n  { name: 'Pakistan', code: 'PK' },\r\n  { name: 'Palau', code: 'PW' },\r\n  { name: 'Palestinian Territory, Occupied', code: 'PS' },\r\n  { name: 'Panama', code: 'PA' },\r\n  { name: 'Papua New Guinea', code: 'PG' },\r\n  { name: 'Paraguay', code: 'PY' },\r\n  { name: 'Peru', code: 'PE' },\r\n  { name: 'Philippines', code: 'PH' },\r\n  { name: 'Pitcairn', code: 'PN' },\r\n  { name: 'Poland', code: 'PL' },\r\n  { name: 'Portugal', code: 'PT' },\r\n  { name: 'Puerto Rico', code: 'PR' },\r\n  { name: 'Qatar', code: 'QA' },\r\n  { name: 'Reunion', code: 'RE' },\r\n  { name: 'Romania', code: 'RO' },\r\n  { name: 'Russian Federation', code: 'RU' },\r\n  { name: 'RWANDA', code: 'RW' },\r\n  { name: 'Saint Helena', code: 'SH' },\r\n  { name: 'Saint Kitts and Nevis', code: 'KN' },\r\n  { name: 'Saint Lucia', code: 'LC' },\r\n  { name: 'Saint Pierre and Miquelon', code: 'PM' },\r\n  { name: 'Saint Vincent and the Grenadines', code: 'VC' },\r\n  { name: 'Samoa', code: 'WS' },\r\n  { name: 'San Marino', code: 'SM' },\r\n  { name: 'Sao Tome and Principe', code: 'ST' },\r\n  { name: 'Saudi Arabia', code: 'SA' },\r\n  { name: 'Senegal', code: 'SN' },\r\n  { name: 'Serbia and Montenegro', code: 'CS' },\r\n  { name: 'Seychelles', code: 'SC' },\r\n  { name: 'Sierra Leone', code: 'SL' },\r\n  { name: 'Singapore', code: 'SG' },\r\n  { name: 'Slovakia', code: 'SK' },\r\n  { name: 'Slovenia', code: 'SI' },\r\n  { name: 'Solomon Islands', code: 'SB' },\r\n  { name: 'Somalia', code: 'SO' },\r\n  { name: 'South Africa', code: 'ZA' },\r\n  { name: 'South Georgia and the South Sandwich Islands', code: 'GS' },\r\n  { name: 'Spain', code: 'ES' },\r\n  { name: 'Sri Lanka', code: 'LK' },\r\n  { name: 'Sudan', code: 'SD' },\r\n  { name: 'Suriname', code: 'SR' },\r\n  { name: 'Svalbard and Jan Mayen', code: 'SJ' },\r\n  { name: 'Swaziland', code: 'SZ' },\r\n  { name: 'Sweden', code: 'SE' },\r\n  { name: 'Switzerland', code: 'CH' },\r\n  { name: 'Syrian Arab Republic', code: 'SY' },\r\n  { name: 'Taiwan, Province of China', code: 'TW' },\r\n  { name: 'Tajikistan', code: 'TJ' },\r\n  { name: 'Tanzania, United Republic of', code: 'TZ' },\r\n  { name: 'Thailand', code: 'TH' },\r\n  { name: 'Timor-Leste', code: 'TL' },\r\n  { name: 'Togo', code: 'TG' },\r\n  { name: 'Tokelau', code: 'TK' },\r\n  { name: 'Tonga', code: 'TO' },\r\n  { name: 'Trinidad and Tobago', code: 'TT' },\r\n  { name: 'Tunisia', code: 'TN' },\r\n  { name: 'Turkey', code: 'TR' },\r\n  { name: 'Turkmenistan', code: 'TM' },\r\n  { name: 'Turks and Caicos Islands', code: 'TC' },\r\n  { name: 'Tuvalu', code: 'TV' },\r\n  { name: 'Uganda', code: 'UG' },\r\n  { name: 'Ukraine', code: 'UA' },\r\n  { name: 'United Arab Emirates', code: 'AE' },\r\n  { name: 'United Kingdom', code: 'GB' },\r\n  { name: 'United States', code: 'US' },\r\n  { name: 'United States Minor Outlying Islands', code: 'UM' },\r\n  { name: 'Uruguay', code: 'UY' },\r\n  { name: 'Uzbekistan', code: 'UZ' },\r\n  { name: 'Vanuatu', code: 'VU' },\r\n  { name: 'Venezuela', code: 'VE' },\r\n  { name: 'Viet Nam', code: 'VN' },\r\n  { name: 'Virgin Islands, British', code: 'VG' },\r\n  { name: 'Virgin Islands, U.S.', code: 'VI' },\r\n  { name: 'Wallis and Futuna', code: 'WF' },\r\n  { name: 'Western Sahara', code: 'EH' },\r\n  { name: 'Yemen', code: 'YE' },\r\n  { name: 'Zambia', code: 'ZM' },\r\n  { name: 'Zimbabwe', code: 'ZW' },\r\n])"
                }
            ],
            "projects/special-forms/src/lib/core/masks/currency.mask.ts": [
                {
                    "name": "currencyInputMask",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/core/masks/currency.mask.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createMask({\r\n  alias: 'numeric',\r\n  groupSeparator: ',',\r\n  autoUnmask: true,\r\n  digits: 2,\r\n  digitsOptional: false,\r\n  prefix: '$ ',\r\n  placeholder: '0',\r\n})"
                }
            ],
            "projects/special-forms/src/lib/components/special-checkbox/special-checkbox.stories.ts": [
                {
                    "name": "dark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-checkbox/special-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "light",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-checkbox/special-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-checkbox/special-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FormControlViewerComponent>",
                    "defaultValue": "(\r\n  args: FormControlViewerComponent\r\n) => ({\r\n  title: 'Special checkbox control',\r\n  template: `\r\n    <spf-form-control-viewer\r\n      [theme]=\"theme\"\r\n      [field]=\"{\r\n        placeholder: placeholder,\r\n        label: label,\r\n        tooltip: tooltip,\r\n        icon: icon,\r\n        elementId: elementId,\r\n        styleClasses: styleClasses,\r\n        length: length,\r\n        defaultValue:defaultValue,\r\n        required: required,\r\n        hidden: false,\r\n        type:type,\r\n        readOnly: readOnly,\r\n        settings:{\r\n          labelPosition:labelPosition,\r\n          indeterminate:indeterminate\r\n        },\r\n        errorMessages: errorMessages\r\n      }\"\r\n      >\r\n    </spf-form-control-viewer>`,\r\n  props: {\r\n    ...args,\r\n    type: EControlTypes.checkbox,\r\n  },\r\n})"
                }
            ],
            "projects/special-forms/src/lib/components/special-autocomplete/special-autocomplete.stories.ts": [
                {
                    "name": "dark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-autocomplete/special-autocomplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "light",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-autocomplete/special-autocomplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-autocomplete/special-autocomplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FormControlViewerComponent>",
                    "defaultValue": "(\r\n  args: FormControlViewerComponent\r\n) => ({\r\n  title: 'Special autocomplete control',\r\n  template: `\r\n  <spf-form-control-viewer\r\n    (getData)=\"getData($event)\"\r\n    [theme]=\"theme\"\r\n    [autocomplete]=\"{\r\n      placeholder: placeholder,\r\n      label: label,\r\n      tooltip: tooltip,\r\n      icon: icon,\r\n      elementId: elementId,\r\n      styleClasses: styleClasses,\r\n      length: 0,\r\n      required: required,\r\n      hidden: false,\r\n      readOnly: readOnly,\r\n      defaultValue: defaultValue,\r\n      errorMessages: errorMessages,\r\n      type:type,\r\n      settings:{\r\n        fieldId: fieldId,\r\n        fieldName:fieldName,\r\n        source:source\r\n      }\r\n    }\"\r\n    >\r\n  </spf-form-control-viewer>`,\r\n  props: {\r\n    ...args,\r\n    type: EControlTypes.autocomplete,\r\n    getData: action('Get data'),\r\n  },\r\n})"
                }
            ],
            "projects/special-forms/src/lib/components/special-datepicker/special-datepicker.stories.ts": [
                {
                    "name": "dark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-datepicker/special-datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "light",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-datepicker/special-datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-datepicker/special-datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FormControlViewerComponent>",
                    "defaultValue": "(\r\n  args: FormControlViewerComponent\r\n) => ({\r\n  title: 'Special input control',\r\n  template: `\r\n    <spf-form-control-viewer\r\n      [theme]=\"theme\"\r\n      [field]=\"{\r\n        placeholder: placeholder,\r\n        label: label,\r\n        tooltip: tooltip,\r\n        icon: icon,\r\n        elementId: elementId,\r\n        styleClasses: styleClasses,\r\n        length: length,\r\n        defaultValue:defaultValue,\r\n        required: required,\r\n        hidden: false,\r\n        readOnly: readOnly,\r\n        type:type,\r\n        settings:{},\r\n        errorMessages: errorMessages\r\n      }\"\r\n      >\r\n    </spf-form-control-viewer>`,\r\n  props: {\r\n    ...args,\r\n    type: EControlTypes.date,\r\n  },\r\n})"
                }
            ],
            "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.stories.ts": [
                {
                    "name": "dark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "light",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FormControlViewerComponent>",
                    "defaultValue": "(\r\n  args: FormControlViewerComponent\r\n) => ({\r\n  title: 'Special dropdown control',\r\n  template: `\r\n  <spf-form-control-viewer\r\n    [theme]=\"theme\"\r\n    [dropdown]=\"{\r\n      placeholder: placeholder,\r\n      label: label,\r\n      tooltip: tooltip,\r\n      icon: icon,\r\n      elementId: elementId,\r\n      styleClasses: styleClasses,\r\n      length: length,\r\n      required: required,\r\n      hidden: false,\r\n      readOnly: readOnly,\r\n      defaultValue:defaultValue,\r\n      type:type,\r\n      errorMessages: errorMessages,\r\n      settings:{\r\n        source:source,\r\n        fieldId: fieldId,\r\n        fieldName:fieldName,\r\n        notSelectedText:notSelectedText\r\n      }\r\n    }\"\r\n    >\r\n  </spf-form-control-viewer>`,\r\n  props: {\r\n    ...args,\r\n    type: EControlTypes.dropdown,\r\n  },\r\n})"
                }
            ],
            "projects/special-forms/src/lib/components/special-form/special-form.stories.ts": [
                {
                    "name": "dark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-form/special-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "light",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-form/special-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-form/special-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FormGroupViewerComponent>",
                    "defaultValue": "(\r\n  args: FormGroupViewerComponent\r\n) => ({\r\n  title: 'Special form control',\r\n  template: `\r\n    <spf-form-group-viewer\r\n      [theme]=\"theme\"\r\n      [fields]=\"fields\"\r\n      >\r\n    </spf-form-group-viewer>`,\r\n  props: {\r\n    ...args,\r\n  },\r\n})"
                }
            ],
            "projects/special-forms/src/lib/components/special-input/special-input.stories.ts": [
                {
                    "name": "dark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-input/special-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "InputTypes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-input/special-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  'button',\r\n  'checkbox',\r\n  'color',\r\n  'date',\r\n  'datetime-local',\r\n  'email',\r\n  'file',\r\n  'hidden',\r\n  'image',\r\n  'month',\r\n  'number',\r\n  'password',\r\n  'radio',\r\n  'range',\r\n  'reset',\r\n  'search',\r\n  'submit',\r\n  'tel',\r\n  'text',\r\n  'time',\r\n  'url',\r\n  'week',\r\n]"
                },
                {
                    "name": "light",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-input/special-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-input/special-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FormControlViewerComponent>",
                    "defaultValue": "(\r\n  args: FormControlViewerComponent\r\n) => ({\r\n  title: 'Special input control',\r\n  template: `\r\n    <spf-form-control-viewer\r\n      [theme]=\"theme\"\r\n      [input]=\"{\r\n        placeholder: placeholder,\r\n        label: label,\r\n        tooltip: tooltip,\r\n        icon: icon,\r\n        elementId: elementId,\r\n        styleClasses: styleClasses,\r\n        length: length,\r\n        defaultValue: defaultValue,\r\n        required: required,\r\n        hidden: hidden,\r\n        readOnly: readOnly,\r\n        disabled: disabled,\r\n        type: type,\r\n        errorMessages: errorMessages,\r\n        settings:{\r\n          icon:icon2,\r\n          mask:mask,\r\n          type:inputType\r\n        }\r\n      }\"\r\n      >\r\n    </spf-form-control-viewer>`,\r\n  props: {\r\n    ...args,\r\n    type: EControlTypes.input,\r\n  },\r\n})"
                }
            ],
            "projects/special-forms/src/lib/components/special-label/special-label.stories.ts": [
                {
                    "name": "dark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-label/special-label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "light",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-label/special-label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-label/special-label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FormControlViewerComponent>",
                    "defaultValue": "(\r\n  args: FormControlViewerComponent\r\n) => ({\r\n  title: 'Special input control',\r\n  template: `\r\n    <spf-form-control-viewer\r\n      [theme]=\"theme\"\r\n      [field]=\"{\r\n        placeholder: placeholder,\r\n        label: label,\r\n        tooltip: tooltip,\r\n        icon: icon,\r\n        elementId: elementId,\r\n        styleClasses: styleClasses,\r\n        length: length,\r\n        defaultValue: defaultValue,\r\n        required: required,\r\n        hidden: hidden,\r\n        readOnly: readOnly,\r\n        disabled: disabled,\r\n        type: type,\r\n        errorMessages: errorMessages,\r\n        settings:{\r\n          pipe: pipe,\r\n          stylesPipe: stylesPipe,\r\n          isLink: isLink,\r\n          onClickLink: onClickLink\r\n        }\r\n      }\"\r\n      >\r\n    </spf-form-control-viewer>`,\r\n  props: {\r\n    ...args,\r\n    type: EControlTypes.label,\r\n  },\r\n})"
                }
            ],
            "projects/special-forms/src/lib/components/special-multiple-autocomplete/special-multiple-autocomplete.stories.ts": [
                {
                    "name": "dark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-multiple-autocomplete/special-multiple-autocomplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "light",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-multiple-autocomplete/special-multiple-autocomplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-multiple-autocomplete/special-multiple-autocomplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FormControlViewerComponent>",
                    "defaultValue": "(\r\n  args: FormControlViewerComponent\r\n) => ({\r\n  title: 'Special multiple autocomplete control',\r\n  template: `\r\n  <spf-form-control-viewer\r\n    (getData)=\"getData($event)\"\r\n    [theme]=\"theme\"\r\n    [autocomplete]=\"{\r\n      placeholder: placeholder,\r\n      label: label,\r\n      tooltip: tooltip,\r\n      icon: icon,\r\n      elementId: elementId,\r\n      styleClasses: styleClasses,\r\n      length: 0,\r\n      required: required,\r\n      hidden: false,\r\n      readOnly: readOnly,\r\n      defaultValue:defaultValue,\r\n      type: type,\r\n      errorMessages: errorMessages,\r\n      settings:{\r\n        fieldId: fieldId,\r\n        fieldName:fieldName,\r\n        source:source\r\n      }\r\n    }\"\r\n    >\r\n  </spf-form-control-viewer>`,\r\n  props: {\r\n    ...args,\r\n    getData: action('Get data'),\r\n    type: EControlTypes.multiple,\r\n  },\r\n})"
                }
            ],
            "projects/special-forms/src/lib/components/special-text-area/special-text-area.stories.ts": [
                {
                    "name": "dark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-text-area/special-text-area.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "light",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-text-area/special-text-area.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-text-area/special-text-area.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FormControlViewerComponent>",
                    "defaultValue": "(\r\n  args: FormControlViewerComponent\r\n) => ({\r\n  title: 'Special text area control',\r\n  template: `\r\n    <spf-form-control-viewer\r\n      [theme]=\"theme\"\r\n      [field]=\"{\r\n        placeholder: placeholder,\r\n        label: label,\r\n        tooltip: tooltip,\r\n        icon: icon,\r\n        elementId: elementId,\r\n        styleClasses: styleClasses,\r\n        length: length,\r\n        defaultValue:defaultValue,\r\n        required: required,\r\n        hidden: false,\r\n        readOnly: readOnly,\r\n        disabled: disabled,\r\n        type: type,\r\n        errorMessages: errorMessages\r\n      }\"\r\n      >\r\n    </spf-form-control-viewer>`,\r\n  props: {\r\n    ...args,\r\n    type: EControlTypes.textArea,\r\n  },\r\n})"
                }
            ],
            "projects/special-forms/src/lib/components/special-upload/special-upload.stories.ts": [
                {
                    "name": "dark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-upload/special-upload.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "light",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-upload/special-upload.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-upload/special-upload.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FormControlViewerComponent>",
                    "defaultValue": "(\r\n  args: FormControlViewerComponent\r\n) => ({\r\n  title: 'Special upload control',\r\n  template: `\r\n    <spf-form-control-viewer\r\n      [theme]=\"theme\"\r\n      [field]=\"{\r\n        placeholder: placeholder,\r\n        label: label,\r\n        tooltip: tooltip,\r\n        icon: icon,\r\n        elementId: elementId,\r\n        styleClasses: styleClasses,\r\n        length: length,\r\n        defaultValue:defaultValue,\r\n        required: required,\r\n        hidden: false,\r\n        readOnly: readOnly,\r\n        type: type,\r\n        settings: {\r\n          accept: accept,\r\n          multiple: multiple\r\n        },\r\n        errorMessages: errorMessages\r\n      }\"\r\n      >\r\n    </spf-form-control-viewer>`,\r\n  props: {\r\n    ...args,\r\n    type: EControlTypes.file,\r\n  },\r\n})"
                }
            ],
            "projects/special-forms/src/lib/core/utils/enum-to-array.util.ts": [
                {
                    "name": "EnumToArray",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/core/utils/enum-to-array.util.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(enu: any) => {\r\n  return Object.keys(enu).map((key) => ({\r\n    id: key,\r\n    value: enu[key],\r\n  }));\r\n}"
                }
            ],
            "projects/special-forms/src/lib/core/aux-data/field-basic-data.ts": [
                {
                    "name": "FieldBasicData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/core/aux-data/field-basic-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  placeholder: 'Placeholder',\r\n  label: 'Label',\r\n  tooltip: 'Tooltip',\r\n  icon: 'accessible',\r\n  elementId: 'Element-id',\r\n  styleClasses: '',\r\n  length: 0,\r\n  required: true,\r\n  readOnly: false,\r\n  errorMessages: {},\r\n  asyncValidators: null,\r\n  validators: null,\r\n}"
                }
            ],
            "projects/special-forms/src/lib/core/aux-data/all-icons.ts": [
                {
                    "name": "ICON_NAMES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/core/aux-data/all-icons.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\"\",\"360\", \"svg_anchor\",\"svg_push_pin\",\"3d_rotation\", \"4k\", \"ac_unit\", \"access_alarm\", \"access_alarms\", \"access_time\", \"accessibility\",\r\n        \"accessibility_new\", \"accessible\", \"accessible_forward\", \"account_balance\", \"account_balance_wallet\", \"account_box\",\r\n        \"account_circle\", \"account_tree\", \"adb\", \"add\", \"add_a_photo\", \"add_alarm\", \"add_alert\", \"add_box\", \"add_circle\", \"add_circle_outline\",\r\n        \"add_comment\", \"add_ic_call\", \"add_location\", \"add_photo_alternate\", \"add_shopping_cart\", \"add_to_home_screen\", \"add_to_photos\",\r\n        \"add_to_queue\", \"adjust\", \"airline_seat_flat\", \"airline_seat_flat_angled\", \"airline_seat_individual_suite\", \"airline_seat_legroom_extra\",\r\n        \"airline_seat_legroom_normal\", \"airline_seat_legroom_reduced\", \"airline_seat_recline_extra\", \"airline_seat_recline_normal\",\r\n        \"airplanemode_active\", \"airplanemode_inactive\", \"airplay\", \"airport_shuttle\", \"alarm\", \"alarm_add\", \"alarm_off\", \"alarm_on\",\r\n        \"album\", \"all_inbox\", \"all_inclusive\", \"all_out\", \"alternate_email\", \"amp_stories\", \"android\", \"announcement\", \"apartment\", \"apps\",\r\n        \"archive\", \"arrow_back\", \"arrow_back_ios\", \"arrow_downward\", \"arrow_drop_down\", \"arrow_drop_down_circle\", \"arrow_drop_up\", \"arrow_forward\",\r\n        \"arrow_forward_ios\", \"arrow_left\", \"arrow_right\", \"arrow_right_alt\", \"arrow_upward\", \"art_track\", \"aspect_ratio\", \"assessment\", \"assignment\",\r\n        \"assignment_ind\", \"assignment_late\", \"assignment_return\", \"assignment_returned\", \"assignment_turned_in\", \"assistant\", \"assistant_photo\", \"atm\", \"attach_file\",\r\n        \"attach_money\", \"attachment\", \"audiotrack\", \"autorenew\", \"av_timer\", \"backspace\", \"backup\", \"ballot\", \"bar_chart\", \"bathtub\",\r\n        \"battery_alert\", \"battery_charging_full\", \"svg_miscellaneous_services\",\"svg_construction\",\"battery_full\", \"battery_std\", \"battery_unknown\", \"beach_access\", \"beenhere\", \"block\",\r\n        \"bluetooth\", \"bluetooth_audio\", \"bluetooth_connected\", \"bluetooth_disabled\", \"bluetooth_searching\", \"blur_circular\", \"blur_linear\",\r\n        \"blur_off\", \"blur_on\", \"book\", \"bookmark\", \"bookmark_border\", \"bookmarks\", \"border_all\", \"border_bottom\", \"border_clear\", \"border_horizontal\",\r\n        \"border_inner\", \"border_left\", \"border_outer\", \"border_right\", \"border_style\", \"border_top\", \"border_vertical\", \"branding_watermark\",\r\n        \"brightness_1\", \"brightness_2\", \"brightness_3\", \"brightness_4\", \"brightness_5\", \"brightness_6\", \"brightness_7\", \"brightness_auto\",\r\n        \"brightness_high\", \"brightness_low\", \"brightness_medium\", \"broken_image\", \"brush\", \"bubble_chart\", \"bug_report\", \"build\", \"burst_mode\",\r\n        \"business\", \"business_center\", \"cached\", \"cake\", \"calendar_today\", \"calendar_view_day\", \"call\", \"call_end\", \"call_made\", \"call_merge\",\r\n        \"call_missed\", \"call_missed_outgoing\", \"call_received\", \"call_split\", \"call_to_action\", \"camera\", \"camera_alt\", \"camera_enhance\",\r\n        \"camera_front\", \"camera_rear\", \"camera_roll\", \"cancel\", \"cancel_presentation\", \"cancel_schedule_send\", \"card_giftcard\", \"card_membership\",\r\n        \"card_travel\", \"casino\", \"cast\", \"cast_connected\", \"category\", \"center_focus_strong\", \"center_focus_weak\", \"change_history\", \"chat\", \"chat_bubble\",\r\n        \"chat_bubble_outline\", \"check\", \"check_box\", \"check_box_outline_blank\", \"check_circle\", \"check_circle_outline\", \"chevron_left\", \"chevron_right\",\r\n        \"child_care\", \"child_friendly\", \"chrome_reader_mode\", \"class\", \"clear\", \"clear_all\", \"close\", \"closed_caption\", \"cloud\", \"cloud_circle\", \"cloud_done\",\r\n        \"cloud_download\", \"cloud_off\", \"cloud_queue\", \"cloud_upload\", \"code\", \"collections\", \"collections_bookmark\", \"color_lens\", \"colorize\", \"comment\", \"commute\",\r\n        \"compare\", \"compare_arrows\", \"compass_calibration\", \"computer\", \"confirmation_number\", \"contact_mail\", \"contact_phone\", \"contact_support\", \"contactless\",\r\n        \"contacts\", \"control_camera\", \"control_point\", \"control_point_duplicate\", \"copyright\", \"create\", \"create_new_folder\", \"credit_card\", \"crop\", \"crop_16_9\",\r\n        \"crop_3_2\", \"crop_5_4\", \"crop_7_5\", \"crop_din\", \"crop_free\", \"crop_landscape\", \"crop_original\", \"crop_portrait\", \"crop_rotate\", \"crop_square\", \"dashboard\", \"data_usage\",\r\n        \"date_range\", \"deck\", \"dehaze\", \"delete\", \"delete_forever\", \"delete_outline\", \"delete_sweep\", \"departure_board\", \"description\", \"desktop_access_disabled\",\r\n        \"desktop_mac\", \"desktop_windows\", \"details\", \"developer_board\", \"developer_mode\", \"device_hub\", \"device_unknown\", \"devices\", \"devices_other\", \"dialer_sip\",\r\n        \"dialpad\", \"directions\", \"directions_bike\", \"directions_boat\", \"directions_bus\", \"directions_car\", \"directions_railway\", \"directions_run\", \"directions_subway\",\r\n        \"directions_transit\", \"directions_walk\", \"disc_full\", \"dns\", \"dock\", \"domain\", \"domain_disabled\", \"done\", \"done_all\", \"done_outline\", \"donut_large\", \"donut_small\", \"double_arrow\", \"drafts\", \"drag_handle\", \"drag_indicator\", \"drive_eta\", \"duo\", \"dvr\", \"dynamic_feed\", \"eco\", \"edit\", \"edit_attributes\", \"edit_location\", \"eject\", \"email\", \"emoji_emotions\", \"emoji_events\", \"emoji_flags\", \"emoji_food_beverage\", \"emoji_nature\", \"emoji_objects\", \"emoji_people\", \"emoji_symbols\", \"emoji_transportation\", \"enhanced_encryption\", \"equalizer\", \"error\", \"error_outline\", \"euro\", \"euro_symbol\", \"ev_station\", \"event\", \"event_available\", \"event_busy\", \"event_note\", \"event_seat\", \"exit_to_app\", \"expand_less\", \"expand_more\", \"explicit\", \"explore\", \"explore_off\", \"exposure\", \"exposure_neg_1\", \"exposure_neg_2\", \"exposure_plus_1\", \"exposure_plus_2\", \"exposure_zero\", \"extension\", \"face\", \"fast_forward\", \"fast_rewind\", \"fastfood\",\r\n        \"favorite\", \"favorite_border\", \"featured_play_list\", \"featured_video\", \"feedback\", \"fiber_dvr\", \"fiber_manual_record\", \"fiber_new\", \"fiber_pin\", \"fiber_smart_record\", \"file_copy\", \"filter\", \"filter_1\", \"filter_2\", \"filter_3\", \"filter_4\", \"filter_5\", \"filter_6\", \"filter_7\", \"filter_8\", \"filter_9\", \"filter_9_plus\", \"filter_b_and_w\", \"filter_center_focus\", \"filter_drama\", \"filter_frames\", \"filter_hdr\", \"filter_list\", \"filter_none\", \"filter_tilt_shift\", \"filter_vintage\", \"find_in_page\", \"find_replace\", \"fingerprint\", \"fireplace\", \"first_page\", \"fitness_center\", \"flag\", \"flare\", \"flash_auto\", \"flash_off\", \"flash_on\", \"flight\", \"flight_land\", \"flight_takeoff\", \"flip\", \"flip_camera_android\", \"flip_camera_ios\", \"flip_to_back\", \"flip_to_front\", \"folder\", \"folder_open\", \"folder_shared\", \"folder_special\", \"font_download\", \"format_align_center\", \"format_align_justify\", \"format_align_left\", \"format_align_right\", \"format_bold\", \"format_clear\", \"format_color_reset\", \"format_indent_decrease\",\r\n        \"format_indent_increase\", \"format_italic\", \"format_line_spacing\", \"format_list_bulleted\", \"format_list_numbered\", \"format_list_numbered_rtl\", \"format_paint\",\r\n        \"format_quote\", \"format_shapes\", \"format_size\", \"format_strikethrough\", \"format_textdirection_l_to_r\", \"format_textdirection_r_to_l\", \"format_underlined\",\r\n        \"forum\", \"forward\", \"forward_10\", \"forward_30\", \"forward_5\", \"free_breakfast\", \"fullscreen\", \"fullscreen_exit\", \"functions\", \"g_translate\", \"gamepad\", \"games\",\r\n        \"gavel\", \"gesture\", \"get_app\", \"gif\", \"golf_course\", \"gps_fixed\", \"gps_not_fixed\", \"gps_off\", \"grade\", \"gradient\", \"grain\", \"graphic_eq\", \"grid_off\", \"grid_on\",\r\n        \"group\", \"group_add\", \"group_work\", \"hd\", \"hdr_off\", \"hdr_on\", \"hdr_strong\", \"hdr_weak\", \"headset\", \"headset_mic\", \"healing\", \"hearing\", \"height\", \"help\", \"help_outline\",\r\n        \"high_quality\", \"highlight\", \"highlight_off\", \"history\", \"home\", \"home_work\", \"horizontal_split\", \"hot_tub\", \"hotel\", \"hourglass_empty\", \"hourglass_full\", \"house\",\r\n        \"how_to_reg\", \"how_to_vote\", \"http\", \"https\", \"image\", \"image_aspect_ratio\", \"image_search\", \"import_contacts\", \"import_export\", \"important_devices\", \"inbox\",\r\n        \"indeterminate_check_box\", \"info\", \"input\", \"insert_chart\", \"insert_chart_outlined\", \"insert_comment\", \"insert_drive_file\", \"insert_emoticon\", \"insert_invitation\",\r\n        \"insert_link\", \"insert_photo\", \"invert_colors\", \"invert_colors_off\", \"iso\", \"keyboard\", \"keyboard_arrow_down\", \"keyboard_arrow_left\", \"keyboard_arrow_right\",\r\n        \"keyboard_arrow_up\", \"keyboard_backspace\", \"keyboard_capslock\", \"keyboard_hide\", \"keyboard_return\", \"keyboard_tab\", \"keyboard_voice\", \"king_bed\", \"kitchen\",\r\n        \"label\", \"label_important\", \"label_off\", \"landscape\", \"language\", \"laptop\", \"laptop_chromebook\", \"laptop_mac\", \"laptop_windows\", \"last_page\", \"launch\", \"layers\",\r\n        \"layers_clear\", \"leak_add\", \"leak_remove\", \"lens\", \"library_add\", \"library_add_check\", \"library_books\", \"library_music\", \"line_style\", \"line_weight\", \"linear_scale\",\r\n        \"link\", \"link_off\", \"linked_camera\", \"list\", \"list_alt\", \"live_help\", \"live_tv\", \"local_activity\", \"local_airport\", \"local_atm\", \"local_bar\", \"local_cafe\",\r\n        \"local_car_wash\", \"local_convenience_store\", \"local_dining\", \"local_drink\", \"local_florist\", \"local_gas_station\", \"local_grocery_store\", \"local_hospital\",\r\n        \"local_hotel\", \"local_laundry_service\", \"local_library\", \"local_mall\", \"local_movies\", \"local_offer\", \"local_parking\", \"local_pharmacy\", \"local_phone\", \"local_pizza\",\r\n        \"local_play\", \"local_post_office\", \"local_printshop\", \"local_see\", \"local_shipping\", \"local_taxi\", \"location_city\", \"location_disabled\", \"location_off\", \"location_on\",\r\n        \"location_searching\", \"lock\", \"lock_open\", \"looks\", \"looks_3\", \"looks_4\", \"looks_5\", \"looks_6\", \"looks_one\", \"looks_two\", \"loop\", \"loupe\", \"low_priority\", \"loyalty\",\r\n        \"mail\", \"mail_outline\", \"map\", \"markunread\", \"markunread_mailbox\", \"maximize\", \"meeting_room\", \"memory\", \"menu\", \"menu_book\", \"menu_open\", \"merge_type\", \"message\",\r\n        \"mic\", \"mic_none\", \"mic_off\", \"minimize\", \"missed_video_call\", \"mms\", \"mobile_friendly\", \"mobile_off\", \"mobile_screen_share\", \"mode_comment\", \"monetization_on\", \"money\",\r\n        \"money_off\", \"monochrome_photos\", \"mood\", \"mood_bad\", \"more\", \"more_horiz\", \"more_vert\", \"mouse\", \"move_to_inbox\", \"movie\", \"movie_creation\", \"movie_filter\",\r\n        \"multiline_chart\", \"museum\", \"music_note\", \"music_off\", \"music_video\", \"my_location\", \"nature\", \"nature_people\", \"navigate_before\", \"navigate_next\", \"navigation\",\r\n        \"near_me\", \"network_check\", \"network_locked\", \"new_releases\", \"next_week\", \"nfc\", \"nights_stay\", \"no_encryption\", \"no_meeting_room\", \"no_sim\", \"not_interested\",\r\n        \"not_listed_location\", \"note\", \"note_add\", \"notes\", \"notification_important\", \"notifications\", \"notifications_active\",\r\n        \"notifications_none\", \"notifications_off\", \"notifications_paused\", \"offline_bolt\", \"offline_pin\", \"ondemand_video\", \"opacity\", \"open_in_browser\", \"open_in_new\",\r\n        \"open_with\", \"outdoor_grill\", \"outlined_flag\", \"pages\", \"pageview\", \"palette\", \"pan_tool\", \"panorama\", \"panorama_fish_eye\", \"panorama_horizontal\", \"panorama_vertical\",\r\n        \"panorama_wide_angle\", \"party_mode\", \"pause\", \"pause_circle_filled\", \"pause_circle_outline\", \"pause_presentation\", \"payment\", \"people\", \"people_alt\", \"people_outline\",\r\n        \"perm_camera_mic\", \"perm_contact_calendar\", \"perm_data_setting\", \"perm_device_information\", \"perm_identity\", \"perm_media\", \"perm_phone_msg\", \"perm_scan_wifi\", \"person\",\r\n        \"person_add\", \"person_add_disabled\", \"person_outline\", \"person_pin\", \"person_pin_circle\", \"personal_video\", \"pets\", \"phone\", \"phone_android\", \"phone_bluetooth_speaker\",\r\n        \"phone_callback\", \"phone_disabled\", \"phone_enabled\", \"phone_forwarded\", \"phone_in_talk\", \"phone_iphone\", \"phone_locked\", \"phone_missed\", \"phone_paused\", \"phonelink\",\r\n        \"phonelink_erase\", \"phonelink_lock\", \"phonelink_off\", \"phonelink_ring\", \"phonelink_setup\", \"photo\", \"photo_album\", \"photo_camera\", \"photo_filter\", \"photo_library\",\r\n        \"photo_size_select_actual\", \"photo_size_select_large\", \"photo_size_select_small\", \"picture_as_pdf\", \"picture_in_picture\", \"picture_in_picture_alt\", \"pie_chart\",\r\n        \"pin_drop\", \"place\", \"play_arrow\", \"play_circle_filled\", \"play_circle_outline\", \"play_for_work\", \"playlist_add\", \"playlist_add_check\", \"playlist_play\", \"plus_one\",\r\n        \"policy\", \"poll\", \"polymer\", \"pool\", \"portable_wifi_off\", \"portrait\", \"post_add\", \"power\", \"power_input\", \"power_off\", \"power_settings_new\", \"pregnant_woman\",\r\n        \"present_to_all\", \"print\", \"print_disabled\", \"priority_high\", \"public\", \"publish\", \"query_builder\", \"question_answer\", \"queue\", \"queue_music\", \"queue_play_next\",\r\n        \"radio\", \"radio_button_checked\", \"radio_button_unchecked\", \"rate_review\", \"receipt\", \"recent_actors\", \"record_voice_over\", \"redeem\", \"redo\", \"refresh\", \"remove\",\r\n        \"remove_circle\", \"remove_circle_outline\", \"remove_from_queue\", \"remove_red_eye\", \"remove_shopping_cart\", \"reorder\", \"repeat\", \"repeat_one\", \"replay\", \"replay_10\",\r\n        \"replay_30\", \"replay_5\", \"reply\", \"reply_all\", \"report\", \"report_off\", \"report_problem\", \"restaurant\", \"restaurant_menu\", \"restore\", \"restore_from_trash\", \"restore_page\",\r\n        \"ring_volume\", \"room\", \"room_service\", \"rotate_90_degrees_ccw\", \"rotate_left\", \"rotate_right\", \"rounded_corner\", \"router\", \"rowing\", \"rss_feed\", \"rv_hookup\", \"satellite\",\r\n        \"save\", \"save_alt\", \"scanner\", \"scatter_plot\", \"schedule\", \"school\", \"score\", \"screen_lock_landscape\", \"screen_lock_portrait\", \"screen_lock_rotation\", \"screen_rotation\",\r\n        \"screen_share\", \"sd_card\", \"sd_storage\", \"search\", \"security\", \"select_all\", \"send\", \"sentiment_dissatisfied\", \"sentiment_satisfied\", \"sentiment_satisfied_alt\",\r\n        \"sentiment_very_dissatisfied\", \"sentiment_very_satisfied\", \"settings\", \"settings_applications\", \"settings_backup_restore\", \"settings_bluetooth\", \"settings_brightness\",\r\n        \"settings_cell\", \"settings_ethernet\", \"settings_input_antenna\", \"settings_input_component\", \"settings_input_composite\", \"settings_input_hdmi\", \"settings_input_svideo\",\r\n        \"settings_overscan\", \"settings_phone\", \"settings_power\", \"settings_remote\", \"settings_system_daydream\", \"settings_voice\", \"share\", \"shop\", \"shop_two\", \"shopping_basket\",\r\n        \"shopping_cart\", \"short_text\", \"show_chart\", \"shuffle\", \"shutter_speed\", \"signal_cellular_4_bar\", \"signal_cellular_alt\", \"signal_cellular_connected_no_internet_4_bar\",\r\n        \"signal_cellular_no_sim\", \"signal_cellular_null\", \"signal_cellular_off\", \"signal_wifi_4_bar\", \"signal_wifi_4_bar_lock\", \"signal_wifi_off\", \"sim_card\", \"single_bed\",\r\n        \"skip_next\", \"skip_previous\", \"slideshow\", \"slow_motion_video\", \"smartphone\", \"smoke_free\", \"smoking_rooms\", \"sms\", \"sms_failed\", \"snooze\", \"sort\", \"sort_by_alpha\",\r\n        \"spa\", \"space_bar\", \"speaker\", \"speaker_group\",\r\n        \"speaker_notes\", \"speaker_notes_off\", \"speaker_phone\", \"speed\", \"spellcheck\", \"sports\", \"sports_baseball\", \"sports_basketball\", \"sports_cricket\", \"sports_esports\",\r\n        \"sports_football\", \"sports_golf\", \"sports_handball\", \"sports_hockey\", \"sports_kabaddi\", \"sports_mma\", \"sports_motorsports\", \"sports_rugby\", \"sports_soccer\", \"sports_tennis\",\r\n        \"sports_volleyball\", \"square_foot\", \"star\", \"star_border\", \"star_half\", \"star_outline\", \"stars\", \"stay_current_landscape\", \"stay_current_portrait\", \"stay_primary_landscape\",\r\n        \"stay_primary_portrait\", \"stop\", \"stop_screen_share\", \"storage\", \"store\", \"store_mall_directory\", \"storefront\", \"straighten\", \"streetview\", \"strikethrough_s\", \"style\",\r\n        \"subdirectory_arrow_left\", \"subdirectory_arrow_right\", \"subject\", \"subscriptions\", \"subtitles\", \"subway\", \"supervised_user_circle\", \"supervisor_account\", \"surround_sound\",\r\n        \"swap_calls\", \"swap_horiz\", \"swap_horizontal_circle\", \"swap_vert\", \"swap_vertical_circle\", \"switch_camera\", \"switch_video\", \"sync\", \"sync_alt\", \"sync_disabled\", \"sync_problem\",\r\n        \"system_update\", \"system_update_alt\", \"tab\", \"tab_unselected\",\r\n        \"table_chart\", \"tablet\", \"tablet_android\", \"tablet_mac\", \"tag_faces\", \"tap_and_play\", \"terrain\", \"text_fields\", \"text_format\", \"text_rotate_up\", \"text_rotate_vertical\",\r\n        \"text_rotation_angledown\", \"text_rotation_angleup\", \"text_rotation_down\", \"text_rotation_none\", \"textsms\", \"texture\", \"theaters\", \"thumb_down\", \"thumb_down_alt\", \"thumb_up\",\r\n        \"thumb_up_alt\", \"thumbs_up_down\", \"time_to_leave\", \"timelapse\", \"timeline\", \"timer\", \"timer_10\", \"timer_3\", \"timer_off\", \"title\", \"toc\", \"today\", \"toggle_off\", \"toggle_on\",\r\n        \"toll\", \"tonality\", \"touch_app\", \"toys\", \"track_changes\", \"traffic\", \"train\", \"tram\", \"transfer_within_a_station\", \"transform\", \"transit_enterexit\", \"translate\", \"trending_down\",\r\n        \"trending_flat\", \"trending_up\", \"trip_origin\", \"tune\", \"turned_in\", \"turned_in_not\", \"tv\", \"tv_off\", \"two_wheeler\", \"unarchive\", \"undo\", \"unfold_less\", \"unfold_more\", \"unsubscribe\",\r\n        \"update\", \"usb\", \"verified_user\", \"vertical_align_bottom\", \"vertical_align_center\", \"vertical_align_top\", \"vertical_split\", \"vibration\", \"video_call\", \"video_label\", \"video_library\",\r\n        \"videocam\", \"videocam_off\", \"videogame_asset\", \"view_agenda\", \"view_array\", \"view_carousel\", \"view_column\", \"view_comfy\", \"view_compact\", \"view_day\", \"view_headline\", \"view_list\",\r\n        \"view_module\", \"view_quilt\", \"view_stream\", \"view_week\", \"vignette\", \"visibility\", \"visibility_off\", \"voice_chat\", \"voice_over_off\", \"voicemail\", \"volume_down\", \"volume_mute\",\r\n        \"volume_off\", \"volume_up\", \"vpn_key\", \"vpn_lock\", \"wallpaper\", \"warning\", \"watch\", \"watch_later\", \"waves\", \"wb_auto\", \"wb_cloudy\", \"wb_incandescent\", \"wb_iridescent\", \"wb_sunny\",\r\n        \"wc\", \"web\", \"web_asset\", \"weekend\", \"whatshot\", \"where_to_vote\", \"widgets\", \"wifi\", \"wifi_lock\", \"wifi_off\", \"wifi_tethering\", \"work\", \"work_off\", \"work_outline\", \"wrap_text\",\r\n        \"youtube_searched_for\", \"zoom_in\", \"zoom_out\", \"zoom_out_map\"]"
                }
            ],
            "projects/special-forms/src/lib/core/controls/icons.control.ts": [
                {
                    "name": "ICONS_CONTROL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/core/controls/icons.control.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  options: ICON_NAMES,\r\n  control: {\r\n    type: 'select',\r\n  },\r\n}"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "projects/special-forms/src/lib/core/masks/maks.enum.ts": [
                {
                    "name": "Masks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/core/masks/maks.enum.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  [MasksEnum.currency]: currencyInputMask,\r\n  [MasksEnum.numeric]: numberMask(1000),\r\n}"
                }
            ],
            "projects/special-forms/src/lib/core/masks/number.mask.ts": [
                {
                    "name": "numberMask",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/core/masks/number.mask.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(max = 1000) =>\r\n  createMask({ alias: 'numeric', min: 0, max })"
                }
            ],
            "projects/special-forms/src/lib/core/controls/theme.control.ts": [
                {
                    "name": "THEMES_CONTROL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/core/controls/theme.control.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{ control: 'radio', options: ['light', 'dark'] }"
                }
            ],
            "projects/special-forms/src/lib/core/controls/types.control.ts": [
                {
                    "name": "TYPES_CONTROL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/core/controls/types.control.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  options: EnumToArray(EControlTypes),\r\n  control: {\r\n    type: 'select',\r\n  },\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "projects/special-forms/src/lib/core/aux-data/control-types.enum.ts": [
                {
                    "name": "EControlTypes",
                    "childs": [
                        {
                            "name": "pkey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "PRIMARY-KEY"
                        },
                        {
                            "name": "input",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "INPUT"
                        },
                        {
                            "name": "textArea",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "TEXT-AREA"
                        },
                        {
                            "name": "dropdown",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DROPDOWN"
                        },
                        {
                            "name": "date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DATE"
                        },
                        {
                            "name": "time",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "TIME"
                        },
                        {
                            "name": "checkbox",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CHECKBOX"
                        },
                        {
                            "name": "file",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FILE"
                        },
                        {
                            "name": "autocomplete",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "AUTOCOMPLETE"
                        },
                        {
                            "name": "multiple",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MULTIPLE-AUTOCOMPLETE"
                        },
                        {
                            "name": "array",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ARRAY"
                        },
                        {
                            "name": "form",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FORM"
                        },
                        {
                            "name": "label",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "LABEL"
                        },
                        {
                            "name": "default",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DEFAULT"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/special-forms/src/lib/core/aux-data/control-types.enum.ts"
                }
            ],
            "projects/special-forms/src/lib/core/masks/maks.enum.ts": [
                {
                    "name": "MasksEnum",
                    "childs": [
                        {
                            "name": "currency",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CURRENCY"
                        },
                        {
                            "name": "numeric",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "NUMERIC"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/special-forms/src/lib/core/masks/maks.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/common.form.interface.ts": [
                {
                    "name": "AllControlSettings",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ICheckboxSettings | IDropdownSettings | IInputSettings | IDatePickerSettings | IAutocompleteSettings",
                    "file": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/common.form.interface.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts": [
                {
                    "name": "IArraySettings",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "IFormSettings",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "ISpecialCheckbox",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "ISpecialLabel",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "ISpecialTextArea",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "ISpecialUpload",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "TRawFields",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "IDefaultField | IInputField | IDropdownField | IArrayField | IFormField | IAutocompleteField | IMultipleAutocompleteField | IDatePickerField | ITextAreaField | IUploadField | ILabelField | ICheckboxField",
                    "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "TSpecialArray",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "TSpecialAutocomplete",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "TSpecialDatepicker",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "TSpecialDefault",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "TSpecialDropdown",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "TSpecialFields",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "TSpecialDefault | TSpecialInput | TSpecialDropdown | TSpecialArray | TSpecialForm | TSpecialAutocomplete | ISpecialCheckbox | ISpecialTextArea | ISpecialUpload | ISpecialLabel | TSpecialDatepicker",
                    "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "TSpecialForm",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "TSpecialInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "projects/special-forms/src/lib/components/special-autocomplete/special-autocomplete.interface.ts": [
                {
                    "name": "IAutocompleteSettings",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/special-forms/src/lib/components/special-autocomplete/special-autocomplete.interface.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "projects/special-forms/src/lib/components/special-checkbox/special-checkbox.interface.ts": [
                {
                    "name": "ICheckboxSettings",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/special-forms/src/lib/components/special-checkbox/special-checkbox.interface.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "projects/special-forms/src/lib/components/special-datepicker/special-datepicker.interface.ts": [
                {
                    "name": "IDatePickerSettings",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/special-forms/src/lib/components/special-datepicker/special-datepicker.interface.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.interface.ts": [
                {
                    "name": "IDropdownSettings",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.interface.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "projects/special-forms/src/lib/components/special-input/special-input.interface.ts": [
                {
                    "name": "IInputSettings",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/special-forms/src/lib/components/special-input/special-input.interface.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "projects/special-forms/src/lib/components/special-label/special-label.interface.ts": [
                {
                    "name": "ILabelSettings",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/special-forms/src/lib/components/special-label/special-label.interface.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "projects/special-forms/src/lib/components/special-multiple-autocomplete/special-multiple-autocomplete.interface.ts": [
                {
                    "name": "IMultipleAutocompleteSettings",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/special-forms/src/lib/components/special-multiple-autocomplete/special-multiple-autocomplete.interface.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "projects/special-forms/src/lib/components/special-text-area/special-text-area.interface.ts": [
                {
                    "name": "ITextAreaSettings",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/special-forms/src/lib/components/special-text-area/special-text-area.interface.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "projects/special-forms/src/lib/components/special-upload/special-upload.interface.ts": [
                {
                    "name": "IUploadSettings",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/special-forms/src/lib/components/special-upload/special-upload.interface.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/special-forms/src/lib/aux-storybook-components/form-control-selector/form-control-selector.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormControlSelectorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/aux-storybook-components/form-control-viewer/form-control-viewer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormControlViewerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/control-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ControlDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/autocomplete.form.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AutocompleteFormClass",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/autocomplete.form.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAutocompleteSettingsFormData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/checkbox.form.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CheckboxFormClass",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/checkbox.form.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICheckboxSettingsFormData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/common.form.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CommonFormCreator",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/common.form.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CommonFormClass",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/datepicker.form.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DatePickerFormClass",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/datepicker.form.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDatePickerSettingsFormData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/dropdown.form.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DropDownFormClass",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/dropdown.form.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDropdownSettingsFormData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/field.form.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FieldFormClass",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/field.form.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFieldFormData",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/input.form.ts",
                "type": "class",
                "linktype": "classe",
                "name": "InputFormClass",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/components/settings-strategy/input.form.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IInputSettingsFormData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/aux-storybook-components/form-group-viewer/form-group-viewer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormGroupViewerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-autocomplete/special-autocomplete.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpecialAutocompleteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-autocomplete/special-autocomplete.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAutocompleteField",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-autocomplete/special-autocomplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-autocomplete/special-autocomplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "light",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-autocomplete/special-autocomplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-checkbox/special-checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpecialCheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-checkbox/special-checkbox.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICheckboxField",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-checkbox/special-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-checkbox/special-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "light",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-checkbox/special-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-datepicker/special-datepicker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpecialDatepickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-datepicker/special-datepicker.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDatePickerField",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-datepicker/special-datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-datepicker/special-datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "light",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-datepicker/special-datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpecialDropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDropdownField",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "light",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-form-array/special-form-array.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpecialArrayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-form/special-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpecialFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-form/special-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-form/special-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "light",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-form/special-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-input/special-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpecialInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-input/special-input.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IInputField",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-input/special-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-input/special-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-input/special-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "light",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-input/special-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-label/special-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpecialLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-label/special-label.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILabelField",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-label/special-label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-label/special-label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "light",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-label/special-label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-multiple-autocomplete/special-multiple-autocomplete.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpecialMultipleAutocompleteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-multiple-autocomplete/special-multiple-autocomplete.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMultipleAutocompleteField",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-multiple-autocomplete/special-multiple-autocomplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-multiple-autocomplete/special-multiple-autocomplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "light",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-multiple-autocomplete/special-multiple-autocomplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-text-area/special-text-area.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpecialTextAreaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-text-area/special-text-area.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITextAreaField",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-text-area/special-text-area.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-text-area/special-text-area.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "light",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-text-area/special-text-area.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-upload/special-upload.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpecialUploadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-upload/special-upload.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUploadField",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-upload/special-upload.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-upload/special-upload.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "light",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-upload/special-upload.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/aux-data/all-icons.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ICON_NAMES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/aux-data/countries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "countries",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/aux-data/field-basic-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FieldBasicData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/controls/icons.control.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ICONS_CONTROL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/controls/theme.control.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "THEMES_CONTROL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/controls/types.control.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TYPES_CONTROL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/directives/control-render.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FormControlsRenderDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/forms/special-forms.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SpecialFormArray",
                "coveragePercent": 10,
                "coverageCount": "3/28",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/forms/special-forms.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SpecialFormControl",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/forms/special-forms.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SpecialFormGroup",
                "coveragePercent": 7,
                "coverageCount": "2/27",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/interfaces/field-basics.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFieldBasicData",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/interfaces/field-basics.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFieldData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IArrayField",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IcontrolName",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDefaultField",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFormField",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFormStructure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/interfaces/special-control.interface.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ISpecialControl",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/masks/currency.mask.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "currencyInputMask",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/masks/maks.enum.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Masks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/masks/number.mask.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "numberMask",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/services/special-form-builder/special-form-builder.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SpecialFormBuilderService",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/services/special-form-builder/special-form-builder.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IControlParams",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/utils/enum-to-array.util.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EnumToArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/pipes/controls-list-pipe/controls-list.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FormControlsListPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/pipes/error-message-pipe/error.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ErrorMessagePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/pipes/text-by-function/text-by-function.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TextByFunctionPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}