{
    "pipes": [
        {
            "name": "ErrorMessagePipe",
            "id": "pipe-ErrorMessagePipe-fec25a9e3568984f48ee771714ca340affcee194a5a8bbe0fb3b1ed4a396276dbcbb587909866a8b346993b05d9ae34d6f503e90515bbd512f0cf8a801126f95",
            "file": "projects/special-forms/src/lib/pipes/error.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "errorsObj",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "errorMessages",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "errorsObj",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "errorMessages",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "errorMessage",
            "sourceCode": "import { Pipe, PipeTransform } from \"@angular/core\";\r\nimport { FormControl } from \"@angular/forms\";\r\n\r\n@Pipe({\r\n  name: \"errorMessage\",\r\n})\r\nexport class ErrorMessagePipe implements PipeTransform {\r\n  transform(\r\n    errorsObj: { [key: string]: any },\r\n    errorMessages: { [key: string]: any },\r\n    control?: FormControl\r\n  ): any {\r\n    const errors = errorsObj ? Object.keys(errorsObj) : [];\r\n    const error = errors[0];\r\n    const message = errorMessages[error] || error;\r\n    if (control) {\r\n      control.setErrors(errorsObj);\r\n    }\r\n    return message;\r\n  }\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "IArrayField",
            "id": "interface-IArrayField-52fddc1a1c3b95be40a4b2cdceb6b5ad70906ffec0d7eed8da42813db1c37983fe3f77caa4b2585334799c9202a68b9919df8326336658119990a4c9611ad551",
            "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IDropdownField } from '../../components/special-dropdown/special-dropdown.interface';\r\nimport { IInputField } from '../../components/special-input/special-input.interface';\r\nimport { EControlTypes } from '../enums/control-types.enum';\r\nimport { IFieldData } from './field-basics.interfaces';\r\n\r\ninterface IcontrolName {\r\n  name: string;\r\n}\r\n\r\nexport type IFormSettings = {\r\n  formFields: IFormStructure;\r\n};\r\n\r\nexport interface IFormField extends IFieldData {\r\n  settings: IFormSettings;\r\n  type: EControlTypes.form;\r\n}\r\n\r\nexport type IArraySettings = {\r\n  formFields: IFormStructure;\r\n};\r\n\r\nexport interface IArrayField extends IFieldData {\r\n  settings: IArraySettings;\r\n  type: EControlTypes.array;\r\n}\r\n\r\nexport type TRawFields =\r\n  | IInputField\r\n  | IDropdownField\r\n  | IArrayField\r\n  | IFormField;\r\n// | TextControlFieldModel\r\n// | PhoneControlFieldModel\r\n// | LongTextControlFieldModel\r\n// | DropdownControlFieldModel\r\n// | AutocompleteControlFieldModel\r\n// | ArrayControlFieldModel\r\n// | BooleanControlFieldModel\r\n// | DateControlFieldModel\r\n// | MaskControlFieldModel\r\n// | FileControlModel\r\n// | ReadOnlyControlFieldModel\r\n// | PkeyControlFieldModel\r\n// | AuxFieldModel;\r\nexport type TSpecialInput = IInputField & IcontrolName;\r\nexport type TSpecialDropdown = IDropdownField & IcontrolName;\r\nexport type TSpecialArray = IArrayField & IcontrolName;\r\nexport type TSpecialForm = IFormField & IcontrolName;\r\n\r\nexport type TSpecialFields =\r\n  | TSpecialInput\r\n  | TSpecialDropdown\r\n  | TSpecialArray\r\n  | TSpecialForm;\r\n\r\nexport interface IFormStructure {\r\n  [name: string]: Partial<TRawFields>;\r\n}\r\n",
            "properties": [
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IArraySettings",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EControlTypes.array",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IFieldData"
        },
        {
            "name": "IcontrolName",
            "id": "interface-IcontrolName-52fddc1a1c3b95be40a4b2cdceb6b5ad70906ffec0d7eed8da42813db1c37983fe3f77caa4b2585334799c9202a68b9919df8326336658119990a4c9611ad551",
            "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IDropdownField } from '../../components/special-dropdown/special-dropdown.interface';\r\nimport { IInputField } from '../../components/special-input/special-input.interface';\r\nimport { EControlTypes } from '../enums/control-types.enum';\r\nimport { IFieldData } from './field-basics.interfaces';\r\n\r\ninterface IcontrolName {\r\n  name: string;\r\n}\r\n\r\nexport type IFormSettings = {\r\n  formFields: IFormStructure;\r\n};\r\n\r\nexport interface IFormField extends IFieldData {\r\n  settings: IFormSettings;\r\n  type: EControlTypes.form;\r\n}\r\n\r\nexport type IArraySettings = {\r\n  formFields: IFormStructure;\r\n};\r\n\r\nexport interface IArrayField extends IFieldData {\r\n  settings: IArraySettings;\r\n  type: EControlTypes.array;\r\n}\r\n\r\nexport type TRawFields =\r\n  | IInputField\r\n  | IDropdownField\r\n  | IArrayField\r\n  | IFormField;\r\n// | TextControlFieldModel\r\n// | PhoneControlFieldModel\r\n// | LongTextControlFieldModel\r\n// | DropdownControlFieldModel\r\n// | AutocompleteControlFieldModel\r\n// | ArrayControlFieldModel\r\n// | BooleanControlFieldModel\r\n// | DateControlFieldModel\r\n// | MaskControlFieldModel\r\n// | FileControlModel\r\n// | ReadOnlyControlFieldModel\r\n// | PkeyControlFieldModel\r\n// | AuxFieldModel;\r\nexport type TSpecialInput = IInputField & IcontrolName;\r\nexport type TSpecialDropdown = IDropdownField & IcontrolName;\r\nexport type TSpecialArray = IArrayField & IcontrolName;\r\nexport type TSpecialForm = IFormField & IcontrolName;\r\n\r\nexport type TSpecialFields =\r\n  | TSpecialInput\r\n  | TSpecialDropdown\r\n  | TSpecialArray\r\n  | TSpecialForm;\r\n\r\nexport interface IFormStructure {\r\n  [name: string]: Partial<TRawFields>;\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IControlParams",
            "id": "interface-IControlParams-ee18432459a069b39cc158facc0dd7b134ecb0406061f3c12858a484f14f4b5c6e9b2da0bfb47f347fea14685f8c5cbf23da6065187ba2e9204c2c2023ed3140",
            "file": "projects/special-forms/src/lib/core/services/special-form-builder/special-form-builder.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  AbstractControl,\n  FormControl,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport { IInputField } from '../../../components/special-input/special-input.interface';\nimport { EControlTypes } from '../../enums/control-types.enum';\nimport {\n  SpecialFormArray,\n  SpecialFormControl,\n  SpecialFormGroup,\n} from '../../forms/special-forms';\nimport { IFieldData } from '../../interfaces/field-basics.interfaces';\nimport {\n  IFormStructure,\n  TRawFields,\n  TSpecialArray,\n  TSpecialFields,\n  TSpecialForm,\n  TSpecialInput,\n} from '../../interfaces/form.interfaces';\n\ninterface IControlParams {\n  name: string;\n  control: AbstractControl;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SpecialFormBuilderService {\n  private readonly defectField: IFieldData = {\n    asyncValidators: null,\n    validators: null,\n    defaultValue: null,\n    elementId: '',\n    hidden: false,\n    icon: '',\n    label: '',\n    length: 0,\n    placeholder: '',\n    readOnly: false,\n    required: false,\n    styleClasses: '',\n    errorMessages: {},\n    tooltip: '',\n  };\n\n  private readonly inputDefectField: TSpecialInput = {\n    ...this.defectField,\n    settings: {},\n    type: EControlTypes.input,\n    name: '',\n  };\n\n  private readonly formDefectField: TSpecialForm = {\n    ...this.defectField,\n    settings: {\n      formFields: {},\n    },\n    type: EControlTypes.form,\n    name: '',\n  };\n\n  private readonly arrayDefectField: TSpecialArray = {\n    ...this.defectField,\n    settings: {\n      formFields: {},\n    },\n    type: EControlTypes.array,\n    name: '',\n  };\n\n  constructor() {}\n\n  public control(field: Partial<TSpecialFields>) {\n    const formField: TSpecialForm = {\n      ...this.inputDefectField,\n      ...field,\n    } as TSpecialForm;\n    return new SpecialFormControl(formField);\n  }\n\n  public group(fields: IFormStructure) {\n    return this.formGenerator(this.fieldDataToArray(fields), {});\n  }\n\n  public array() {}\n\n  public fieldDataToArray(fields: IFormStructure): TSpecialFields[] {\n    return Object.entries(fields).map(([name, field]) =>\n      this.setDefectFieldOptions(name, field)\n    );\n  }\n\n  private setDefectFieldOptions(\n    name: string,\n    field: Partial<TRawFields>\n  ): TSpecialFields {\n    return {\n      name,\n      ...this.inputDefectField,\n      ...field,\n    } as TSpecialFields;\n  }\n\n  private formGenerator(\n    fields: TSpecialFields[],\n    field: Partial<TSpecialForm>\n  ): SpecialFormGroup {\n    const formField: TSpecialForm = {\n      ...this.formDefectField,\n      ...field,\n    };\n    const structure = fields\n      .map((field) => {\n        switch (field.type) {\n          case EControlTypes.array:\n            return this.setFormArray(field);\n          case EControlTypes.form:\n            return this.setFormGroup(field);\n          default:\n            return this.setFormControl(field);\n        }\n      })\n      .reduce(\n        (prev, { name, control }: IControlParams) => ({\n          ...prev,\n          [name]: control,\n        }),\n        {}\n      );\n    return new SpecialFormGroup(formField, structure);\n  }\n\n  setFormGroup(field: TSpecialForm): IControlParams {\n    const control = this.formGenerator(\n      this.fieldDataToArray(field.settings.formFields),\n      field\n    );\n    return { control, name: field.name };\n  }\n\n  private setFormArray(field: TSpecialArray): IControlParams {\n    const auxForm = this.formGenerator(\n      this.fieldDataToArray(field.settings.formFields),\n      {}\n    );\n\n    if (field.required) {\n      field.validators = this.setValidatorsArray(field.validators, [\n        this.arrayLengthRequired,\n      ]);\n    }\n\n    return {\n      name: field.name,\n      control: new SpecialFormArray(field, auxForm, []),\n    };\n  }\n\n  private setFormControl(field: TSpecialFields): IControlParams {\n    const validators: ValidatorFn[] = [];\n\n    if (field.required) validators.push(Validators.required);\n    if (field.length) validators.push(Validators.maxLength(field.length));\n\n    field.validators = this.setValidatorsArray(field.validators, validators);\n\n    return {\n      name: field.name,\n      control: new SpecialFormControl(field),\n    };\n  }\n\n  private setValidatorsArray(\n    validators: ValidatorFn | ValidatorFn[] | null,\n    newValidators: ValidatorFn[]\n  ): ValidatorFn[] {\n    if (!validators) {\n      return newValidators;\n    }\n    return validators instanceof Array\n      ? [...validators, ...newValidators]\n      : [validators, ...newValidators];\n  }\n\n  private arrayLengthRequired(control: AbstractControl) {\n    if (control.value.length) {\n      return {};\n    }\n    return { noItems: 'NO_SELECTED_ITEM' };\n  }\n}\n",
            "properties": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AbstractControl",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IDropdownField",
            "id": "interface-IDropdownField-4121b9eda46cf58331b66dbd6a825d61a93e2a02591dcde9720d96e4b5f24a7545bd4b11fcee914c5fdcd0dd5603691c1264f672768e195a093b10f1d675b7cd",
            "file": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { EControlTypes } from '../../core/enums/control-types.enum';\r\nimport { IFieldData } from '../../core/interfaces/field-basics.interfaces';\r\n\r\nexport type IDropdownSettings = {\r\n  source: Observable<any[]>;\r\n  fieldId: string;\r\n  fieldName: string | ((a?: any) => string);\r\n};\r\n\r\nexport interface IDropdownField extends IFieldData {\r\n  settings: IDropdownSettings;\r\n  type: EControlTypes.dropdown;\r\n}\r\n",
            "properties": [
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDropdownSettings",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EControlTypes.dropdown",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IFieldData"
        },
        {
            "name": "IFieldBasicData",
            "id": "interface-IFieldBasicData-7c8dd1c105165cb095ce1c7d09f03565c57a08cf8716845f00cfc0f327bc2a50d585950791686c807a21d1951ccdbe19f8b8579a1afd9043dc33a995d877603e",
            "file": "projects/special-forms/src/lib/core/interfaces/field-basics.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AsyncValidatorFn, ValidatorFn } from '@angular/forms';\r\n\r\nexport interface IFieldBasicData {\r\n  placeholder: string;\r\n  label: string;\r\n  tooltip: string;\r\n  icon: string;\r\n  elementId: string;\r\n  styleClasses: string;\r\n  length: number;\r\n  required: boolean;\r\n  hidden: boolean;\r\n  readOnly: boolean;\r\n  errorMessages: { [key: string]: string };\r\n}\r\n\r\nexport interface IFieldData extends IFieldBasicData {\r\n  validators: ValidatorFn | ValidatorFn[] | null;\r\n  asyncValidators: AsyncValidatorFn | AsyncValidatorFn[] | null;\r\n  defaultValue: any;\r\n}\r\n",
            "properties": [
                {
                    "name": "elementId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "errorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "length",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "readOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "styleClasses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IFieldData",
            "id": "interface-IFieldData-7c8dd1c105165cb095ce1c7d09f03565c57a08cf8716845f00cfc0f327bc2a50d585950791686c807a21d1951ccdbe19f8b8579a1afd9043dc33a995d877603e",
            "file": "projects/special-forms/src/lib/core/interfaces/field-basics.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AsyncValidatorFn, ValidatorFn } from '@angular/forms';\r\n\r\nexport interface IFieldBasicData {\r\n  placeholder: string;\r\n  label: string;\r\n  tooltip: string;\r\n  icon: string;\r\n  elementId: string;\r\n  styleClasses: string;\r\n  length: number;\r\n  required: boolean;\r\n  hidden: boolean;\r\n  readOnly: boolean;\r\n  errorMessages: { [key: string]: string };\r\n}\r\n\r\nexport interface IFieldData extends IFieldBasicData {\r\n  validators: ValidatorFn | ValidatorFn[] | null;\r\n  asyncValidators: AsyncValidatorFn | AsyncValidatorFn[] | null;\r\n  defaultValue: any;\r\n}\r\n",
            "properties": [
                {
                    "name": "asyncValidators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AsyncValidatorFn | AsyncValidatorFn[] | null",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "validators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn | ValidatorFn[] | null",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IFieldBasicData"
        },
        {
            "name": "IFormField",
            "id": "interface-IFormField-52fddc1a1c3b95be40a4b2cdceb6b5ad70906ffec0d7eed8da42813db1c37983fe3f77caa4b2585334799c9202a68b9919df8326336658119990a4c9611ad551",
            "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IDropdownField } from '../../components/special-dropdown/special-dropdown.interface';\r\nimport { IInputField } from '../../components/special-input/special-input.interface';\r\nimport { EControlTypes } from '../enums/control-types.enum';\r\nimport { IFieldData } from './field-basics.interfaces';\r\n\r\ninterface IcontrolName {\r\n  name: string;\r\n}\r\n\r\nexport type IFormSettings = {\r\n  formFields: IFormStructure;\r\n};\r\n\r\nexport interface IFormField extends IFieldData {\r\n  settings: IFormSettings;\r\n  type: EControlTypes.form;\r\n}\r\n\r\nexport type IArraySettings = {\r\n  formFields: IFormStructure;\r\n};\r\n\r\nexport interface IArrayField extends IFieldData {\r\n  settings: IArraySettings;\r\n  type: EControlTypes.array;\r\n}\r\n\r\nexport type TRawFields =\r\n  | IInputField\r\n  | IDropdownField\r\n  | IArrayField\r\n  | IFormField;\r\n// | TextControlFieldModel\r\n// | PhoneControlFieldModel\r\n// | LongTextControlFieldModel\r\n// | DropdownControlFieldModel\r\n// | AutocompleteControlFieldModel\r\n// | ArrayControlFieldModel\r\n// | BooleanControlFieldModel\r\n// | DateControlFieldModel\r\n// | MaskControlFieldModel\r\n// | FileControlModel\r\n// | ReadOnlyControlFieldModel\r\n// | PkeyControlFieldModel\r\n// | AuxFieldModel;\r\nexport type TSpecialInput = IInputField & IcontrolName;\r\nexport type TSpecialDropdown = IDropdownField & IcontrolName;\r\nexport type TSpecialArray = IArrayField & IcontrolName;\r\nexport type TSpecialForm = IFormField & IcontrolName;\r\n\r\nexport type TSpecialFields =\r\n  | TSpecialInput\r\n  | TSpecialDropdown\r\n  | TSpecialArray\r\n  | TSpecialForm;\r\n\r\nexport interface IFormStructure {\r\n  [name: string]: Partial<TRawFields>;\r\n}\r\n",
            "properties": [
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFormSettings",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EControlTypes.form",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IFieldData"
        },
        {
            "name": "IFormStructure",
            "id": "interface-IFormStructure-52fddc1a1c3b95be40a4b2cdceb6b5ad70906ffec0d7eed8da42813db1c37983fe3f77caa4b2585334799c9202a68b9919df8326336658119990a4c9611ad551",
            "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IDropdownField } from '../../components/special-dropdown/special-dropdown.interface';\r\nimport { IInputField } from '../../components/special-input/special-input.interface';\r\nimport { EControlTypes } from '../enums/control-types.enum';\r\nimport { IFieldData } from './field-basics.interfaces';\r\n\r\ninterface IcontrolName {\r\n  name: string;\r\n}\r\n\r\nexport type IFormSettings = {\r\n  formFields: IFormStructure;\r\n};\r\n\r\nexport interface IFormField extends IFieldData {\r\n  settings: IFormSettings;\r\n  type: EControlTypes.form;\r\n}\r\n\r\nexport type IArraySettings = {\r\n  formFields: IFormStructure;\r\n};\r\n\r\nexport interface IArrayField extends IFieldData {\r\n  settings: IArraySettings;\r\n  type: EControlTypes.array;\r\n}\r\n\r\nexport type TRawFields =\r\n  | IInputField\r\n  | IDropdownField\r\n  | IArrayField\r\n  | IFormField;\r\n// | TextControlFieldModel\r\n// | PhoneControlFieldModel\r\n// | LongTextControlFieldModel\r\n// | DropdownControlFieldModel\r\n// | AutocompleteControlFieldModel\r\n// | ArrayControlFieldModel\r\n// | BooleanControlFieldModel\r\n// | DateControlFieldModel\r\n// | MaskControlFieldModel\r\n// | FileControlModel\r\n// | ReadOnlyControlFieldModel\r\n// | PkeyControlFieldModel\r\n// | AuxFieldModel;\r\nexport type TSpecialInput = IInputField & IcontrolName;\r\nexport type TSpecialDropdown = IDropdownField & IcontrolName;\r\nexport type TSpecialArray = IArrayField & IcontrolName;\r\nexport type TSpecialForm = IFormField & IcontrolName;\r\n\r\nexport type TSpecialFields =\r\n  | TSpecialInput\r\n  | TSpecialDropdown\r\n  | TSpecialArray\r\n  | TSpecialForm;\r\n\r\nexport interface IFormStructure {\r\n  [name: string]: Partial<TRawFields>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-52fddc1a1c3b95be40a4b2cdceb6b5ad70906ffec0d7eed8da42813db1c37983fe3f77caa4b2585334799c9202a68b9919df8326336658119990a4c9611ad551",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Partial<TRawFields>",
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 175,
            "methods": []
        },
        {
            "name": "IInputField",
            "id": "interface-IInputField-5cbe8bd5c1e9bdbba668087761e870e2194a329b5e837871a4c09f164bc028ca2f4af7348e19d91deb93c2e78b2cf7477ff753e3bbf2fcebd5dedd26844fe9be",
            "file": "projects/special-forms/src/lib/components/special-input/special-input.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { InputmaskOptions } from '@ngneat/input-mask';\r\nimport { EControlTypes } from '../../core/enums/control-types.enum';\r\nimport { IFieldData } from '../../core/interfaces/field-basics.interfaces';\r\n\r\nexport type IInputSettings = {\r\n  type?: string;\r\n  icon?: string;\r\n  mask?: InputmaskOptions<any>;\r\n};\r\n\r\nexport interface IInputField extends IFieldData {\r\n  settings: IInputSettings;\r\n  type: EControlTypes.input;\r\n}\r\n",
            "properties": [
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IInputSettings",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EControlTypes.input",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IFieldData"
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "SpecialFormBuilderService",
            "id": "injectable-SpecialFormBuilderService-ee18432459a069b39cc158facc0dd7b134ecb0406061f3c12858a484f14f4b5c6e9b2da0bfb47f347fea14685f8c5cbf23da6065187ba2e9204c2c2023ed3140",
            "file": "projects/special-forms/src/lib/core/services/special-form-builder/special-form-builder.service.ts",
            "properties": [
                {
                    "name": "arrayDefectField",
                    "defaultValue": "{\n    ...this.defectField,\n    settings: {\n      formFields: {},\n    },\n    type: EControlTypes.array,\n    name: '',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TSpecialArray",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "defectField",
                    "defaultValue": "{\n    asyncValidators: null,\n    validators: null,\n    defaultValue: null,\n    elementId: '',\n    hidden: false,\n    icon: '',\n    label: '',\n    length: 0,\n    placeholder: '',\n    readOnly: false,\n    required: false,\n    styleClasses: '',\n    errorMessages: {},\n    tooltip: '',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFieldData",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "formDefectField",
                    "defaultValue": "{\n    ...this.defectField,\n    settings: {\n      formFields: {},\n    },\n    type: EControlTypes.form,\n    name: '',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TSpecialForm",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "inputDefectField",
                    "defaultValue": "{\n    ...this.defectField,\n    settings: {},\n    type: EControlTypes.input,\n    name: '',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TSpecialInput",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "array",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "arrayLengthRequired",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ noItems?: undefined; } | { noItems: string; }",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "control",
                    "args": [
                        {
                            "name": "field",
                            "type": "Partial<TSpecialFields>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "Partial<TSpecialFields>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fieldDataToArray",
                    "args": [
                        {
                            "name": "fields",
                            "type": "IFormStructure",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TSpecialFields[]",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "IFormStructure",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formGenerator",
                    "args": [
                        {
                            "name": "fields",
                            "type": "TSpecialFields[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "field",
                            "type": "Partial<TSpecialForm>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SpecialFormGroup",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "TSpecialFields[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field",
                            "type": "Partial<TSpecialForm>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "group",
                    "args": [
                        {
                            "name": "fields",
                            "type": "IFormStructure",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SpecialFormGroup",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "IFormStructure",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDefectFieldOptions",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "field",
                            "type": "Partial<TRawFields>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TSpecialFields",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field",
                            "type": "Partial<TRawFields>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFormArray",
                    "args": [
                        {
                            "name": "field",
                            "type": "TSpecialArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IControlParams",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "TSpecialArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFormControl",
                    "args": [
                        {
                            "name": "field",
                            "type": "TSpecialFields",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IControlParams",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "TSpecialFields",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFormGroup",
                    "args": [
                        {
                            "name": "field",
                            "type": "TSpecialForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IControlParams",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "TSpecialForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setValidatorsArray",
                    "args": [
                        {
                            "name": "validators",
                            "type": "ValidatorFn | ValidatorFn[] | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newValidators",
                            "type": "ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "validators",
                            "type": "ValidatorFn | ValidatorFn[] | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newValidators",
                            "type": "ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  AbstractControl,\n  FormControl,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport { IInputField } from '../../../components/special-input/special-input.interface';\nimport { EControlTypes } from '../../enums/control-types.enum';\nimport {\n  SpecialFormArray,\n  SpecialFormControl,\n  SpecialFormGroup,\n} from '../../forms/special-forms';\nimport { IFieldData } from '../../interfaces/field-basics.interfaces';\nimport {\n  IFormStructure,\n  TRawFields,\n  TSpecialArray,\n  TSpecialFields,\n  TSpecialForm,\n  TSpecialInput,\n} from '../../interfaces/form.interfaces';\n\ninterface IControlParams {\n  name: string;\n  control: AbstractControl;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SpecialFormBuilderService {\n  private readonly defectField: IFieldData = {\n    asyncValidators: null,\n    validators: null,\n    defaultValue: null,\n    elementId: '',\n    hidden: false,\n    icon: '',\n    label: '',\n    length: 0,\n    placeholder: '',\n    readOnly: false,\n    required: false,\n    styleClasses: '',\n    errorMessages: {},\n    tooltip: '',\n  };\n\n  private readonly inputDefectField: TSpecialInput = {\n    ...this.defectField,\n    settings: {},\n    type: EControlTypes.input,\n    name: '',\n  };\n\n  private readonly formDefectField: TSpecialForm = {\n    ...this.defectField,\n    settings: {\n      formFields: {},\n    },\n    type: EControlTypes.form,\n    name: '',\n  };\n\n  private readonly arrayDefectField: TSpecialArray = {\n    ...this.defectField,\n    settings: {\n      formFields: {},\n    },\n    type: EControlTypes.array,\n    name: '',\n  };\n\n  constructor() {}\n\n  public control(field: Partial<TSpecialFields>) {\n    const formField: TSpecialForm = {\n      ...this.inputDefectField,\n      ...field,\n    } as TSpecialForm;\n    return new SpecialFormControl(formField);\n  }\n\n  public group(fields: IFormStructure) {\n    return this.formGenerator(this.fieldDataToArray(fields), {});\n  }\n\n  public array() {}\n\n  public fieldDataToArray(fields: IFormStructure): TSpecialFields[] {\n    return Object.entries(fields).map(([name, field]) =>\n      this.setDefectFieldOptions(name, field)\n    );\n  }\n\n  private setDefectFieldOptions(\n    name: string,\n    field: Partial<TRawFields>\n  ): TSpecialFields {\n    return {\n      name,\n      ...this.inputDefectField,\n      ...field,\n    } as TSpecialFields;\n  }\n\n  private formGenerator(\n    fields: TSpecialFields[],\n    field: Partial<TSpecialForm>\n  ): SpecialFormGroup {\n    const formField: TSpecialForm = {\n      ...this.formDefectField,\n      ...field,\n    };\n    const structure = fields\n      .map((field) => {\n        switch (field.type) {\n          case EControlTypes.array:\n            return this.setFormArray(field);\n          case EControlTypes.form:\n            return this.setFormGroup(field);\n          default:\n            return this.setFormControl(field);\n        }\n      })\n      .reduce(\n        (prev, { name, control }: IControlParams) => ({\n          ...prev,\n          [name]: control,\n        }),\n        {}\n      );\n    return new SpecialFormGroup(formField, structure);\n  }\n\n  setFormGroup(field: TSpecialForm): IControlParams {\n    const control = this.formGenerator(\n      this.fieldDataToArray(field.settings.formFields),\n      field\n    );\n    return { control, name: field.name };\n  }\n\n  private setFormArray(field: TSpecialArray): IControlParams {\n    const auxForm = this.formGenerator(\n      this.fieldDataToArray(field.settings.formFields),\n      {}\n    );\n\n    if (field.required) {\n      field.validators = this.setValidatorsArray(field.validators, [\n        this.arrayLengthRequired,\n      ]);\n    }\n\n    return {\n      name: field.name,\n      control: new SpecialFormArray(field, auxForm, []),\n    };\n  }\n\n  private setFormControl(field: TSpecialFields): IControlParams {\n    const validators: ValidatorFn[] = [];\n\n    if (field.required) validators.push(Validators.required);\n    if (field.length) validators.push(Validators.maxLength(field.length));\n\n    field.validators = this.setValidatorsArray(field.validators, validators);\n\n    return {\n      name: field.name,\n      control: new SpecialFormControl(field),\n    };\n  }\n\n  private setValidatorsArray(\n    validators: ValidatorFn | ValidatorFn[] | null,\n    newValidators: ValidatorFn[]\n  ): ValidatorFn[] {\n    if (!validators) {\n      return newValidators;\n    }\n    return validators instanceof Array\n      ? [...validators, ...newValidators]\n      : [validators, ...newValidators];\n  }\n\n  private arrayLengthRequired(control: AbstractControl) {\n    if (control.value.length) {\n      return {};\n    }\n    return { noItems: 'NO_SELECTED_ITEM' };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 74
            },
            "type": "injectable"
        },
        {
            "name": "SpecialFormsService",
            "id": "injectable-SpecialFormsService-f836421e76ff546d82fb0c026c13734427696916045f62c908e2d68d836e22a2555612a2dac110e44bb90fcfbe5c57fae231673622d97cee41e1917b007f59f7",
            "file": "projects/special-forms/src/lib/special-forms.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SpecialFormsService {\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "SpecialFormArray",
            "id": "class-SpecialFormArray-ab8e238cbb4a8f95a17e7da6b3d014a262503b8d9341167246bb37b718b20c58b10ed6382e1d3f6debeed76a44960d915418caddbc966a170ba99e97215ef78c",
            "file": "projects/special-forms/src/lib/core/forms/special-forms.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\r\n  AbstractControl,\r\n  FormArray,\r\n  FormControl,\r\n  FormGroup,\r\n} from '@angular/forms';\r\nimport * as _ from 'lodash';\r\nimport { EControlTypes } from '../enums/control-types.enum';\r\nimport { IFieldBasicData } from '../interfaces/field-basics.interfaces';\r\nimport {\r\n  IArraySettings,\r\n  IFormSettings,\r\n  TSpecialFields,\r\n  TSpecialForm,\r\n  TSpecialArray,\r\n} from '../interfaces/form.interfaces';\r\n\r\nexport class SpecialFormControl<T>\r\n  extends FormControl\r\n  implements IFieldBasicData\r\n{\r\n  public name: string;\r\n  public placeholder: string;\r\n  public label: string;\r\n  public tooltip: string;\r\n  public icon: string;\r\n  public elementId: string;\r\n  public styleClasses: string;\r\n  public length: number;\r\n  public required: boolean;\r\n  public hidden: boolean;\r\n  public readOnly: boolean;\r\n  public settings: T;\r\n  public type: EControlTypes;\r\n  public errorMessages: { [key: string]: string };\r\n\r\n  constructor({\r\n    name,\r\n    settings,\r\n    type,\r\n    validators,\r\n    asyncValidators,\r\n    elementId,\r\n    styleClasses,\r\n    defaultValue,\r\n    hidden,\r\n    icon,\r\n    label,\r\n    length,\r\n    placeholder,\r\n    readOnly,\r\n    required,\r\n    tooltip,\r\n    errorMessages\r\n  }: TSpecialFields) {\r\n    super(defaultValue, validators, asyncValidators);\r\n\r\n    this.name = name;\r\n    this.placeholder = placeholder;\r\n    this.label = label;\r\n    this.tooltip = tooltip;\r\n    this.icon = icon;\r\n    this.elementId = elementId;\r\n    this.settings = settings as T;\r\n    this.type = type;\r\n    this.styleClasses = styleClasses;\r\n    this.hidden = hidden;\r\n    this.length = length;\r\n    this.readOnly = readOnly;\r\n    this.required = required;\r\n    this.errorMessages=errorMessages;\r\n  }\r\n\r\n  setReadOnly(status: boolean = true) {\r\n    this.readOnly = status;\r\n  }\r\n\r\n  setDisabled(status: boolean = true) {\r\n    status ? this.disable() : this.enable();\r\n  }\r\n\r\n  setHidden(status = true) {\r\n    this.hidden = status;\r\n  }\r\n}\r\nexport class SpecialFormGroup extends FormGroup implements IFieldBasicData {\r\n  public name: string;\r\n  public placeholder: string;\r\n  public label: string;\r\n  public tooltip: string;\r\n  public icon: string;\r\n  public elementId: string;\r\n  public styleClasses: string;\r\n  public length: number;\r\n  public required: boolean;\r\n  public hidden: boolean;\r\n  public readOnly: boolean;\r\n  public settings: IFormSettings;\r\n  public type: EControlTypes;\r\n  public defaultValue: any;\r\n  public errorMessages: { [key: string]: string };\r\n\r\n  constructor(\r\n    {\r\n      name,\r\n      settings,\r\n      type,\r\n      validators,\r\n      asyncValidators,\r\n      elementId,\r\n      styleClasses,\r\n      defaultValue,\r\n      hidden,\r\n      icon,\r\n      label,\r\n      length,\r\n      placeholder,\r\n      readOnly,\r\n      required,\r\n      tooltip,\r\n    }: TSpecialForm,\r\n    controls: {\r\n      [key: string]: SpecialFormControl<any>;\r\n    }\r\n  ) {\r\n    super(controls, validators, asyncValidators);\r\n\r\n    this.name = name;\r\n    this.placeholder = placeholder;\r\n    this.label = label;\r\n    this.tooltip = tooltip;\r\n    this.icon = icon;\r\n    this.elementId = elementId;\r\n    this.settings = settings;\r\n    this.type = type;\r\n    this.styleClasses = styleClasses;\r\n    this.hidden = hidden;\r\n    this.length = length;\r\n    this.readOnly = readOnly;\r\n    this.required = required;\r\n    this.defaultValue = defaultValue;\r\n  }\r\n\r\n  unpristineRequired() {\r\n    Object.values(this.controls).forEach((control) => {\r\n      if (control instanceof SpecialFormControl) {\r\n        control.markAsDirty();\r\n      } else if (control instanceof SpecialFormGroup) {\r\n        control.unpristineRequired();\r\n      } else if (control instanceof SpecialFormArray) {\r\n        control.unpristineRequired();\r\n      }\r\n    });\r\n  }\r\n\r\n  specialReset(value = {}) {\r\n    const aux: any = {};\r\n    Object.entries(this.controls).map(([key, control]) => {\r\n      if (control instanceof SpecialFormControl) {\r\n        aux[key] = control.defaultValue;\r\n      } else if (control instanceof SpecialFormArray) {\r\n        control.clear();\r\n      }\r\n    });\r\n\r\n    this.reset({ ...aux, ...value });\r\n  }\r\n  setReadOnly(status: boolean = true) {\r\n    Object.values(this.controls).map((value) => {\r\n      if (\r\n        value instanceof SpecialFormControl ||\r\n        value instanceof SpecialFormArray ||\r\n        value instanceof SpecialFormGroup\r\n      ) {\r\n        value.setReadOnly(status);\r\n      }\r\n    });\r\n  }\r\n  setReadOnlyByFields(fieldsObject: { [key: string]: boolean }) {\r\n    Object.entries(fieldsObject).map(([key, value]) => {\r\n      const control = this.controls[key];\r\n      if (control instanceof SpecialFormControl) {\r\n        control.readOnly = value;\r\n      }\r\n    });\r\n  }\r\n\r\n  setHiddenByFields(fields: { [key: string]: boolean }) {\r\n    Object.entries(fields).map(([key, value]) => {\r\n      const control = this.controls[key];\r\n      if (control instanceof SpecialFormControl) {\r\n        control.hidden = value;\r\n      }\r\n    });\r\n  }\r\n  setDisabled(status: boolean) {\r\n    Object.values(this.controls).map((value) => {\r\n      if (\r\n        value instanceof SpecialFormControl ||\r\n        value instanceof SpecialFormArray ||\r\n        value instanceof SpecialFormGroup\r\n      ) {\r\n        value.setDisabled(status);\r\n      }\r\n    });\r\n  }\r\n\r\n  setDisabledByFields(fieldsObject: any) {\r\n    Object.entries(fieldsObject).map((entries) => {\r\n      if (this.controls[entries[0]] instanceof SpecialFormControl) {\r\n        entries[1]\r\n          ? this.controls[entries[0]].enable()\r\n          : this.controls[entries[0]].disable();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * donde value es el objeto semilla y detailForm es un arreglo de form key para dar un marco al formarray\r\n   */\r\n\r\n  setFormValue(value: any) {\r\n    this.specialReset(value);\r\n    Object.entries(this.controls)\r\n      .filter(([_key, control]) => control instanceof SpecialFormArray)\r\n      .map(([key, control]) => {\r\n        (control as SpecialFormArray).fillFormArray(value[key]);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Método que retorna\r\n   */\r\n\r\n  getIdPkey(): SpecialFormControl<any> | undefined {\r\n    return Object.values(this.controls).find(\r\n      (control) =>\r\n        control instanceof SpecialFormControl &&\r\n        control.type === EControlTypes.pkey\r\n    ) as SpecialFormControl<any> | undefined;\r\n  }\r\n}\r\n\r\nexport class SpecialFormArray\r\n  extends FormArray\r\n  implements Partial<IFieldBasicData>\r\n{\r\n  public name?: string;\r\n  public placeholder?: string;\r\n  public label?: string;\r\n  public tooltip?: string;\r\n  public icon?: string;\r\n  public elementId?: string;\r\n  public styleClasses?: string;\r\n  public required?: boolean;\r\n  public hidden?: boolean;\r\n  public readOnly?: boolean;\r\n  public settings?: IArraySettings;\r\n  public type?: EControlTypes;\r\n  public defaultValue?: any;\r\n  public form: SpecialFormGroup;\r\n\r\n  constructor(\r\n    {\r\n      name,\r\n      settings,\r\n      type,\r\n      validators,\r\n      asyncValidators,\r\n      elementId,\r\n      styleClasses,\r\n      defaultValue,\r\n      hidden,\r\n      icon,\r\n      label,\r\n      placeholder,\r\n      readOnly,\r\n      required,\r\n      tooltip,\r\n      errorMessages,\r\n    }: Partial<TSpecialArray>,\r\n    form: SpecialFormGroup,\r\n    controls: AbstractControl[]\r\n  ) {\r\n    super(controls, validators, asyncValidators);\r\n    this.form = form;\r\n    this.name = name;\r\n    this.placeholder = placeholder;\r\n    this.label = label;\r\n    this.tooltip = tooltip;\r\n    this.icon = icon;\r\n    this.elementId = elementId;\r\n    this.settings = settings;\r\n    this.type = type;\r\n    this.styleClasses = styleClasses;\r\n    this.hidden = hidden;\r\n    this.readOnly = readOnly;\r\n    this.required = required;\r\n    this.defaultValue = defaultValue;\r\n  }\r\n\r\n  fillFormArray(data: any[]) {\r\n    this.clear();\r\n    data.map((item) => {\r\n      this.form.specialReset(item);\r\n      this.push(_.cloneDeep(this.form));\r\n    });\r\n    this.form.reset();\r\n  }\r\n\r\n  addItem(item: any) {\r\n    this.form.specialReset(item);\r\n    this.push(_.cloneDeep(this.form));\r\n    this.form.specialReset();\r\n    this.markAsDirty();\r\n  }\r\n\r\n  SpecialPush(index?: number) {\r\n    if (!index) this.push(_.cloneDeep(this.form));\r\n    else this.controls[index].reset(this.form.value);\r\n  }\r\n\r\n  SpecialInsert(index = 0) {\r\n    this.insert(index, _.cloneDeep(this.form));\r\n  }\r\n\r\n  SpecialEdit(index: number, newValue: Object) {\r\n    this.controls[index].reset({ ...this.controls[index].value, ...newValue });\r\n    this.markAsDirty();\r\n  }\r\n\r\n  /**\r\n   * Vuelve todos los controles del formArray de lectura o de sololectura\r\n   * @param status\r\n   */\r\n\r\n  setReadOnly(status: boolean) {\r\n    this.readOnly = status;\r\n    this.controls.forEach((control) => {\r\n      if (control instanceof SpecialFormGroup) {\r\n        control.setReadOnly(status);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Vuelve todos los controles del formArray habilitados o deshabilitados\r\n   * @param status\r\n   */\r\n\r\n  setDisabled(status: boolean) {\r\n    status ? this.disable() : this.enable();\r\n    this.controls.forEach((control) => {\r\n      if (control instanceof SpecialFormGroup) {\r\n        control.setDisabled(status);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Permite editar un control especifico.\r\n   * @param index\r\n   */\r\n\r\n  editControl(index: number) {\r\n    this.form.reset(this.controls[index].value);\r\n  }\r\n\r\n  unpristineRequired() {\r\n    this.markAsDirty();\r\n    this.controls.forEach((item) => {\r\n      (<SpecialFormGroup>item).unpristineRequired();\r\n    });\r\n  }\r\n\r\n  recursiveFillForm(form: FormGroup, data: any): FormGroup {\r\n    Object.entries(form.controls).map(([key, control]) => {\r\n      if (control instanceof FormControl) {\r\n        control.setValue(data[key]);\r\n      } else if (control instanceof FormArray) {\r\n        data[key].forEach(() => {});\r\n      } else if (control instanceof FormGroup) {\r\n        control.reset(data[key]);\r\n      }\r\n    });\r\n    return form;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "type": "Partial<TSpecialArray>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "form",
                        "type": "SpecialFormGroup",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "controls",
                        "type": "AbstractControl[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 261,
                "jsdoctags": [
                    {
                        "type": "Partial<TSpecialArray>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "form",
                        "type": "SpecialFormGroup",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "controls",
                        "type": "AbstractControl[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 260,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "elementId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 253,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpecialFormGroup",
                    "optional": false,
                    "description": "",
                    "line": 261,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 256,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 252,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 250,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 248,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 249,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "readOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 257,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 255,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IArraySettings",
                    "optional": true,
                    "description": "",
                    "line": 258,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "styleClasses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 254,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 251,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EControlTypes",
                    "optional": true,
                    "description": "",
                    "line": 259,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 311,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editControl",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 365,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPermite editar un control especifico.\n",
                    "description": "<p>Permite editar un control especifico.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9163,
                                "end": 9168,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9157,
                                "end": 9162,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "fillFormArray",
                    "args": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 302,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "recursiveFillForm",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 376,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabled",
                    "args": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 351,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nVuelve todos los controles del formArray habilitados o deshabilitados\n",
                    "description": "<p>Vuelve todos los controles del formArray habilitados o deshabilitados</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8848,
                                "end": 8854,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "status"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8842,
                                "end": 8847,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setReadOnly",
                    "args": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 337,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nVuelve todos los controles del formArray de lectura o de sololectura\n",
                    "description": "<p>Vuelve todos los controles del formArray de lectura o de sololectura</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8518,
                                "end": 8524,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "status"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8512,
                                "end": 8517,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "SpecialEdit",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newValue",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 327,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newValue",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "SpecialInsert",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 323,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "SpecialPush",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 318,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unpristineRequired",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 369,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "extends": "FormArray",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Partial"
            ]
        },
        {
            "name": "SpecialFormControl",
            "id": "class-SpecialFormControl-ab8e238cbb4a8f95a17e7da6b3d014a262503b8d9341167246bb37b718b20c58b10ed6382e1d3f6debeed76a44960d915418caddbc966a170ba99e97215ef78c",
            "file": "projects/special-forms/src/lib/core/forms/special-forms.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\r\n  AbstractControl,\r\n  FormArray,\r\n  FormControl,\r\n  FormGroup,\r\n} from '@angular/forms';\r\nimport * as _ from 'lodash';\r\nimport { EControlTypes } from '../enums/control-types.enum';\r\nimport { IFieldBasicData } from '../interfaces/field-basics.interfaces';\r\nimport {\r\n  IArraySettings,\r\n  IFormSettings,\r\n  TSpecialFields,\r\n  TSpecialForm,\r\n  TSpecialArray,\r\n} from '../interfaces/form.interfaces';\r\n\r\nexport class SpecialFormControl<T>\r\n  extends FormControl\r\n  implements IFieldBasicData\r\n{\r\n  public name: string;\r\n  public placeholder: string;\r\n  public label: string;\r\n  public tooltip: string;\r\n  public icon: string;\r\n  public elementId: string;\r\n  public styleClasses: string;\r\n  public length: number;\r\n  public required: boolean;\r\n  public hidden: boolean;\r\n  public readOnly: boolean;\r\n  public settings: T;\r\n  public type: EControlTypes;\r\n  public errorMessages: { [key: string]: string };\r\n\r\n  constructor({\r\n    name,\r\n    settings,\r\n    type,\r\n    validators,\r\n    asyncValidators,\r\n    elementId,\r\n    styleClasses,\r\n    defaultValue,\r\n    hidden,\r\n    icon,\r\n    label,\r\n    length,\r\n    placeholder,\r\n    readOnly,\r\n    required,\r\n    tooltip,\r\n    errorMessages\r\n  }: TSpecialFields) {\r\n    super(defaultValue, validators, asyncValidators);\r\n\r\n    this.name = name;\r\n    this.placeholder = placeholder;\r\n    this.label = label;\r\n    this.tooltip = tooltip;\r\n    this.icon = icon;\r\n    this.elementId = elementId;\r\n    this.settings = settings as T;\r\n    this.type = type;\r\n    this.styleClasses = styleClasses;\r\n    this.hidden = hidden;\r\n    this.length = length;\r\n    this.readOnly = readOnly;\r\n    this.required = required;\r\n    this.errorMessages=errorMessages;\r\n  }\r\n\r\n  setReadOnly(status: boolean = true) {\r\n    this.readOnly = status;\r\n  }\r\n\r\n  setDisabled(status: boolean = true) {\r\n    status ? this.disable() : this.enable();\r\n  }\r\n\r\n  setHidden(status = true) {\r\n    this.hidden = status;\r\n  }\r\n}\r\nexport class SpecialFormGroup extends FormGroup implements IFieldBasicData {\r\n  public name: string;\r\n  public placeholder: string;\r\n  public label: string;\r\n  public tooltip: string;\r\n  public icon: string;\r\n  public elementId: string;\r\n  public styleClasses: string;\r\n  public length: number;\r\n  public required: boolean;\r\n  public hidden: boolean;\r\n  public readOnly: boolean;\r\n  public settings: IFormSettings;\r\n  public type: EControlTypes;\r\n  public defaultValue: any;\r\n  public errorMessages: { [key: string]: string };\r\n\r\n  constructor(\r\n    {\r\n      name,\r\n      settings,\r\n      type,\r\n      validators,\r\n      asyncValidators,\r\n      elementId,\r\n      styleClasses,\r\n      defaultValue,\r\n      hidden,\r\n      icon,\r\n      label,\r\n      length,\r\n      placeholder,\r\n      readOnly,\r\n      required,\r\n      tooltip,\r\n    }: TSpecialForm,\r\n    controls: {\r\n      [key: string]: SpecialFormControl<any>;\r\n    }\r\n  ) {\r\n    super(controls, validators, asyncValidators);\r\n\r\n    this.name = name;\r\n    this.placeholder = placeholder;\r\n    this.label = label;\r\n    this.tooltip = tooltip;\r\n    this.icon = icon;\r\n    this.elementId = elementId;\r\n    this.settings = settings;\r\n    this.type = type;\r\n    this.styleClasses = styleClasses;\r\n    this.hidden = hidden;\r\n    this.length = length;\r\n    this.readOnly = readOnly;\r\n    this.required = required;\r\n    this.defaultValue = defaultValue;\r\n  }\r\n\r\n  unpristineRequired() {\r\n    Object.values(this.controls).forEach((control) => {\r\n      if (control instanceof SpecialFormControl) {\r\n        control.markAsDirty();\r\n      } else if (control instanceof SpecialFormGroup) {\r\n        control.unpristineRequired();\r\n      } else if (control instanceof SpecialFormArray) {\r\n        control.unpristineRequired();\r\n      }\r\n    });\r\n  }\r\n\r\n  specialReset(value = {}) {\r\n    const aux: any = {};\r\n    Object.entries(this.controls).map(([key, control]) => {\r\n      if (control instanceof SpecialFormControl) {\r\n        aux[key] = control.defaultValue;\r\n      } else if (control instanceof SpecialFormArray) {\r\n        control.clear();\r\n      }\r\n    });\r\n\r\n    this.reset({ ...aux, ...value });\r\n  }\r\n  setReadOnly(status: boolean = true) {\r\n    Object.values(this.controls).map((value) => {\r\n      if (\r\n        value instanceof SpecialFormControl ||\r\n        value instanceof SpecialFormArray ||\r\n        value instanceof SpecialFormGroup\r\n      ) {\r\n        value.setReadOnly(status);\r\n      }\r\n    });\r\n  }\r\n  setReadOnlyByFields(fieldsObject: { [key: string]: boolean }) {\r\n    Object.entries(fieldsObject).map(([key, value]) => {\r\n      const control = this.controls[key];\r\n      if (control instanceof SpecialFormControl) {\r\n        control.readOnly = value;\r\n      }\r\n    });\r\n  }\r\n\r\n  setHiddenByFields(fields: { [key: string]: boolean }) {\r\n    Object.entries(fields).map(([key, value]) => {\r\n      const control = this.controls[key];\r\n      if (control instanceof SpecialFormControl) {\r\n        control.hidden = value;\r\n      }\r\n    });\r\n  }\r\n  setDisabled(status: boolean) {\r\n    Object.values(this.controls).map((value) => {\r\n      if (\r\n        value instanceof SpecialFormControl ||\r\n        value instanceof SpecialFormArray ||\r\n        value instanceof SpecialFormGroup\r\n      ) {\r\n        value.setDisabled(status);\r\n      }\r\n    });\r\n  }\r\n\r\n  setDisabledByFields(fieldsObject: any) {\r\n    Object.entries(fieldsObject).map((entries) => {\r\n      if (this.controls[entries[0]] instanceof SpecialFormControl) {\r\n        entries[1]\r\n          ? this.controls[entries[0]].enable()\r\n          : this.controls[entries[0]].disable();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * donde value es el objeto semilla y detailForm es un arreglo de form key para dar un marco al formarray\r\n   */\r\n\r\n  setFormValue(value: any) {\r\n    this.specialReset(value);\r\n    Object.entries(this.controls)\r\n      .filter(([_key, control]) => control instanceof SpecialFormArray)\r\n      .map(([key, control]) => {\r\n        (control as SpecialFormArray).fillFormArray(value[key]);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Método que retorna\r\n   */\r\n\r\n  getIdPkey(): SpecialFormControl<any> | undefined {\r\n    return Object.values(this.controls).find(\r\n      (control) =>\r\n        control instanceof SpecialFormControl &&\r\n        control.type === EControlTypes.pkey\r\n    ) as SpecialFormControl<any> | undefined;\r\n  }\r\n}\r\n\r\nexport class SpecialFormArray\r\n  extends FormArray\r\n  implements Partial<IFieldBasicData>\r\n{\r\n  public name?: string;\r\n  public placeholder?: string;\r\n  public label?: string;\r\n  public tooltip?: string;\r\n  public icon?: string;\r\n  public elementId?: string;\r\n  public styleClasses?: string;\r\n  public required?: boolean;\r\n  public hidden?: boolean;\r\n  public readOnly?: boolean;\r\n  public settings?: IArraySettings;\r\n  public type?: EControlTypes;\r\n  public defaultValue?: any;\r\n  public form: SpecialFormGroup;\r\n\r\n  constructor(\r\n    {\r\n      name,\r\n      settings,\r\n      type,\r\n      validators,\r\n      asyncValidators,\r\n      elementId,\r\n      styleClasses,\r\n      defaultValue,\r\n      hidden,\r\n      icon,\r\n      label,\r\n      placeholder,\r\n      readOnly,\r\n      required,\r\n      tooltip,\r\n      errorMessages,\r\n    }: Partial<TSpecialArray>,\r\n    form: SpecialFormGroup,\r\n    controls: AbstractControl[]\r\n  ) {\r\n    super(controls, validators, asyncValidators);\r\n    this.form = form;\r\n    this.name = name;\r\n    this.placeholder = placeholder;\r\n    this.label = label;\r\n    this.tooltip = tooltip;\r\n    this.icon = icon;\r\n    this.elementId = elementId;\r\n    this.settings = settings;\r\n    this.type = type;\r\n    this.styleClasses = styleClasses;\r\n    this.hidden = hidden;\r\n    this.readOnly = readOnly;\r\n    this.required = required;\r\n    this.defaultValue = defaultValue;\r\n  }\r\n\r\n  fillFormArray(data: any[]) {\r\n    this.clear();\r\n    data.map((item) => {\r\n      this.form.specialReset(item);\r\n      this.push(_.cloneDeep(this.form));\r\n    });\r\n    this.form.reset();\r\n  }\r\n\r\n  addItem(item: any) {\r\n    this.form.specialReset(item);\r\n    this.push(_.cloneDeep(this.form));\r\n    this.form.specialReset();\r\n    this.markAsDirty();\r\n  }\r\n\r\n  SpecialPush(index?: number) {\r\n    if (!index) this.push(_.cloneDeep(this.form));\r\n    else this.controls[index].reset(this.form.value);\r\n  }\r\n\r\n  SpecialInsert(index = 0) {\r\n    this.insert(index, _.cloneDeep(this.form));\r\n  }\r\n\r\n  SpecialEdit(index: number, newValue: Object) {\r\n    this.controls[index].reset({ ...this.controls[index].value, ...newValue });\r\n    this.markAsDirty();\r\n  }\r\n\r\n  /**\r\n   * Vuelve todos los controles del formArray de lectura o de sololectura\r\n   * @param status\r\n   */\r\n\r\n  setReadOnly(status: boolean) {\r\n    this.readOnly = status;\r\n    this.controls.forEach((control) => {\r\n      if (control instanceof SpecialFormGroup) {\r\n        control.setReadOnly(status);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Vuelve todos los controles del formArray habilitados o deshabilitados\r\n   * @param status\r\n   */\r\n\r\n  setDisabled(status: boolean) {\r\n    status ? this.disable() : this.enable();\r\n    this.controls.forEach((control) => {\r\n      if (control instanceof SpecialFormGroup) {\r\n        control.setDisabled(status);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Permite editar un control especifico.\r\n   * @param index\r\n   */\r\n\r\n  editControl(index: number) {\r\n    this.form.reset(this.controls[index].value);\r\n  }\r\n\r\n  unpristineRequired() {\r\n    this.markAsDirty();\r\n    this.controls.forEach((item) => {\r\n      (<SpecialFormGroup>item).unpristineRequired();\r\n    });\r\n  }\r\n\r\n  recursiveFillForm(form: FormGroup, data: any): FormGroup {\r\n    Object.entries(form.controls).map(([key, control]) => {\r\n      if (control instanceof FormControl) {\r\n        control.setValue(data[key]);\r\n      } else if (control instanceof FormArray) {\r\n        data[key].forEach(() => {});\r\n      } else if (control instanceof FormGroup) {\r\n        control.reset(data[key]);\r\n      }\r\n    });\r\n    return form;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "type": "TSpecialFields",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "type": "TSpecialFields",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "elementId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "errorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "length",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "readOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "styleClasses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EControlTypes",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "setDisabled",
                    "args": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setHidden",
                    "args": [
                        {
                            "name": "status",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setReadOnly",
                    "args": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "FormControl",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IFieldBasicData"
            ]
        },
        {
            "name": "SpecialFormGroup",
            "id": "class-SpecialFormGroup-ab8e238cbb4a8f95a17e7da6b3d014a262503b8d9341167246bb37b718b20c58b10ed6382e1d3f6debeed76a44960d915418caddbc966a170ba99e97215ef78c",
            "file": "projects/special-forms/src/lib/core/forms/special-forms.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\r\n  AbstractControl,\r\n  FormArray,\r\n  FormControl,\r\n  FormGroup,\r\n} from '@angular/forms';\r\nimport * as _ from 'lodash';\r\nimport { EControlTypes } from '../enums/control-types.enum';\r\nimport { IFieldBasicData } from '../interfaces/field-basics.interfaces';\r\nimport {\r\n  IArraySettings,\r\n  IFormSettings,\r\n  TSpecialFields,\r\n  TSpecialForm,\r\n  TSpecialArray,\r\n} from '../interfaces/form.interfaces';\r\n\r\nexport class SpecialFormControl<T>\r\n  extends FormControl\r\n  implements IFieldBasicData\r\n{\r\n  public name: string;\r\n  public placeholder: string;\r\n  public label: string;\r\n  public tooltip: string;\r\n  public icon: string;\r\n  public elementId: string;\r\n  public styleClasses: string;\r\n  public length: number;\r\n  public required: boolean;\r\n  public hidden: boolean;\r\n  public readOnly: boolean;\r\n  public settings: T;\r\n  public type: EControlTypes;\r\n  public errorMessages: { [key: string]: string };\r\n\r\n  constructor({\r\n    name,\r\n    settings,\r\n    type,\r\n    validators,\r\n    asyncValidators,\r\n    elementId,\r\n    styleClasses,\r\n    defaultValue,\r\n    hidden,\r\n    icon,\r\n    label,\r\n    length,\r\n    placeholder,\r\n    readOnly,\r\n    required,\r\n    tooltip,\r\n    errorMessages\r\n  }: TSpecialFields) {\r\n    super(defaultValue, validators, asyncValidators);\r\n\r\n    this.name = name;\r\n    this.placeholder = placeholder;\r\n    this.label = label;\r\n    this.tooltip = tooltip;\r\n    this.icon = icon;\r\n    this.elementId = elementId;\r\n    this.settings = settings as T;\r\n    this.type = type;\r\n    this.styleClasses = styleClasses;\r\n    this.hidden = hidden;\r\n    this.length = length;\r\n    this.readOnly = readOnly;\r\n    this.required = required;\r\n    this.errorMessages=errorMessages;\r\n  }\r\n\r\n  setReadOnly(status: boolean = true) {\r\n    this.readOnly = status;\r\n  }\r\n\r\n  setDisabled(status: boolean = true) {\r\n    status ? this.disable() : this.enable();\r\n  }\r\n\r\n  setHidden(status = true) {\r\n    this.hidden = status;\r\n  }\r\n}\r\nexport class SpecialFormGroup extends FormGroup implements IFieldBasicData {\r\n  public name: string;\r\n  public placeholder: string;\r\n  public label: string;\r\n  public tooltip: string;\r\n  public icon: string;\r\n  public elementId: string;\r\n  public styleClasses: string;\r\n  public length: number;\r\n  public required: boolean;\r\n  public hidden: boolean;\r\n  public readOnly: boolean;\r\n  public settings: IFormSettings;\r\n  public type: EControlTypes;\r\n  public defaultValue: any;\r\n  public errorMessages: { [key: string]: string };\r\n\r\n  constructor(\r\n    {\r\n      name,\r\n      settings,\r\n      type,\r\n      validators,\r\n      asyncValidators,\r\n      elementId,\r\n      styleClasses,\r\n      defaultValue,\r\n      hidden,\r\n      icon,\r\n      label,\r\n      length,\r\n      placeholder,\r\n      readOnly,\r\n      required,\r\n      tooltip,\r\n    }: TSpecialForm,\r\n    controls: {\r\n      [key: string]: SpecialFormControl<any>;\r\n    }\r\n  ) {\r\n    super(controls, validators, asyncValidators);\r\n\r\n    this.name = name;\r\n    this.placeholder = placeholder;\r\n    this.label = label;\r\n    this.tooltip = tooltip;\r\n    this.icon = icon;\r\n    this.elementId = elementId;\r\n    this.settings = settings;\r\n    this.type = type;\r\n    this.styleClasses = styleClasses;\r\n    this.hidden = hidden;\r\n    this.length = length;\r\n    this.readOnly = readOnly;\r\n    this.required = required;\r\n    this.defaultValue = defaultValue;\r\n  }\r\n\r\n  unpristineRequired() {\r\n    Object.values(this.controls).forEach((control) => {\r\n      if (control instanceof SpecialFormControl) {\r\n        control.markAsDirty();\r\n      } else if (control instanceof SpecialFormGroup) {\r\n        control.unpristineRequired();\r\n      } else if (control instanceof SpecialFormArray) {\r\n        control.unpristineRequired();\r\n      }\r\n    });\r\n  }\r\n\r\n  specialReset(value = {}) {\r\n    const aux: any = {};\r\n    Object.entries(this.controls).map(([key, control]) => {\r\n      if (control instanceof SpecialFormControl) {\r\n        aux[key] = control.defaultValue;\r\n      } else if (control instanceof SpecialFormArray) {\r\n        control.clear();\r\n      }\r\n    });\r\n\r\n    this.reset({ ...aux, ...value });\r\n  }\r\n  setReadOnly(status: boolean = true) {\r\n    Object.values(this.controls).map((value) => {\r\n      if (\r\n        value instanceof SpecialFormControl ||\r\n        value instanceof SpecialFormArray ||\r\n        value instanceof SpecialFormGroup\r\n      ) {\r\n        value.setReadOnly(status);\r\n      }\r\n    });\r\n  }\r\n  setReadOnlyByFields(fieldsObject: { [key: string]: boolean }) {\r\n    Object.entries(fieldsObject).map(([key, value]) => {\r\n      const control = this.controls[key];\r\n      if (control instanceof SpecialFormControl) {\r\n        control.readOnly = value;\r\n      }\r\n    });\r\n  }\r\n\r\n  setHiddenByFields(fields: { [key: string]: boolean }) {\r\n    Object.entries(fields).map(([key, value]) => {\r\n      const control = this.controls[key];\r\n      if (control instanceof SpecialFormControl) {\r\n        control.hidden = value;\r\n      }\r\n    });\r\n  }\r\n  setDisabled(status: boolean) {\r\n    Object.values(this.controls).map((value) => {\r\n      if (\r\n        value instanceof SpecialFormControl ||\r\n        value instanceof SpecialFormArray ||\r\n        value instanceof SpecialFormGroup\r\n      ) {\r\n        value.setDisabled(status);\r\n      }\r\n    });\r\n  }\r\n\r\n  setDisabledByFields(fieldsObject: any) {\r\n    Object.entries(fieldsObject).map((entries) => {\r\n      if (this.controls[entries[0]] instanceof SpecialFormControl) {\r\n        entries[1]\r\n          ? this.controls[entries[0]].enable()\r\n          : this.controls[entries[0]].disable();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * donde value es el objeto semilla y detailForm es un arreglo de form key para dar un marco al formarray\r\n   */\r\n\r\n  setFormValue(value: any) {\r\n    this.specialReset(value);\r\n    Object.entries(this.controls)\r\n      .filter(([_key, control]) => control instanceof SpecialFormArray)\r\n      .map(([key, control]) => {\r\n        (control as SpecialFormArray).fillFormArray(value[key]);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Método que retorna\r\n   */\r\n\r\n  getIdPkey(): SpecialFormControl<any> | undefined {\r\n    return Object.values(this.controls).find(\r\n      (control) =>\r\n        control instanceof SpecialFormControl &&\r\n        control.type === EControlTypes.pkey\r\n    ) as SpecialFormControl<any> | undefined;\r\n  }\r\n}\r\n\r\nexport class SpecialFormArray\r\n  extends FormArray\r\n  implements Partial<IFieldBasicData>\r\n{\r\n  public name?: string;\r\n  public placeholder?: string;\r\n  public label?: string;\r\n  public tooltip?: string;\r\n  public icon?: string;\r\n  public elementId?: string;\r\n  public styleClasses?: string;\r\n  public required?: boolean;\r\n  public hidden?: boolean;\r\n  public readOnly?: boolean;\r\n  public settings?: IArraySettings;\r\n  public type?: EControlTypes;\r\n  public defaultValue?: any;\r\n  public form: SpecialFormGroup;\r\n\r\n  constructor(\r\n    {\r\n      name,\r\n      settings,\r\n      type,\r\n      validators,\r\n      asyncValidators,\r\n      elementId,\r\n      styleClasses,\r\n      defaultValue,\r\n      hidden,\r\n      icon,\r\n      label,\r\n      placeholder,\r\n      readOnly,\r\n      required,\r\n      tooltip,\r\n      errorMessages,\r\n    }: Partial<TSpecialArray>,\r\n    form: SpecialFormGroup,\r\n    controls: AbstractControl[]\r\n  ) {\r\n    super(controls, validators, asyncValidators);\r\n    this.form = form;\r\n    this.name = name;\r\n    this.placeholder = placeholder;\r\n    this.label = label;\r\n    this.tooltip = tooltip;\r\n    this.icon = icon;\r\n    this.elementId = elementId;\r\n    this.settings = settings;\r\n    this.type = type;\r\n    this.styleClasses = styleClasses;\r\n    this.hidden = hidden;\r\n    this.readOnly = readOnly;\r\n    this.required = required;\r\n    this.defaultValue = defaultValue;\r\n  }\r\n\r\n  fillFormArray(data: any[]) {\r\n    this.clear();\r\n    data.map((item) => {\r\n      this.form.specialReset(item);\r\n      this.push(_.cloneDeep(this.form));\r\n    });\r\n    this.form.reset();\r\n  }\r\n\r\n  addItem(item: any) {\r\n    this.form.specialReset(item);\r\n    this.push(_.cloneDeep(this.form));\r\n    this.form.specialReset();\r\n    this.markAsDirty();\r\n  }\r\n\r\n  SpecialPush(index?: number) {\r\n    if (!index) this.push(_.cloneDeep(this.form));\r\n    else this.controls[index].reset(this.form.value);\r\n  }\r\n\r\n  SpecialInsert(index = 0) {\r\n    this.insert(index, _.cloneDeep(this.form));\r\n  }\r\n\r\n  SpecialEdit(index: number, newValue: Object) {\r\n    this.controls[index].reset({ ...this.controls[index].value, ...newValue });\r\n    this.markAsDirty();\r\n  }\r\n\r\n  /**\r\n   * Vuelve todos los controles del formArray de lectura o de sololectura\r\n   * @param status\r\n   */\r\n\r\n  setReadOnly(status: boolean) {\r\n    this.readOnly = status;\r\n    this.controls.forEach((control) => {\r\n      if (control instanceof SpecialFormGroup) {\r\n        control.setReadOnly(status);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Vuelve todos los controles del formArray habilitados o deshabilitados\r\n   * @param status\r\n   */\r\n\r\n  setDisabled(status: boolean) {\r\n    status ? this.disable() : this.enable();\r\n    this.controls.forEach((control) => {\r\n      if (control instanceof SpecialFormGroup) {\r\n        control.setDisabled(status);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Permite editar un control especifico.\r\n   * @param index\r\n   */\r\n\r\n  editControl(index: number) {\r\n    this.form.reset(this.controls[index].value);\r\n  }\r\n\r\n  unpristineRequired() {\r\n    this.markAsDirty();\r\n    this.controls.forEach((item) => {\r\n      (<SpecialFormGroup>item).unpristineRequired();\r\n    });\r\n  }\r\n\r\n  recursiveFillForm(form: FormGroup, data: any): FormGroup {\r\n    Object.entries(form.controls).map(([key, control]) => {\r\n      if (control instanceof FormControl) {\r\n        control.setValue(data[key]);\r\n      } else if (control instanceof FormArray) {\r\n        data[key].forEach(() => {});\r\n      } else if (control instanceof FormGroup) {\r\n        control.reset(data[key]);\r\n      }\r\n    });\r\n    return form;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "type": "TSpecialForm",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "controls",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 101,
                "jsdoctags": [
                    {
                        "type": "TSpecialForm",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "controls",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "elementId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "errorMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "length",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "readOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFormSettings",
                    "optional": false,
                    "description": "",
                    "line": 98,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "styleClasses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EControlTypes",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getIdPkey",
                    "args": [],
                    "optional": false,
                    "returnType": "SpecialFormControl | undefined",
                    "typeParameters": [],
                    "line": 235,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMétodo que retorna\n",
                    "description": "<p>Método que retorna</p>\n"
                },
                {
                    "name": "setDisabled",
                    "args": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledByFields",
                    "args": [
                        {
                            "name": "fieldsObject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldsObject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFormValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 222,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndonde value es el objeto semilla y detailForm es un arreglo de form key para dar un marco al formarray\n",
                    "description": "<p>donde value es el objeto semilla y detailForm es un arreglo de form key para dar un marco al formarray</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setHiddenByFields",
                    "args": [
                        {
                            "name": "fields",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setReadOnly",
                    "args": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setReadOnlyByFields",
                    "args": [
                        {
                            "name": "fieldsObject",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldsObject",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "specialReset",
                    "args": [
                        {
                            "name": "value",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unpristineRequired",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "extends": "FormGroup",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IFieldBasicData"
            ]
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "FormControlViewerComponent",
            "id": "component-FormControlViewerComponent-c61caaee93a3439976920f2016e2e8c7f794317c3de0085adc8ab6d7b7ae48965a9e9331e9dc904b947ffc5ce16833475f50362d00b240982e646088d4d5c464",
            "file": "projects/special-forms/src/lib/aux-storybook-components/form-control-viewer/form-control-viewer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "spf-form-control-viewer",
            "styleUrls": [
                "./form-control-viewer.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./form-control-viewer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "Partial<TSpecialFields>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpecialFormControl<any>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "EControlTypes",
                    "defaultValue": "EControlTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { AsyncValidatorFn, ValidatorFn } from '@angular/forms';\nimport { EControlTypes } from '../../core/enums/control-types.enum';\nimport { SpecialFormControl } from '../../core/forms/special-forms';\nimport { TSpecialFields } from '../../core/interfaces/form.interfaces';\nimport { SpecialFormBuilderService } from '../../core/services';\n\n@Component({\n  selector: 'spf-form-control-viewer',\n  templateUrl: './form-control-viewer.component.html',\n  styleUrls: ['./form-control-viewer.component.css'],\n})\nexport class FormControlViewerComponent implements OnInit {\n  @Input('field') set fieldSetter(field: Partial<TSpecialFields>) {\n    this.control = this.specialFormBuilderService.control(field);\n  }\n\n  EControlTypes=EControlTypes;\n  control: SpecialFormControl<any>;\n\n  constructor(private specialFormBuilderService: SpecialFormBuilderService) {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./form-control-viewer.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "specialFormBuilderService",
                        "type": "SpecialFormBuilderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "specialFormBuilderService",
                        "type": "SpecialFormBuilderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "fieldSetter": {
                    "name": "fieldSetter",
                    "setSignature": {
                        "name": "fieldSetter",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "field",
                                "type": "Partial<TSpecialFields>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 14,
                        "jsdoctags": [
                            {
                                "name": "field",
                                "type": "Partial<TSpecialFields>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<ng-container [ngSwitch]=\"control.type\">\n  <sp-input *ngSwitchCase=\"EControlTypes.input\" [control]=\"control\"></sp-input>\n</ng-container>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
            "file": "stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "SpecialDropdownComponent",
            "id": "component-SpecialDropdownComponent-01dd309b62b90b2c871dbfb32e8914e7d6dde3ea94a549ad08a12a7be1682f768d8d60070f93ea6610921ad83f86bd073e84318788c0203e2efac717ceb2002e",
            "file": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sp-dropdown",
            "styleUrls": [
                "./special-dropdown.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./special-dropdown.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sp-dropdown',\r\n  templateUrl: './special-dropdown.component.html',\r\n  styleUrls: ['./special-dropdown.component.scss'],\r\n})\r\nexport class SpecialDropdownComponent {\r\n  // @Input('readOnly') _readOnly = false;\r\n  // @Input() enableLabel = true;\r\n  // @Input('sfcontrol') _sfcontrol: SpecialFormControl & {\r\n  //   data: DropdownTypesData;\r\n  // };\r\n  // @Output('sendObject') _sendObject: EventEmitter<Object> = new EventEmitter();\r\n\r\n  // value: any = '';\r\n\r\n  // ngOnInit() {}\r\n\r\n  // selectItem(item) {\r\n  //   this._sendObject.emit(item);\r\n  // }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./special-dropdown.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "dropdown S\r\n<!-- <mat-form-field\r\n  class=\"select-container\"\r\n  *ngIf=\"_sfcontrol\"\r\n  [ngClass]=\"{ 'readonly-wrapper': _sfcontrol.readOnly }\"\r\n  [appearance]=\"_sfcontrol.label ? 'outline' : 'standard'\"\r\n>\r\n  <mat-label\r\n    [ngClass]=\"{ 'is-link': _sfcontrol.appearance }\"\r\n    class=\"control-label\"\r\n    *ngIf=\"_sfcontrol.label && enableLabel\"\r\n  >\r\n    {{ _sfcontrol.label | translate }}\r\n    <icon-button-link\r\n      *ngIf=\"_sfcontrol.appearance\"\r\n      class=\"icon-btn\"\r\n      [settings]=\"_sfcontrol.appearance.settings\"\r\n    >\r\n    </icon-button-link>\r\n  </mat-label>\r\n  <mat-select\r\n    class=\"readonly-block\"\r\n    [formControl]=\"_sfcontrol\"\r\n    [required]=\"_sfcontrol.required\"\r\n    (selectionChange)=\"selectItem($event.value)\"\r\n    [attr.disabled]=\"_sfcontrol.disabled\"\r\n    [placeholder]=\"_sfcontrol.placeholder | translate\"\r\n  >\r\n    <mat-option *ngIf=\"!_sfcontrol.required\" [value]=\"null\">\r\n      {{ _sfcontrol.placeholder || \"GENERAL.NOT_SELECTED\" | translate }}\r\n    </mat-option>\r\n    <mat-option\r\n      *ngFor=\"let item of _sfcontrol.data.source | smartAsync | async\"\r\n      [value]=\"item[_sfcontrol.data.fieldId]\"\r\n    >\r\n      {{ item | concatenation: _sfcontrol.data.fieldName }}\r\n    </mat-option>\r\n  </mat-select>\r\n  <mat-icon *ngIf=\"_sfcontrol.icon\" matSuffix>{{ _sfcontrol.icon }}</mat-icon>\r\n  <mat-hint *ngIf=\"_sfcontrol.tooltip\">{{\r\n    _sfcontrol.tooltip | translate\r\n  }}</mat-hint>\r\n  <mat-error>\r\n    {{ _sfcontrol.errors | errorMessage | translate }}\r\n  </mat-error>\r\n</mat-form-field> -->\r\n"
        },
        {
            "name": "SpecialFormsComponent",
            "id": "component-SpecialFormsComponent-b4591c800f6f09a72e90f09d47b73878c31dc5149cf0be8416a2e5c55c821c0bf7e238569723ca2f3c5accc78f5de438468d9472db59d6190c5f04a2d0696854",
            "file": "projects/special-forms/src/lib/special-forms.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "spf-special-forms",
            "styleUrls": [],
            "styles": [],
            "template": "<p>\n  special-forms works!\n</p>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'spf-special-forms',\n  template: `\n    <p>\n      special-forms works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class SpecialFormsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SpecialInputComponent",
            "id": "component-SpecialInputComponent-a25ce03229dc7ad505a042d835374a8a3d9d18cb9c2a73f70a056032d1f0166fc02b3fb32ffae56a071e799bb4206cdc039726005dc944406b24ed88d9528d05",
            "file": "projects/special-forms/src/lib/components/special-input/special-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sp-input",
            "styleUrls": [
                "./special-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./special-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "SpecialFormControl<IInputSettings>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "iconAction",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onEnter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { SpecialFormControl } from '../../core/forms/special-forms';\nimport { IInputSettings } from './special-input.interface';\n\n@Component({\n  selector: 'sp-input',\n  templateUrl: './special-input.component.html',\n  styleUrls: ['./special-input.component.scss']\n})\nexport class SpecialInputComponent implements OnInit {\n  @Input() control: SpecialFormControl<IInputSettings>;\n\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\n  @Output() onEnter: EventEmitter<any> = new EventEmitter();\n  @Output() iconAction: EventEmitter<any> = new EventEmitter();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"~@angular/material/prebuilt-themes/indigo-pink.css\";\r\n",
                    "styleUrl": "./special-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"control\">\n  <mat-form-field\n    class=\"form-container\"\n    [appearance]=\"control.label ? 'outline' : 'standard'\"\n  >\n    <mat-label class=\"control-label\" *ngIf=\"control.label\">{{\n      control.label\n    }}</mat-label>\n    <input\n      matInput\n      (blur)=\"onBlur.emit(control.value)\"\n      (keydown.enter)=\"onEnter.emit(control.value)\"\n      autocomplete=\"off\"\n      [type]=\"control.settings?.type || 'text'\"\n      [readonly]=\"control.readOnly\"\n      [required]=\"control.required\"\n      [placeholder]=\"control.placeholder\"\n      [formControl]=\"control\"\n    />\n    <mat-icon\n      *ngIf=\"control.icon\"\n      class=\"color-primary\"\n      (click)=\"iconAction.emit()\"\n      matPrefix\n      >{{ control.icon }}\n    </mat-icon>\n    <mat-hint>\n      {{ control.tooltip }}\n    </mat-hint>\n    <mat-error>\n      {{ control.errors | errorMessage: control.errorMessages }}\n      </mat-error\n    >\n  </mat-form-field>\n</ng-container>\n"
        }
    ],
    "modules": [
        {
            "name": "FormControlViewerModule",
            "id": "module-FormControlViewerModule-601d15d1f686d7db25ddd45bec4ff9431d5c3165bfe9099bacfbb4d63de1751235cac81c2994ea2b1869fd2a0d861d2e5995f761dc2f4df1c5389fc8547898d1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/special-forms/src/lib/aux-storybook-components/form-control-viewer/form-control-viewer.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormControlViewerComponent } from './form-control-viewer.component';\nimport { SpecialFormBuilderService } from '../../core/services';\nimport { SpecialInputModule } from '../../components/special-input/special-input.module';\n\n@NgModule({\n  declarations: [FormControlViewerComponent],\n  imports: [CommonModule, SpecialInputModule],\n  exports: [FormControlViewerComponent],\n  providers: [SpecialFormBuilderService],\n})\nexport class FormControlViewerModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "SpecialFormBuilderService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormControlViewerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SpecialInputModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FormControlViewerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpecialDropdownModule",
            "id": "module-SpecialDropdownModule-984125f183744b7b7a12ced28c300ee3fdaa122466e98b0b84e3590073c3eda120f9b501878380144c588754690620a28420178c7fa20f4ae244fd609abbc447",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SpecialDropdownComponent } from './special-dropdown.component';\n\n@NgModule({\n  declarations: [SpecialDropdownComponent],\n  imports: [CommonModule],\n  exports: [SpecialDropdownComponent],\n})\nexport class SpecialDropdownModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SpecialDropdownComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SpecialDropdownComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpecialFormsModule",
            "id": "module-SpecialFormsModule-d0df37a4018f675086bb0d72979dea723a9a31191db1c953018cfa3fa81f47402f757bc0c0bc753fa83cad8a82b42396df1c691f3607d675e2dfd2dc349a9990",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/special-forms/src/lib/special-forms.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { SpecialFormsComponent } from './special-forms.component';\n\n\n\n@NgModule({\n  declarations: [\n    SpecialFormsComponent,\n  ],\n  imports: [\n  ],\n  exports: [\n    SpecialFormsComponent\n  ]\n})\nexport class SpecialFormsModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SpecialFormsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SpecialFormsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpecialInputModule",
            "id": "module-SpecialInputModule-4620e41ea519dbc138004e15f476afdc7ea69a1b46cb260d526c0bd9082f8af0891fedfc8f9250fb4911efd44fc9d8d712ff044bd3183b3fa2632ba73d439b10",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/special-forms/src/lib/components/special-input/special-input.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SpecialInputComponent } from './special-input.component';\nimport { MatInputModule } from '@angular/material/input';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ErrorMessagePipe } from '../../pipes/error.pipe';\n\n@NgModule({\n  declarations: [SpecialInputComponent,ErrorMessagePipe],\n  imports: [CommonModule, MatInputModule,ReactiveFormsModule],\n  exports: [SpecialInputComponent],\n})\nexport class SpecialInputModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ErrorMessagePipe"
                        },
                        {
                            "name": "SpecialInputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SpecialInputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "light",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "light",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-input/special-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SpecialDropdownComponent>",
                "defaultValue": "(\r\n  args: SpecialDropdownComponent\r\n) => ({\r\n  title: 'Special dropdown control',\r\n  component: SpecialDropdownComponent,\r\n  props: {\r\n    ...args,\r\n  },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/special-forms/src/lib/components/special-input/special-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FormControlViewerComponent>",
                "defaultValue": "(\r\n  args: FormControlViewerComponent\r\n) => ({\r\n  title: 'Special input control',\r\n  template: `\r\n    <spf-form-control-viewer\r\n      [field]=\"{\r\n        placeholder: placeholder,\r\n        label: label,\r\n        tooltip: tooltip,\r\n        icon: icon,\r\n        elementId: elementId,\r\n        styleClasses: styleClasses,\r\n        length: length,\r\n        required: required,\r\n        hidden: hidden,\r\n        readOnly: readOnly,\r\n        type:type,\r\n        settings:settings,\r\n        errorMessages: errorMessages\r\n      }\"\r\n      >\r\n    </spf-form-control-viewer>`,\r\n  props: {\r\n    ...args,\r\n  },\r\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "IArraySettings",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "IDropdownSettings",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.interface.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "IFormSettings",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "IInputSettings",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/special-forms/src/lib/components/special-input/special-input.interface.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "TRawFields",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "IInputField | IDropdownField | IArrayField | IFormField",
                "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "TSpecialArray",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TSpecialDropdown",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TSpecialFields",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "TSpecialInput | TSpecialDropdown | TSpecialArray | TSpecialForm",
                "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "TSpecialForm",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TSpecialInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            }
        ],
        "enumerations": [
            {
                "name": "EControlTypes",
                "childs": [
                    {
                        "name": "pkey",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "PRIMARY-KEY"
                    },
                    {
                        "name": "input",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "INPUT"
                    },
                    {
                        "name": "textArea",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "TEXT-AREA"
                    },
                    {
                        "name": "dropdown",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DROPDOWN"
                    },
                    {
                        "name": "date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DATE"
                    },
                    {
                        "name": "time",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "TIME"
                    },
                    {
                        "name": "checkbox",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CHECKBOX"
                    },
                    {
                        "name": "file",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FILE"
                    },
                    {
                        "name": "autocomplete",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "AUTOCOMPLETE"
                    },
                    {
                        "name": "multiple",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MULTIPLE-AUTOCOMPLETE"
                    },
                    {
                        "name": "array",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ARRAY"
                    },
                    {
                        "name": "form",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FORM"
                    },
                    {
                        "name": "readOnly",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "READONLY"
                    },
                    {
                        "name": "default",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "default"
                    },
                    {
                        "name": "phone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "phone"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/special-forms/src/lib/core/enums/control-types.enum.ts"
            }
        ],
        "groupedVariables": {
            "projects/special-forms/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.stories.ts": [
                {
                    "name": "light",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SpecialDropdownComponent>",
                    "defaultValue": "(\r\n  args: SpecialDropdownComponent\r\n) => ({\r\n  title: 'Special dropdown control',\r\n  component: SpecialDropdownComponent,\r\n  props: {\r\n    ...args,\r\n  },\r\n})"
                }
            ],
            "projects/special-forms/src/lib/components/special-input/special-input.stories.ts": [
                {
                    "name": "light",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-input/special-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/special-forms/src/lib/components/special-input/special-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FormControlViewerComponent>",
                    "defaultValue": "(\r\n  args: FormControlViewerComponent\r\n) => ({\r\n  title: 'Special input control',\r\n  template: `\r\n    <spf-form-control-viewer\r\n      [field]=\"{\r\n        placeholder: placeholder,\r\n        label: label,\r\n        tooltip: tooltip,\r\n        icon: icon,\r\n        elementId: elementId,\r\n        styleClasses: styleClasses,\r\n        length: length,\r\n        required: required,\r\n        hidden: hidden,\r\n        readOnly: readOnly,\r\n        type:type,\r\n        settings:settings,\r\n        errorMessages: errorMessages\r\n      }\"\r\n      >\r\n    </spf-form-control-viewer>`,\r\n  props: {\r\n    ...args,\r\n  },\r\n})"
                }
            ],
            "stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "projects/special-forms/src/lib/core/enums/control-types.enum.ts": [
                {
                    "name": "EControlTypes",
                    "childs": [
                        {
                            "name": "pkey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "PRIMARY-KEY"
                        },
                        {
                            "name": "input",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "INPUT"
                        },
                        {
                            "name": "textArea",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "TEXT-AREA"
                        },
                        {
                            "name": "dropdown",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DROPDOWN"
                        },
                        {
                            "name": "date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DATE"
                        },
                        {
                            "name": "time",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "TIME"
                        },
                        {
                            "name": "checkbox",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CHECKBOX"
                        },
                        {
                            "name": "file",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FILE"
                        },
                        {
                            "name": "autocomplete",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "AUTOCOMPLETE"
                        },
                        {
                            "name": "multiple",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MULTIPLE-AUTOCOMPLETE"
                        },
                        {
                            "name": "array",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ARRAY"
                        },
                        {
                            "name": "form",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FORM"
                        },
                        {
                            "name": "readOnly",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "READONLY"
                        },
                        {
                            "name": "default",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "default"
                        },
                        {
                            "name": "phone",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "phone"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/special-forms/src/lib/core/enums/control-types.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts": [
                {
                    "name": "IArraySettings",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "IFormSettings",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "TRawFields",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "IInputField | IDropdownField | IArrayField | IFormField",
                    "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "TSpecialArray",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "TSpecialDropdown",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "TSpecialFields",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "TSpecialInput | TSpecialDropdown | TSpecialArray | TSpecialForm",
                    "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "TSpecialForm",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "TSpecialInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.interface.ts": [
                {
                    "name": "IDropdownSettings",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.interface.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "projects/special-forms/src/lib/components/special-input/special-input.interface.ts": [
                {
                    "name": "IInputSettings",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/special-forms/src/lib/components/special-input/special-input.interface.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "projects/special-forms/src/lib/aux-storybook-components/form-control-viewer/form-control-viewer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormControlViewerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpecialDropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDropdownField",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "light",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-dropdown/special-dropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-input/special-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpecialInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-input/special-input.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IInputField",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-input/special-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "light",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/components/special-input/special-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/forms/special-forms.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SpecialFormArray",
                "coveragePercent": 11,
                "coverageCount": "3/26",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/forms/special-forms.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SpecialFormControl",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/forms/special-forms.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SpecialFormGroup",
                "coveragePercent": 7,
                "coverageCount": "2/26",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/interfaces/field-basics.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFieldBasicData",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/interfaces/field-basics.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFieldData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IArrayField",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IcontrolName",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFormField",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/interfaces/form.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFormStructure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/services/special-form-builder/special-form-builder.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SpecialFormBuilderService",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/core/services/special-form-builder/special-form-builder.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IControlParams",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/pipes/error.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ErrorMessagePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/special-forms.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpecialFormsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/lib/special-forms.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SpecialFormsService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/special-forms/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}